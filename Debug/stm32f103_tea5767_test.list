
stm32f103_tea5767_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001010  08005868  08005868  00015868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000688  20000000  08006888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004f4  20000688  08006f10  00020688  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b7c  08006f10  00020b7c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020688  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010072  00000000  00000000  000206b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000233f  00000000  00000000  00030723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ce5  00000000  00000000  00032a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005b0  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000940  00000000  00000000  00036cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000049a6  00000000  00000000  00037638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002394  00000000  00000000  0003bfde  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e372  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b6c  00000000  00000000  0003e3f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000688 	.word	0x20000688
 800012c:	00000000 	.word	0x00000000
 8000130:	08005850 	.word	0x08005850

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000068c 	.word	0x2000068c
 800014c:	08005850 	.word	0x08005850

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_f2uiz>:
 80010c8:	0042      	lsls	r2, r0, #1
 80010ca:	d20e      	bcs.n	80010ea <__aeabi_f2uiz+0x22>
 80010cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d0:	d30b      	bcc.n	80010ea <__aeabi_f2uiz+0x22>
 80010d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010da:	d409      	bmi.n	80010f0 <__aeabi_f2uiz+0x28>
 80010dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e4:	fa23 f002 	lsr.w	r0, r3, r2
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2uiz+0x32>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d102      	bne.n	8001100 <__aeabi_f2uiz+0x38>
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295
 80010fe:	4770      	bx	lr
 8001100:	f04f 0000 	mov.w	r0, #0
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <__aeabi_uldivmod>:
 8001108:	b953      	cbnz	r3, 8001120 <__aeabi_uldivmod+0x18>
 800110a:	b94a      	cbnz	r2, 8001120 <__aeabi_uldivmod+0x18>
 800110c:	2900      	cmp	r1, #0
 800110e:	bf08      	it	eq
 8001110:	2800      	cmpeq	r0, #0
 8001112:	bf1c      	itt	ne
 8001114:	f04f 31ff 	movne.w	r1, #4294967295
 8001118:	f04f 30ff 	movne.w	r0, #4294967295
 800111c:	f000 b97a 	b.w	8001414 <__aeabi_idiv0>
 8001120:	f1ad 0c08 	sub.w	ip, sp, #8
 8001124:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001128:	f000 f806 	bl	8001138 <__udivmoddi4>
 800112c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001134:	b004      	add	sp, #16
 8001136:	4770      	bx	lr

08001138 <__udivmoddi4>:
 8001138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800113c:	468c      	mov	ip, r1
 800113e:	460e      	mov	r6, r1
 8001140:	4604      	mov	r4, r0
 8001142:	9d08      	ldr	r5, [sp, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d150      	bne.n	80011ea <__udivmoddi4+0xb2>
 8001148:	428a      	cmp	r2, r1
 800114a:	4617      	mov	r7, r2
 800114c:	d96c      	bls.n	8001228 <__udivmoddi4+0xf0>
 800114e:	fab2 fe82 	clz	lr, r2
 8001152:	f1be 0f00 	cmp.w	lr, #0
 8001156:	d00b      	beq.n	8001170 <__udivmoddi4+0x38>
 8001158:	f1ce 0c20 	rsb	ip, lr, #32
 800115c:	fa01 f60e 	lsl.w	r6, r1, lr
 8001160:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001164:	fa02 f70e 	lsl.w	r7, r2, lr
 8001168:	ea4c 0c06 	orr.w	ip, ip, r6
 800116c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001170:	0c3a      	lsrs	r2, r7, #16
 8001172:	fbbc f9f2 	udiv	r9, ip, r2
 8001176:	b2bb      	uxth	r3, r7
 8001178:	fb02 cc19 	mls	ip, r2, r9, ip
 800117c:	fb09 fa03 	mul.w	sl, r9, r3
 8001180:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8001184:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001188:	45b2      	cmp	sl, r6
 800118a:	d90a      	bls.n	80011a2 <__udivmoddi4+0x6a>
 800118c:	19f6      	adds	r6, r6, r7
 800118e:	f109 31ff 	add.w	r1, r9, #4294967295
 8001192:	f080 8125 	bcs.w	80013e0 <__udivmoddi4+0x2a8>
 8001196:	45b2      	cmp	sl, r6
 8001198:	f240 8122 	bls.w	80013e0 <__udivmoddi4+0x2a8>
 800119c:	f1a9 0902 	sub.w	r9, r9, #2
 80011a0:	443e      	add	r6, r7
 80011a2:	eba6 060a 	sub.w	r6, r6, sl
 80011a6:	fbb6 f0f2 	udiv	r0, r6, r2
 80011aa:	fb02 6610 	mls	r6, r2, r0, r6
 80011ae:	fb00 f303 	mul.w	r3, r0, r3
 80011b2:	b2a4      	uxth	r4, r4
 80011b4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80011b8:	42a3      	cmp	r3, r4
 80011ba:	d909      	bls.n	80011d0 <__udivmoddi4+0x98>
 80011bc:	19e4      	adds	r4, r4, r7
 80011be:	f100 32ff 	add.w	r2, r0, #4294967295
 80011c2:	f080 810b 	bcs.w	80013dc <__udivmoddi4+0x2a4>
 80011c6:	42a3      	cmp	r3, r4
 80011c8:	f240 8108 	bls.w	80013dc <__udivmoddi4+0x2a4>
 80011cc:	3802      	subs	r0, #2
 80011ce:	443c      	add	r4, r7
 80011d0:	2100      	movs	r1, #0
 80011d2:	1ae4      	subs	r4, r4, r3
 80011d4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011d8:	2d00      	cmp	r5, #0
 80011da:	d062      	beq.n	80012a2 <__udivmoddi4+0x16a>
 80011dc:	2300      	movs	r3, #0
 80011de:	fa24 f40e 	lsr.w	r4, r4, lr
 80011e2:	602c      	str	r4, [r5, #0]
 80011e4:	606b      	str	r3, [r5, #4]
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d907      	bls.n	80011fe <__udivmoddi4+0xc6>
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	d055      	beq.n	800129e <__udivmoddi4+0x166>
 80011f2:	2100      	movs	r1, #0
 80011f4:	e885 0041 	stmia.w	r5, {r0, r6}
 80011f8:	4608      	mov	r0, r1
 80011fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fe:	fab3 f183 	clz	r1, r3
 8001202:	2900      	cmp	r1, #0
 8001204:	f040 808f 	bne.w	8001326 <__udivmoddi4+0x1ee>
 8001208:	42b3      	cmp	r3, r6
 800120a:	d302      	bcc.n	8001212 <__udivmoddi4+0xda>
 800120c:	4282      	cmp	r2, r0
 800120e:	f200 80fc 	bhi.w	800140a <__udivmoddi4+0x2d2>
 8001212:	1a84      	subs	r4, r0, r2
 8001214:	eb66 0603 	sbc.w	r6, r6, r3
 8001218:	2001      	movs	r0, #1
 800121a:	46b4      	mov	ip, r6
 800121c:	2d00      	cmp	r5, #0
 800121e:	d040      	beq.n	80012a2 <__udivmoddi4+0x16a>
 8001220:	e885 1010 	stmia.w	r5, {r4, ip}
 8001224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001228:	b912      	cbnz	r2, 8001230 <__udivmoddi4+0xf8>
 800122a:	2701      	movs	r7, #1
 800122c:	fbb7 f7f2 	udiv	r7, r7, r2
 8001230:	fab7 fe87 	clz	lr, r7
 8001234:	f1be 0f00 	cmp.w	lr, #0
 8001238:	d135      	bne.n	80012a6 <__udivmoddi4+0x16e>
 800123a:	2101      	movs	r1, #1
 800123c:	1bf6      	subs	r6, r6, r7
 800123e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8001242:	fa1f f887 	uxth.w	r8, r7
 8001246:	fbb6 f2fc 	udiv	r2, r6, ip
 800124a:	fb0c 6612 	mls	r6, ip, r2, r6
 800124e:	fb08 f002 	mul.w	r0, r8, r2
 8001252:	0c23      	lsrs	r3, r4, #16
 8001254:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001258:	42b0      	cmp	r0, r6
 800125a:	d907      	bls.n	800126c <__udivmoddi4+0x134>
 800125c:	19f6      	adds	r6, r6, r7
 800125e:	f102 33ff 	add.w	r3, r2, #4294967295
 8001262:	d202      	bcs.n	800126a <__udivmoddi4+0x132>
 8001264:	42b0      	cmp	r0, r6
 8001266:	f200 80d2 	bhi.w	800140e <__udivmoddi4+0x2d6>
 800126a:	461a      	mov	r2, r3
 800126c:	1a36      	subs	r6, r6, r0
 800126e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001272:	fb0c 6610 	mls	r6, ip, r0, r6
 8001276:	fb08 f800 	mul.w	r8, r8, r0
 800127a:	b2a3      	uxth	r3, r4
 800127c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8001280:	45a0      	cmp	r8, r4
 8001282:	d907      	bls.n	8001294 <__udivmoddi4+0x15c>
 8001284:	19e4      	adds	r4, r4, r7
 8001286:	f100 33ff 	add.w	r3, r0, #4294967295
 800128a:	d202      	bcs.n	8001292 <__udivmoddi4+0x15a>
 800128c:	45a0      	cmp	r8, r4
 800128e:	f200 80b9 	bhi.w	8001404 <__udivmoddi4+0x2cc>
 8001292:	4618      	mov	r0, r3
 8001294:	eba4 0408 	sub.w	r4, r4, r8
 8001298:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800129c:	e79c      	b.n	80011d8 <__udivmoddi4+0xa0>
 800129e:	4629      	mov	r1, r5
 80012a0:	4628      	mov	r0, r5
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80012aa:	f1ce 0320 	rsb	r3, lr, #32
 80012ae:	fa26 f203 	lsr.w	r2, r6, r3
 80012b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012b6:	fbb2 f1fc 	udiv	r1, r2, ip
 80012ba:	fa1f f887 	uxth.w	r8, r7
 80012be:	fb0c 2211 	mls	r2, ip, r1, r2
 80012c2:	fa06 f60e 	lsl.w	r6, r6, lr
 80012c6:	fa20 f303 	lsr.w	r3, r0, r3
 80012ca:	fb01 f908 	mul.w	r9, r1, r8
 80012ce:	4333      	orrs	r3, r6
 80012d0:	0c1e      	lsrs	r6, r3, #16
 80012d2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80012d6:	45b1      	cmp	r9, r6
 80012d8:	fa00 f40e 	lsl.w	r4, r0, lr
 80012dc:	d909      	bls.n	80012f2 <__udivmoddi4+0x1ba>
 80012de:	19f6      	adds	r6, r6, r7
 80012e0:	f101 32ff 	add.w	r2, r1, #4294967295
 80012e4:	f080 808c 	bcs.w	8001400 <__udivmoddi4+0x2c8>
 80012e8:	45b1      	cmp	r9, r6
 80012ea:	f240 8089 	bls.w	8001400 <__udivmoddi4+0x2c8>
 80012ee:	3902      	subs	r1, #2
 80012f0:	443e      	add	r6, r7
 80012f2:	eba6 0609 	sub.w	r6, r6, r9
 80012f6:	fbb6 f0fc 	udiv	r0, r6, ip
 80012fa:	fb0c 6210 	mls	r2, ip, r0, r6
 80012fe:	fb00 f908 	mul.w	r9, r0, r8
 8001302:	b29e      	uxth	r6, r3
 8001304:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001308:	45b1      	cmp	r9, r6
 800130a:	d907      	bls.n	800131c <__udivmoddi4+0x1e4>
 800130c:	19f6      	adds	r6, r6, r7
 800130e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001312:	d271      	bcs.n	80013f8 <__udivmoddi4+0x2c0>
 8001314:	45b1      	cmp	r9, r6
 8001316:	d96f      	bls.n	80013f8 <__udivmoddi4+0x2c0>
 8001318:	3802      	subs	r0, #2
 800131a:	443e      	add	r6, r7
 800131c:	eba6 0609 	sub.w	r6, r6, r9
 8001320:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001324:	e78f      	b.n	8001246 <__udivmoddi4+0x10e>
 8001326:	f1c1 0720 	rsb	r7, r1, #32
 800132a:	fa22 f807 	lsr.w	r8, r2, r7
 800132e:	408b      	lsls	r3, r1
 8001330:	ea48 0303 	orr.w	r3, r8, r3
 8001334:	fa26 f407 	lsr.w	r4, r6, r7
 8001338:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800133c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001340:	fa1f fc83 	uxth.w	ip, r3
 8001344:	fb0e 4419 	mls	r4, lr, r9, r4
 8001348:	408e      	lsls	r6, r1
 800134a:	fa20 f807 	lsr.w	r8, r0, r7
 800134e:	fb09 fa0c 	mul.w	sl, r9, ip
 8001352:	ea48 0806 	orr.w	r8, r8, r6
 8001356:	ea4f 4618 	mov.w	r6, r8, lsr #16
 800135a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800135e:	45a2      	cmp	sl, r4
 8001360:	fa02 f201 	lsl.w	r2, r2, r1
 8001364:	fa00 f601 	lsl.w	r6, r0, r1
 8001368:	d908      	bls.n	800137c <__udivmoddi4+0x244>
 800136a:	18e4      	adds	r4, r4, r3
 800136c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001370:	d244      	bcs.n	80013fc <__udivmoddi4+0x2c4>
 8001372:	45a2      	cmp	sl, r4
 8001374:	d942      	bls.n	80013fc <__udivmoddi4+0x2c4>
 8001376:	f1a9 0902 	sub.w	r9, r9, #2
 800137a:	441c      	add	r4, r3
 800137c:	eba4 040a 	sub.w	r4, r4, sl
 8001380:	fbb4 f0fe 	udiv	r0, r4, lr
 8001384:	fb0e 4410 	mls	r4, lr, r0, r4
 8001388:	fb00 fc0c 	mul.w	ip, r0, ip
 800138c:	fa1f f888 	uxth.w	r8, r8
 8001390:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001394:	45a4      	cmp	ip, r4
 8001396:	d907      	bls.n	80013a8 <__udivmoddi4+0x270>
 8001398:	18e4      	adds	r4, r4, r3
 800139a:	f100 3eff 	add.w	lr, r0, #4294967295
 800139e:	d229      	bcs.n	80013f4 <__udivmoddi4+0x2bc>
 80013a0:	45a4      	cmp	ip, r4
 80013a2:	d927      	bls.n	80013f4 <__udivmoddi4+0x2bc>
 80013a4:	3802      	subs	r0, #2
 80013a6:	441c      	add	r4, r3
 80013a8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ac:	fba0 8902 	umull	r8, r9, r0, r2
 80013b0:	eba4 0c0c 	sub.w	ip, r4, ip
 80013b4:	45cc      	cmp	ip, r9
 80013b6:	46c2      	mov	sl, r8
 80013b8:	46ce      	mov	lr, r9
 80013ba:	d315      	bcc.n	80013e8 <__udivmoddi4+0x2b0>
 80013bc:	d012      	beq.n	80013e4 <__udivmoddi4+0x2ac>
 80013be:	b155      	cbz	r5, 80013d6 <__udivmoddi4+0x29e>
 80013c0:	ebb6 030a 	subs.w	r3, r6, sl
 80013c4:	eb6c 060e 	sbc.w	r6, ip, lr
 80013c8:	fa06 f707 	lsl.w	r7, r6, r7
 80013cc:	40cb      	lsrs	r3, r1
 80013ce:	431f      	orrs	r7, r3
 80013d0:	40ce      	lsrs	r6, r1
 80013d2:	602f      	str	r7, [r5, #0]
 80013d4:	606e      	str	r6, [r5, #4]
 80013d6:	2100      	movs	r1, #0
 80013d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013dc:	4610      	mov	r0, r2
 80013de:	e6f7      	b.n	80011d0 <__udivmoddi4+0x98>
 80013e0:	4689      	mov	r9, r1
 80013e2:	e6de      	b.n	80011a2 <__udivmoddi4+0x6a>
 80013e4:	4546      	cmp	r6, r8
 80013e6:	d2ea      	bcs.n	80013be <__udivmoddi4+0x286>
 80013e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80013ec:	eb69 0e03 	sbc.w	lr, r9, r3
 80013f0:	3801      	subs	r0, #1
 80013f2:	e7e4      	b.n	80013be <__udivmoddi4+0x286>
 80013f4:	4670      	mov	r0, lr
 80013f6:	e7d7      	b.n	80013a8 <__udivmoddi4+0x270>
 80013f8:	4618      	mov	r0, r3
 80013fa:	e78f      	b.n	800131c <__udivmoddi4+0x1e4>
 80013fc:	4681      	mov	r9, r0
 80013fe:	e7bd      	b.n	800137c <__udivmoddi4+0x244>
 8001400:	4611      	mov	r1, r2
 8001402:	e776      	b.n	80012f2 <__udivmoddi4+0x1ba>
 8001404:	3802      	subs	r0, #2
 8001406:	443c      	add	r4, r7
 8001408:	e744      	b.n	8001294 <__udivmoddi4+0x15c>
 800140a:	4608      	mov	r0, r1
 800140c:	e706      	b.n	800121c <__udivmoddi4+0xe4>
 800140e:	3a02      	subs	r2, #2
 8001410:	443e      	add	r6, r7
 8001412:	e72b      	b.n	800126c <__udivmoddi4+0x134>

08001414 <__aeabi_idiv0>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_InitTick+0x3c>)
{
 800141c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141e:	7818      	ldrb	r0, [r3, #0]
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	fbb3 f3f0 	udiv	r3, r3, r0
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_InitTick+0x40>)
 800142a:	6810      	ldr	r0, [r2, #0]
 800142c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001430:	f000 f892 	bl	8001558 <HAL_SYSTICK_Config>
 8001434:	4604      	mov	r4, r0
 8001436:	b958      	cbnz	r0, 8001450 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001438:	2d0f      	cmp	r5, #15
 800143a:	d809      	bhi.n	8001450 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	4602      	mov	r2, r0
 800143e:	4629      	mov	r1, r5
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f854 	bl	80014f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_InitTick+0x44>)
 800144a:	4620      	mov	r0, r4
 800144c:	601d      	str	r5, [r3, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001452:	bd38      	pop	{r3, r4, r5, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000014 	.word	0x20000014
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_Init+0x20>)
{
 8001462:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001466:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001468:	f043 0310 	orr.w	r3, r3, #16
 800146c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	f000 f82d 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ffd0 	bl	8001418 <HAL_InitTick>
  HAL_MspInit();
 8001478:	f001 fa42 	bl	8002900 <HAL_MspInit>
}
 800147c:	2000      	movs	r0, #0
 800147e:	bd08      	pop	{r3, pc}
 8001480:	40022000 	.word	0x40022000

08001484 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <HAL_IncTick+0x10>)
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <HAL_IncTick+0x14>)
 8001488:	6811      	ldr	r1, [r2, #0]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	440b      	add	r3, r1
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000ae4 	.word	0x20000ae4
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_GetTick+0x8>)
 800149e:	6818      	ldr	r0, [r3, #0]
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000ae4 	.word	0x20000ae4

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fff6 	bl	800149c <HAL_GetTick>
 80014b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014b4:	bf1e      	ittt	ne
 80014b6:	4b04      	ldrne	r3, [pc, #16]	; (80014c8 <HAL_Delay+0x20>)
 80014b8:	781b      	ldrbne	r3, [r3, #0]
 80014ba:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	4284      	cmp	r4, r0
 80014c4:	d8fa      	bhi.n	80014bc <HAL_Delay+0x14>
  {
  }
}
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	20000000 	.word	0x20000000

080014cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014ce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014e8:	60d3      	str	r3, [r2, #12]
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b530      	push	{r4, r5, lr}
 80014f4:	68dc      	ldr	r4, [r3, #12]
 80014f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	2b04      	cmp	r3, #4
 8001502:	bf28      	it	cs
 8001504:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150c:	bf98      	it	ls
 800150e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	fa05 f303 	lsl.w	r3, r5, r3
 8001514:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001518:	bf88      	it	hi
 800151a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4019      	ands	r1, r3
 800151e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	fa05 f404 	lsl.w	r4, r5, r4
 8001524:	3c01      	subs	r4, #1
 8001526:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001528:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152a:	ea42 0201 	orr.w	r2, r2, r1
 800152e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	bfaf      	iteee	ge
 8001534:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	4b06      	ldrlt	r3, [pc, #24]	; (8001554 <HAL_NVIC_SetPriority+0x64>)
 800153a:	f000 000f 	andlt.w	r0, r0, #15
 800153e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	bfa5      	ittet	ge
 8001542:	b2d2      	uxtbge	r2, r2
 8001544:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800154e:	bd30      	pop	{r4, r5, pc}
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	e000ed14 	.word	0xe000ed14

08001558 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	3801      	subs	r0, #1
 800155a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800155e:	d20a      	bcs.n	8001576 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001588:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800158a:	4616      	mov	r6, r2
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001734 <HAL_GPIO_Init+0x1b0>
 8001592:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001738 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001596:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800159c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80015a4:	45a0      	cmp	r8, r4
 80015a6:	d17f      	bne.n	80016a8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80015a8:	684d      	ldr	r5, [r1, #4]
 80015aa:	2d12      	cmp	r5, #18
 80015ac:	f000 80af 	beq.w	800170e <HAL_GPIO_Init+0x18a>
 80015b0:	f200 8088 	bhi.w	80016c4 <HAL_GPIO_Init+0x140>
 80015b4:	2d02      	cmp	r5, #2
 80015b6:	f000 80a7 	beq.w	8001708 <HAL_GPIO_Init+0x184>
 80015ba:	d87c      	bhi.n	80016b6 <HAL_GPIO_Init+0x132>
 80015bc:	2d00      	cmp	r5, #0
 80015be:	f000 808e 	beq.w	80016de <HAL_GPIO_Init+0x15a>
 80015c2:	2d01      	cmp	r5, #1
 80015c4:	f000 809e 	beq.w	8001704 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015c8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015cc:	2cff      	cmp	r4, #255	; 0xff
 80015ce:	bf93      	iteet	ls
 80015d0:	4682      	movls	sl, r0
 80015d2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80015d6:	3d08      	subhi	r5, #8
 80015d8:	f8d0 b000 	ldrls.w	fp, [r0]
 80015dc:	bf92      	itee	ls
 80015de:	00b5      	lslls	r5, r6, #2
 80015e0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80015e4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e6:	fa09 f805 	lsl.w	r8, r9, r5
 80015ea:	ea2b 0808 	bic.w	r8, fp, r8
 80015ee:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f2:	bf88      	it	hi
 80015f4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	ea48 0505 	orr.w	r5, r8, r5
 80015fc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001600:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001604:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001608:	d04e      	beq.n	80016a8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160a:	4d47      	ldr	r5, [pc, #284]	; (8001728 <HAL_GPIO_Init+0x1a4>)
 800160c:	4f46      	ldr	r7, [pc, #280]	; (8001728 <HAL_GPIO_Init+0x1a4>)
 800160e:	69ad      	ldr	r5, [r5, #24]
 8001610:	f026 0803 	bic.w	r8, r6, #3
 8001614:	f045 0501 	orr.w	r5, r5, #1
 8001618:	61bd      	str	r5, [r7, #24]
 800161a:	69bd      	ldr	r5, [r7, #24]
 800161c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001620:	f005 0501 	and.w	r5, r5, #1
 8001624:	9501      	str	r5, [sp, #4]
 8001626:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800162a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001630:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001634:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001638:	fa09 f90b 	lsl.w	r9, r9, fp
 800163c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001640:	4d3a      	ldr	r5, [pc, #232]	; (800172c <HAL_GPIO_Init+0x1a8>)
 8001642:	42a8      	cmp	r0, r5
 8001644:	d068      	beq.n	8001718 <HAL_GPIO_Init+0x194>
 8001646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800164a:	42a8      	cmp	r0, r5
 800164c:	d066      	beq.n	800171c <HAL_GPIO_Init+0x198>
 800164e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001652:	42a8      	cmp	r0, r5
 8001654:	d064      	beq.n	8001720 <HAL_GPIO_Init+0x19c>
 8001656:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800165a:	42a8      	cmp	r0, r5
 800165c:	bf0c      	ite	eq
 800165e:	2503      	moveq	r5, #3
 8001660:	2504      	movne	r5, #4
 8001662:	fa05 f50b 	lsl.w	r5, r5, fp
 8001666:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800166a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001670:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001674:	bf14      	ite	ne
 8001676:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001678:	43a5      	biceq	r5, r4
 800167a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800167c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800167e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001682:	bf14      	ite	ne
 8001684:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001686:	43a5      	biceq	r5, r4
 8001688:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800168a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001690:	bf14      	ite	ne
 8001692:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001694:	43a5      	biceq	r5, r4
 8001696:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001698:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800169a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800169e:	bf14      	ite	ne
 80016a0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016a2:	ea25 0404 	biceq.w	r4, r5, r4
 80016a6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016a8:	3601      	adds	r6, #1
 80016aa:	2e10      	cmp	r6, #16
 80016ac:	f47f af73 	bne.w	8001596 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80016b0:	b003      	add	sp, #12
 80016b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80016b6:	2d03      	cmp	r5, #3
 80016b8:	d022      	beq.n	8001700 <HAL_GPIO_Init+0x17c>
 80016ba:	2d11      	cmp	r5, #17
 80016bc:	d184      	bne.n	80015c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016be:	68ca      	ldr	r2, [r1, #12]
 80016c0:	3204      	adds	r2, #4
          break;
 80016c2:	e781      	b.n	80015c8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016c4:	4f1a      	ldr	r7, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x1ac>)
 80016c6:	42bd      	cmp	r5, r7
 80016c8:	d009      	beq.n	80016de <HAL_GPIO_Init+0x15a>
 80016ca:	d812      	bhi.n	80016f2 <HAL_GPIO_Init+0x16e>
 80016cc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800173c <HAL_GPIO_Init+0x1b8>
 80016d0:	454d      	cmp	r5, r9
 80016d2:	d004      	beq.n	80016de <HAL_GPIO_Init+0x15a>
 80016d4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80016d8:	454d      	cmp	r5, r9
 80016da:	f47f af75 	bne.w	80015c8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016de:	688a      	ldr	r2, [r1, #8]
 80016e0:	b1c2      	cbz	r2, 8001714 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80016e4:	bf0c      	ite	eq
 80016e6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80016ea:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ee:	2208      	movs	r2, #8
 80016f0:	e76a      	b.n	80015c8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016f2:	4575      	cmp	r5, lr
 80016f4:	d0f3      	beq.n	80016de <HAL_GPIO_Init+0x15a>
 80016f6:	4565      	cmp	r5, ip
 80016f8:	d0f1      	beq.n	80016de <HAL_GPIO_Init+0x15a>
 80016fa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001740 <HAL_GPIO_Init+0x1bc>
 80016fe:	e7eb      	b.n	80016d8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001700:	2200      	movs	r2, #0
 8001702:	e761      	b.n	80015c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001704:	68ca      	ldr	r2, [r1, #12]
          break;
 8001706:	e75f      	b.n	80015c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001708:	68ca      	ldr	r2, [r1, #12]
 800170a:	3208      	adds	r2, #8
          break;
 800170c:	e75c      	b.n	80015c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800170e:	68ca      	ldr	r2, [r1, #12]
 8001710:	320c      	adds	r2, #12
          break;
 8001712:	e759      	b.n	80015c8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001714:	2204      	movs	r2, #4
 8001716:	e757      	b.n	80015c8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001718:	2500      	movs	r5, #0
 800171a:	e7a2      	b.n	8001662 <HAL_GPIO_Init+0xde>
 800171c:	2501      	movs	r5, #1
 800171e:	e7a0      	b.n	8001662 <HAL_GPIO_Init+0xde>
 8001720:	2502      	movs	r5, #2
 8001722:	e79e      	b.n	8001662 <HAL_GPIO_Init+0xde>
 8001724:	40010400 	.word	0x40010400
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800
 8001730:	10210000 	.word	0x10210000
 8001734:	10310000 	.word	0x10310000
 8001738:	10320000 	.word	0x10320000
 800173c:	10110000 	.word	0x10110000
 8001740:	10220000 	.word	0x10220000

08001744 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001744:	6883      	ldr	r3, [r0, #8]
 8001746:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001748:	bf14      	ite	ne
 800174a:	2001      	movne	r0, #1
 800174c:	2000      	moveq	r0, #0
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	b10a      	cbz	r2, 8001756 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	6101      	str	r1, [r0, #16]
 8001754:	4770      	bx	lr
 8001756:	0409      	lsls	r1, r1, #16
 8001758:	e7fb      	b.n	8001752 <HAL_GPIO_WritePin+0x2>

0800175a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800175a:	6802      	ldr	r2, [r0, #0]
 800175c:	6953      	ldr	r3, [r2, #20]
 800175e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001762:	d00d      	beq.n	8001780 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001764:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001768:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800176a:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800176c:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800176e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001770:	2300      	movs	r3, #0
 8001772:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001774:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001778:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	4770      	bx	lr
  }
  return HAL_OK;
 8001780:	4618      	mov	r0, r3
}
 8001782:	4770      	bx	lr

08001784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001788:	4604      	mov	r4, r0
 800178a:	4617      	mov	r7, r2
 800178c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800178e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001792:	b28e      	uxth	r6, r1
 8001794:	6825      	ldr	r5, [r4, #0]
 8001796:	f1b8 0f01 	cmp.w	r8, #1
 800179a:	bf0c      	ite	eq
 800179c:	696b      	ldreq	r3, [r5, #20]
 800179e:	69ab      	ldrne	r3, [r5, #24]
 80017a0:	ea36 0303 	bics.w	r3, r6, r3
 80017a4:	bf14      	ite	ne
 80017a6:	2001      	movne	r0, #1
 80017a8:	2000      	moveq	r0, #0
 80017aa:	b908      	cbnz	r0, 80017b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80017ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017b0:	696b      	ldr	r3, [r5, #20]
 80017b2:	055a      	lsls	r2, r3, #21
 80017b4:	d512      	bpl.n	80017dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017b6:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80017b8:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80017c4:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017c6:	2304      	movs	r3, #4
 80017c8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	2300      	movs	r3, #0
      return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80017ce:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80017d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80017d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80017d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017dc:	1c7b      	adds	r3, r7, #1
 80017de:	d0d9      	beq.n	8001794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017e0:	b94f      	cbnz	r7, 80017f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80017e2:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80017e4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80017e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80017ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017f6:	f7ff fe51 	bl	800149c <HAL_GetTick>
 80017fa:	eba0 0009 	sub.w	r0, r0, r9
 80017fe:	4287      	cmp	r7, r0
 8001800:	d2c8      	bcs.n	8001794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001802:	e7ee      	b.n	80017e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001804 <I2C_WaitOnFlagUntilTimeout>:
{
 8001804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001808:	4604      	mov	r4, r0
 800180a:	4690      	mov	r8, r2
 800180c:	461f      	mov	r7, r3
 800180e:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001810:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001814:	b28d      	uxth	r5, r1
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f1b9 0f01 	cmp.w	r9, #1
 800181c:	bf0c      	ite	eq
 800181e:	695b      	ldreq	r3, [r3, #20]
 8001820:	699b      	ldrne	r3, [r3, #24]
 8001822:	ea35 0303 	bics.w	r3, r5, r3
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	4543      	cmp	r3, r8
 800182e:	d002      	beq.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001830:	2000      	movs	r0, #0
}
 8001832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001836:	1c7b      	adds	r3, r7, #1
 8001838:	d0ed      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800183a:	b95f      	cbnz	r7, 8001854 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800183c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800183e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001840:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001846:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800184a:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001854:	f7ff fe22 	bl	800149c <HAL_GetTick>
 8001858:	1b80      	subs	r0, r0, r6
 800185a:	4287      	cmp	r7, r0
 800185c:	d2db      	bcs.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x12>
 800185e:	e7ed      	b.n	800183c <I2C_WaitOnFlagUntilTimeout+0x38>

08001860 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001860:	b570      	push	{r4, r5, r6, lr}
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	d501      	bpl.n	8001874 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001870:	2000      	movs	r0, #0
 8001872:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ff70 	bl	800175a <I2C_IsAcknowledgeFailed>
 800187a:	b9a8      	cbnz	r0, 80018a8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800187c:	1c6a      	adds	r2, r5, #1
 800187e:	d0f3      	beq.n	8001868 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001880:	b965      	cbnz	r5, 800189c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001882:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001884:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800188c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800188e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001890:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001896:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800189a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800189c:	f7ff fdfe 	bl	800149c <HAL_GetTick>
 80018a0:	1b80      	subs	r0, r0, r6
 80018a2:	4285      	cmp	r5, r0
 80018a4:	d2e0      	bcs.n	8001868 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80018a6:	e7ec      	b.n	8001882 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
}
 80018aa:	bd70      	pop	{r4, r5, r6, pc}

080018ac <I2C_RequestMemoryWrite>:
{
 80018ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80018b0:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80018b2:	6802      	ldr	r2, [r0, #0]
{
 80018b4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80018b6:	6813      	ldr	r3, [r2, #0]
{
 80018b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
{
 80018c0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c2:	9600      	str	r6, [sp, #0]
 80018c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018c6:	2200      	movs	r2, #0
 80018c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80018cc:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018ce:	f7ff ff99 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	b968      	cbnz	r0, 80018f0 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80018da:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018de:	4633      	mov	r3, r6
 80018e0:	491a      	ldr	r1, [pc, #104]	; (800194c <I2C_RequestMemoryWrite+0xa0>)
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff ff4e 	bl	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018e8:	b130      	cbz	r0, 80018f8 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d018      	beq.n	8001922 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
}
 80018f2:	b004      	add	sp, #16
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	9003      	str	r0, [sp, #12]
 80018fc:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018fe:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001900:	9203      	str	r2, [sp, #12]
 8001902:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001904:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001908:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800190c:	f7ff ffa8 	bl	8001860 <I2C_WaitOnTXEFlagUntilTimeout>
 8001910:	b148      	cbz	r0, 8001926 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001914:	2b04      	cmp	r3, #4
 8001916:	d1eb      	bne.n	80018f0 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001920:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
 8001924:	e7e5      	b.n	80018f2 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001926:	f1b8 0f01 	cmp.w	r8, #1
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	d102      	bne.n	8001934 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800192e:	b2ed      	uxtb	r5, r5
 8001930:	611d      	str	r5, [r3, #16]
 8001932:	e7de      	b.n	80018f2 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001934:	0a2a      	lsrs	r2, r5, #8
 8001936:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001938:	990a      	ldr	r1, [sp, #40]	; 0x28
 800193a:	4632      	mov	r2, r6
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff ff8f 	bl	8001860 <I2C_WaitOnTXEFlagUntilTimeout>
 8001942:	2800      	cmp	r0, #0
 8001944:	d1e5      	bne.n	8001912 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	e7f1      	b.n	800192e <I2C_RequestMemoryWrite+0x82>
 800194a:	bf00      	nop
 800194c:	00010002 	.word	0x00010002

08001950 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	4604      	mov	r4, r0
 8001954:	460d      	mov	r5, r1
 8001956:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	075b      	lsls	r3, r3, #29
 800195e:	d501      	bpl.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001960:	2000      	movs	r0, #0
 8001962:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001964:	4620      	mov	r0, r4
 8001966:	f7ff fef8 	bl	800175a <I2C_IsAcknowledgeFailed>
 800196a:	b9a8      	cbnz	r0, 8001998 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800196c:	1c6a      	adds	r2, r5, #1
 800196e:	d0f3      	beq.n	8001958 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001970:	b965      	cbnz	r5, 800198c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001972:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001974:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800197c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800197e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001980:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001982:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001986:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800198a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800198c:	f7ff fd86 	bl	800149c <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	4285      	cmp	r5, r0
 8001994:	d2e0      	bcs.n	8001958 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001996:	e7ec      	b.n	8001972 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001998:	2001      	movs	r0, #1
}
 800199a:	bd70      	pop	{r4, r5, r6, pc}

0800199c <HAL_I2C_Init>:
{
 800199c:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	b908      	cbnz	r0, 80019a6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80019a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019ae:	b91b      	cbnz	r3, 80019b8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80019b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80019b4:	f000 fd0e 	bl	80023d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80019ba:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c8:	f000 fc4e 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019cc:	6863      	ldr	r3, [r4, #4]
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_I2C_Init+0xf0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d830      	bhi.n	8001a36 <HAL_I2C_Init+0x9a>
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_I2C_Init+0xf4>)
 80019d6:	4290      	cmp	r0, r2
 80019d8:	d9e3      	bls.n	80019a2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80019dc:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80019de:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80019e2:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80019e4:	3201      	adds	r2, #1
 80019e6:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019e8:	4a28      	ldr	r2, [pc, #160]	; (8001a8c <HAL_I2C_Init+0xf0>)
 80019ea:	3801      	subs	r0, #1
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d832      	bhi.n	8001a56 <HAL_I2C_Init+0xba>
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f6:	1c43      	adds	r3, r0, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	bf38      	it	cc
 8001a00:	2304      	movcc	r3, #4
 8001a02:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a04:	6a22      	ldr	r2, [r4, #32]
 8001a06:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001a0e:	68e2      	ldr	r2, [r4, #12]
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001a16:	69a2      	ldr	r2, [r4, #24]
 8001a18:	6963      	ldr	r3, [r4, #20]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001a1e:	680b      	ldr	r3, [r1, #0]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a28:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a2e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a34:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <HAL_I2C_Init+0xfc>)
 8001a38:	4290      	cmp	r0, r2
 8001a3a:	d9b2      	bls.n	80019a2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001a3c:	4d15      	ldr	r5, [pc, #84]	; (8001a94 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001a42:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001a46:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a48:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001a4a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001a4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001a50:	fbb2 f2f5 	udiv	r2, r2, r5
 8001a54:	e7c6      	b.n	80019e4 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001a56:	68a2      	ldr	r2, [r4, #8]
 8001a58:	b952      	cbnz	r2, 8001a70 <HAL_I2C_Init+0xd4>
 8001a5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	b16b      	cbz	r3, 8001a86 <HAL_I2C_Init+0xea>
 8001a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6e:	e7c8      	b.n	8001a02 <HAL_I2C_Init+0x66>
 8001a70:	2219      	movs	r2, #25
 8001a72:	4353      	muls	r3, r2
 8001a74:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	b113      	cbz	r3, 8001a86 <HAL_I2C_Init+0xea>
 8001a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a84:	e7bd      	b.n	8001a02 <HAL_I2C_Init+0x66>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e7bb      	b.n	8001a02 <HAL_I2C_Init+0x66>
 8001a8a:	bf00      	nop
 8001a8c:	000186a0 	.word	0x000186a0
 8001a90:	001e847f 	.word	0x001e847f
 8001a94:	000f4240 	.word	0x000f4240
 8001a98:	003d08ff 	.word	0x003d08ff

08001a9c <HAL_I2C_Master_Transmit>:
{
 8001a9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	461f      	mov	r7, r3
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001aa8:	f7ff fcf8 	bl	800149c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001aac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001ab0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d004      	beq.n	8001ac0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001ab6:	2502      	movs	r5, #2
}
 8001ab8:	4628      	mov	r0, r5
 8001aba:	b004      	add	sp, #16
 8001abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac0:	9000      	str	r0, [sp, #0]
 8001ac2:	2319      	movs	r3, #25
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	495d      	ldr	r1, [pc, #372]	; (8001c3c <HAL_I2C_Master_Transmit+0x1a0>)
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff fe9b 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1f1      	bne.n	8001ab6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001ad2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d0ed      	beq.n	8001ab6 <HAL_I2C_Master_Transmit+0x1a>
 8001ada:	2301      	movs	r3, #1
 8001adc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ae6:	bf5e      	ittt	pl
 8001ae8:	681a      	ldrpl	r2, [r3, #0]
 8001aea:	f042 0201 	orrpl.w	r2, r2, #1
 8001aee:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af8:	2221      	movs	r2, #33	; 0x21
 8001afa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001afe:	2210      	movs	r2, #16
 8001b00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	2200      	movs	r2, #0
 8001b06:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b08:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001b0c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b0e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001b12:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b1a:	2a04      	cmp	r2, #4
 8001b1c:	d004      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x8c>
 8001b1e:	2a01      	cmp	r2, #1
 8001b20:	d002      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x8c>
 8001b22:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b26:	d104      	bne.n	8001b32 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e002      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b34:	2a12      	cmp	r2, #18
 8001b36:	d0f7      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b38:	9600      	str	r6, [sp, #0]
 8001b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fe5e 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001b48:	bb28      	cbnz	r0, 8001b96 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	6822      	ldr	r2, [r4, #0]
 8001b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b52:	d112      	bne.n	8001b7a <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b54:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001b58:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b5a:	4633      	mov	r3, r6
 8001b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b5e:	4938      	ldr	r1, [pc, #224]	; (8001c40 <HAL_I2C_Master_Transmit+0x1a4>)
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff fe0f 	bl	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b66:	4605      	mov	r5, r0
 8001b68:	b9a0      	cbnz	r0, 8001b94 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	9003      	str	r0, [sp, #12]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	9203      	str	r2, [sp, #12]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	9303      	str	r3, [sp, #12]
 8001b76:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001b78:	e050      	b.n	8001c1c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b7a:	11eb      	asrs	r3, r5, #7
 8001b7c:	f003 0306 	and.w	r3, r3, #6
 8001b80:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001b84:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <HAL_I2C_Master_Transmit+0x1a8>)
 8001b88:	4633      	mov	r3, r6
 8001b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff fdf9 	bl	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b92:	b148      	cbz	r0, 8001ba8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001ba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001ba4:	2501      	movs	r5, #1
 8001ba6:	e787      	b.n	8001ab8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	b2ed      	uxtb	r5, r5
 8001bac:	611d      	str	r5, [r3, #16]
 8001bae:	e7d4      	b.n	8001b5a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001bb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001bb4:	2503      	movs	r5, #3
 8001bb6:	e77f      	b.n	8001ab8 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb8:	4632      	mov	r2, r6
 8001bba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7ff fe4f 	bl	8001860 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc2:	b140      	cbz	r0, 8001bd6 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d1f4      	bne.n	8001bb4 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e7e6      	b.n	8001ba4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001bd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bd8:	6820      	ldr	r0, [r4, #0]
 8001bda:	1c4b      	adds	r3, r1, #1
 8001bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8001bde:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001be0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001be2:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001be4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bec:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001bee:	1e53      	subs	r3, r2, #1
 8001bf0:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bf2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001bf4:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bf6:	d50a      	bpl.n	8001c0e <HAL_I2C_Master_Transmit+0x172>
 8001bf8:	b14b      	cbz	r3, 8001c0e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001bfa:	1c8b      	adds	r3, r1, #2
 8001bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8001bfe:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001c00:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c02:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001c06:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	4632      	mov	r2, r6
 8001c10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fe9c 	bl	8001950 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c18:	2800      	cmp	r0, #0
 8001c1a:	d1d3      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001c1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ca      	bne.n	8001bb8 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c22:	6821      	ldr	r1, [r4, #0]
 8001c24:	680a      	ldr	r2, [r1, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001c2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001c32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001c3a:	e73d      	b.n	8001ab8 <HAL_I2C_Master_Transmit+0x1c>
 8001c3c:	00100002 	.word	0x00100002
 8001c40:	00010002 	.word	0x00010002
 8001c44:	00010008 	.word	0x00010008

08001c48 <HAL_I2C_Mem_Write>:
{
 8001c48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	469a      	mov	sl, r3
 8001c50:	4688      	mov	r8, r1
 8001c52:	4691      	mov	r9, r2
 8001c54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001c56:	f7ff fc21 	bl	800149c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001c5e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d003      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001c64:	2002      	movs	r0, #2
}
 8001c66:	b002      	add	sp, #8
 8001c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c6c:	9000      	str	r0, [sp, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	2201      	movs	r2, #1
 8001c72:	493e      	ldr	r1, [pc, #248]	; (8001d6c <HAL_I2C_Mem_Write+0x124>)
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fdc5 	bl	8001804 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d1f2      	bne.n	8001c64 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001c7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d0ee      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x1c>
 8001c86:	2301      	movs	r3, #1
 8001c88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8c:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8e:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c90:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c92:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c94:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c96:	bf58      	it	pl
 8001c98:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c9a:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001c9c:	bf5c      	itt	pl
 8001c9e:	f042 0201 	orrpl.w	r2, r2, #1
 8001ca2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001caa:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cac:	2321      	movs	r3, #33	; 0x21
 8001cae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cba:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001cbc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cbe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc2:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001cc4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc8:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cca:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001ccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cce:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001cd0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	f7ff fdea 	bl	80018ac <I2C_RequestMemoryWrite>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d02a      	beq.n	8001d32 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001cde:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7bd      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	f7ff fdb9 	bl	8001860 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cee:	b120      	cbz	r0, 8001cfa <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d034      	beq.n	8001d60 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	e7b5      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cfc:	6827      	ldr	r7, [r4, #0]
 8001cfe:	1c4b      	adds	r3, r1, #1
 8001d00:	6263      	str	r3, [r4, #36]	; 0x24
 8001d02:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001d04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d06:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001d08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d0a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d12:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001d14:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d16:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001d18:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d1a:	d50a      	bpl.n	8001d32 <HAL_I2C_Mem_Write+0xea>
 8001d1c:	b148      	cbz	r0, 8001d32 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d1e:	1c8b      	adds	r3, r1, #2
 8001d20:	6263      	str	r3, [r4, #36]	; 0x24
 8001d22:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001d24:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d26:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001d28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d2a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001d32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	462a      	mov	r2, r5
 8001d36:	4631      	mov	r1, r6
 8001d38:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1d5      	bne.n	8001cea <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	f7ff fe07 	bl	8001950 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1d4      	bne.n	8001cf0 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d46:	6822      	ldr	r2, [r4, #0]
 8001d48:	6813      	ldr	r3, [r2, #0]
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001d52:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d5e:	e782      	b.n	8001c66 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e7bc      	b.n	8001ce6 <HAL_I2C_Mem_Write+0x9e>
 8001d6c:	00100002 	.word	0x00100002
 8001d70:	ffff0000 	.word	0xffff0000

08001d74 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d74:	6803      	ldr	r3, [r0, #0]
{
 8001d76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	07db      	lsls	r3, r3, #31
{
 8001d7c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	d410      	bmi.n	8001da2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	079f      	lsls	r7, r3, #30
 8001d84:	d45e      	bmi.n	8001e44 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	0719      	lsls	r1, r3, #28
 8001d8a:	f100 8095 	bmi.w	8001eb8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	075a      	lsls	r2, r3, #29
 8001d92:	f100 80bf 	bmi.w	8001f14 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d96:	69ea      	ldr	r2, [r5, #28]
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	f040 812d 	bne.w	8001ff8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001d9e:	2000      	movs	r0, #0
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001da2:	4c90      	ldr	r4, [pc, #576]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d007      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d10c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	03de      	lsls	r6, r3, #15
 8001dbc:	d509      	bpl.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	039c      	lsls	r4, r3, #14
 8001dc2:	d5dd      	bpl.n	8001d80 <HAL_RCC_OscConfig+0xc>
 8001dc4:	686b      	ldr	r3, [r5, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1da      	bne.n	8001d80 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
}
 8001dcc:	b002      	add	sp, #8
 8001dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd2:	686b      	ldr	r3, [r5, #4]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d110      	bne.n	8001dfc <HAL_RCC_OscConfig+0x88>
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb5b 	bl	800149c <HAL_GetTick>
 8001de6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	0398      	lsls	r0, r3, #14
 8001dec:	d4c8      	bmi.n	8001d80 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb55 	bl	800149c <HAL_GetTick>
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	2864      	cmp	r0, #100	; 0x64
 8001df6:	d9f7      	bls.n	8001de8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001df8:	2003      	movs	r0, #3
 8001dfa:	e7e7      	b.n	8001dcc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	b99b      	cbnz	r3, 8001e26 <HAL_RCC_OscConfig+0xb2>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6023      	str	r3, [r4, #0]
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb45 	bl	800149c <HAL_GetTick>
 8001e12:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	0399      	lsls	r1, r3, #14
 8001e18:	d5b2      	bpl.n	8001d80 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fb3f 	bl	800149c <HAL_GetTick>
 8001e1e:	1b80      	subs	r0, r0, r6
 8001e20:	2864      	cmp	r0, #100	; 0x64
 8001e22:	d9f7      	bls.n	8001e14 <HAL_RCC_OscConfig+0xa0>
 8001e24:	e7e8      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	d103      	bne.n	8001e36 <HAL_RCC_OscConfig+0xc2>
 8001e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e32:	6023      	str	r3, [r4, #0]
 8001e34:	e7d1      	b.n	8001dda <HAL_RCC_OscConfig+0x66>
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3a:	6023      	str	r3, [r4, #0]
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	e7cd      	b.n	8001de0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e44:	4c67      	ldr	r4, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001e46:	6863      	ldr	r3, [r4, #4]
 8001e48:	f013 0f0c 	tst.w	r3, #12
 8001e4c:	d007      	beq.n	8001e5e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4e:	6863      	ldr	r3, [r4, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d110      	bne.n	8001e7a <HAL_RCC_OscConfig+0x106>
 8001e58:	6863      	ldr	r3, [r4, #4]
 8001e5a:	03da      	lsls	r2, r3, #15
 8001e5c:	d40d      	bmi.n	8001e7a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	079b      	lsls	r3, r3, #30
 8001e62:	d502      	bpl.n	8001e6a <HAL_RCC_OscConfig+0xf6>
 8001e64:	692b      	ldr	r3, [r5, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d1af      	bne.n	8001dca <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	696a      	ldr	r2, [r5, #20]
 8001e6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e72:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e76:	6023      	str	r3, [r4, #0]
 8001e78:	e785      	b.n	8001d86 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7a:	692a      	ldr	r2, [r5, #16]
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e7e:	b16a      	cbz	r2, 8001e9c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e84:	f7ff fb0a 	bl	800149c <HAL_GetTick>
 8001e88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	079f      	lsls	r7, r3, #30
 8001e8e:	d4ec      	bmi.n	8001e6a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fb04 	bl	800149c <HAL_GetTick>
 8001e94:	1b80      	subs	r0, r0, r6
 8001e96:	2802      	cmp	r0, #2
 8001e98:	d9f7      	bls.n	8001e8a <HAL_RCC_OscConfig+0x116>
 8001e9a:	e7ad      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001e9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fafd 	bl	800149c <HAL_GetTick>
 8001ea2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	0798      	lsls	r0, r3, #30
 8001ea8:	f57f af6d 	bpl.w	8001d86 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff faf6 	bl	800149c <HAL_GetTick>
 8001eb0:	1b80      	subs	r0, r0, r6
 8001eb2:	2802      	cmp	r0, #2
 8001eb4:	d9f6      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x130>
 8001eb6:	e79f      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb8:	69aa      	ldr	r2, [r5, #24]
 8001eba:	4c4a      	ldr	r4, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <HAL_RCC_OscConfig+0x278>)
 8001ebe:	b1da      	cbz	r2, 8001ef8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ec4:	f7ff faea 	bl	800149c <HAL_GetTick>
 8001ec8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ecc:	079b      	lsls	r3, r3, #30
 8001ece:	d50d      	bpl.n	8001eec <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001edc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001ede:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001ee0:	9b01      	ldr	r3, [sp, #4]
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	9201      	str	r2, [sp, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f9      	bne.n	8001ede <HAL_RCC_OscConfig+0x16a>
 8001eea:	e750      	b.n	8001d8e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff fad6 	bl	800149c <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d9e9      	bls.n	8001eca <HAL_RCC_OscConfig+0x156>
 8001ef6:	e77f      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001efa:	f7ff facf 	bl	800149c <HAL_GetTick>
 8001efe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f02:	079f      	lsls	r7, r3, #30
 8001f04:	f57f af43 	bpl.w	8001d8e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fac8 	bl	800149c <HAL_GetTick>
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	2802      	cmp	r0, #2
 8001f10:	d9f6      	bls.n	8001f00 <HAL_RCC_OscConfig+0x18c>
 8001f12:	e771      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f14:	4c33      	ldr	r4, [pc, #204]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001f16:	69e3      	ldr	r3, [r4, #28]
 8001f18:	00d8      	lsls	r0, r3, #3
 8001f1a:	d424      	bmi.n	8001f66 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001f1c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	69e3      	ldr	r3, [r4, #28]
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f24:	61e3      	str	r3, [r4, #28]
 8001f26:	69e3      	ldr	r3, [r4, #28]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4e30      	ldr	r6, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x280>)
 8001f32:	6833      	ldr	r3, [r6, #0]
 8001f34:	05d9      	lsls	r1, r3, #23
 8001f36:	d518      	bpl.n	8001f6a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	68eb      	ldr	r3, [r5, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d126      	bne.n	8001f8c <HAL_RCC_OscConfig+0x218>
 8001f3e:	6a23      	ldr	r3, [r4, #32]
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f46:	f7ff faa9 	bl	800149c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f4e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	6a23      	ldr	r3, [r4, #32]
 8001f52:	079b      	lsls	r3, r3, #30
 8001f54:	d53f      	bpl.n	8001fd6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001f56:	2f00      	cmp	r7, #0
 8001f58:	f43f af1d 	beq.w	8001d96 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	69e3      	ldr	r3, [r4, #28]
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f62:	61e3      	str	r3, [r4, #28]
 8001f64:	e717      	b.n	8001d96 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2700      	movs	r7, #0
 8001f68:	e7e2      	b.n	8001f30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	6833      	ldr	r3, [r6, #0]
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f72:	f7ff fa93 	bl	800149c <HAL_GetTick>
 8001f76:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	6833      	ldr	r3, [r6, #0]
 8001f7a:	05da      	lsls	r2, r3, #23
 8001f7c:	d4dc      	bmi.n	8001f38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff fa8d 	bl	800149c <HAL_GetTick>
 8001f82:	eba0 0008 	sub.w	r0, r0, r8
 8001f86:	2864      	cmp	r0, #100	; 0x64
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x204>
 8001f8a:	e735      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	b9ab      	cbnz	r3, 8001fba <HAL_RCC_OscConfig+0x246>
 8001f8e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6223      	str	r3, [r4, #32]
 8001f9a:	6a23      	ldr	r3, [r4, #32]
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fa7b 	bl	800149c <HAL_GetTick>
 8001fa6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	6a23      	ldr	r3, [r4, #32]
 8001faa:	0798      	lsls	r0, r3, #30
 8001fac:	d5d3      	bpl.n	8001f56 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff fa75 	bl	800149c <HAL_GetTick>
 8001fb2:	1b80      	subs	r0, r0, r6
 8001fb4:	4540      	cmp	r0, r8
 8001fb6:	d9f7      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x234>
 8001fb8:	e71e      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	6a23      	ldr	r3, [r4, #32]
 8001fbe:	d103      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x254>
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6223      	str	r3, [r4, #32]
 8001fc6:	e7ba      	b.n	8001f3e <HAL_RCC_OscConfig+0x1ca>
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6223      	str	r3, [r4, #32]
 8001fce:	6a23      	ldr	r3, [r4, #32]
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	e7b6      	b.n	8001f44 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fa61 	bl	800149c <HAL_GetTick>
 8001fda:	eba0 0008 	sub.w	r0, r0, r8
 8001fde:	42b0      	cmp	r0, r6
 8001fe0:	d9b6      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1dc>
 8001fe2:	e709      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	42420000 	.word	0x42420000
 8001fec:	42420480 	.word	0x42420480
 8001ff0:	20000014 	.word	0x20000014
 8001ff4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4c22      	ldr	r4, [pc, #136]	; (8002084 <HAL_RCC_OscConfig+0x310>)
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	f43f aee2 	beq.w	8001dca <HAL_RCC_OscConfig+0x56>
 8002006:	2300      	movs	r3, #0
 8002008:	4e1f      	ldr	r6, [pc, #124]	; (8002088 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800200c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200e:	d12b      	bne.n	8002068 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002010:	f7ff fa44 	bl	800149c <HAL_GetTick>
 8002014:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	0199      	lsls	r1, r3, #6
 800201a:	d41f      	bmi.n	800205c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800201c:	6a2b      	ldr	r3, [r5, #32]
 800201e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	68a9      	ldr	r1, [r5, #8]
 8002028:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800202c:	430a      	orrs	r2, r1
 800202e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002030:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002032:	6862      	ldr	r2, [r4, #4]
 8002034:	430b      	orrs	r3, r1
 8002036:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800203a:	4313      	orrs	r3, r2
 800203c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800203e:	2301      	movs	r3, #1
 8002040:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002042:	f7ff fa2b 	bl	800149c <HAL_GetTick>
 8002046:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	019a      	lsls	r2, r3, #6
 800204c:	f53f aea7 	bmi.w	8001d9e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff fa24 	bl	800149c <HAL_GetTick>
 8002054:	1b40      	subs	r0, r0, r5
 8002056:	2802      	cmp	r0, #2
 8002058:	d9f6      	bls.n	8002048 <HAL_RCC_OscConfig+0x2d4>
 800205a:	e6cd      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fa1e 	bl	800149c <HAL_GetTick>
 8002060:	1bc0      	subs	r0, r0, r7
 8002062:	2802      	cmp	r0, #2
 8002064:	d9d7      	bls.n	8002016 <HAL_RCC_OscConfig+0x2a2>
 8002066:	e6c7      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002068:	f7ff fa18 	bl	800149c <HAL_GetTick>
 800206c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	f57f ae94 	bpl.w	8001d9e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fa11 	bl	800149c <HAL_GetTick>
 800207a:	1b40      	subs	r0, r0, r5
 800207c:	2802      	cmp	r0, #2
 800207e:	d9f6      	bls.n	800206e <HAL_RCC_OscConfig+0x2fa>
 8002080:	e6ba      	b.n	8001df8 <HAL_RCC_OscConfig+0x84>
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	42420060 	.word	0x42420060

0800208c <HAL_RCC_GetSysClockFreq>:
{
 800208c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002090:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002092:	ac02      	add	r4, sp, #8
 8002094:	f103 0510 	add.w	r5, r3, #16
 8002098:	4622      	mov	r2, r4
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	3308      	adds	r3, #8
 80020a0:	c203      	stmia	r2!, {r0, r1}
 80020a2:	42ab      	cmp	r3, r5
 80020a4:	4614      	mov	r4, r2
 80020a6:	d1f7      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020a8:	2301      	movs	r3, #1
 80020aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80020ae:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80020b0:	4911      	ldr	r1, [pc, #68]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80020b6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80020b8:	f003 020c 	and.w	r2, r3, #12
 80020bc:	2a08      	cmp	r2, #8
 80020be:	d117      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80020c4:	a806      	add	r0, sp, #24
 80020c6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ce:	d50c      	bpl.n	80020ea <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d2:	480a      	ldr	r0, [pc, #40]	; (80020fc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020da:	aa06      	add	r2, sp, #24
 80020dc:	4413      	add	r3, r2
 80020de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80020e6:	b007      	add	sp, #28
 80020e8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_RCC_GetSysClockFreq+0x74>)
 80020ec:	4350      	muls	r0, r2
 80020ee:	e7fa      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80020f2:	e7f8      	b.n	80020e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80020f4:	08005868 	.word	0x08005868
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	003d0900 	.word	0x003d0900

08002104 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
{
 8002106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800210a:	6813      	ldr	r3, [r2, #0]
{
 800210c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	428b      	cmp	r3, r1
{
 8002114:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002116:	d32a      	bcc.n	800216e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	6829      	ldr	r1, [r5, #0]
 800211a:	078c      	lsls	r4, r1, #30
 800211c:	d434      	bmi.n	8002188 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	07ca      	lsls	r2, r1, #31
 8002120:	d447      	bmi.n	80021b2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002122:	4a4d      	ldr	r2, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x154>)
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	429e      	cmp	r6, r3
 800212c:	f0c0 8082 	bcc.w	8002234 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	682a      	ldr	r2, [r5, #0]
 8002132:	4c4a      	ldr	r4, [pc, #296]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 8002134:	f012 0f04 	tst.w	r2, #4
 8002138:	f040 8087 	bne.w	800224a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	0713      	lsls	r3, r2, #28
 800213e:	d506      	bpl.n	800214e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002140:	6863      	ldr	r3, [r4, #4]
 8002142:	692a      	ldr	r2, [r5, #16]
 8002144:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002148:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800214c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214e:	f7ff ff9d 	bl	800208c <HAL_RCC_GetSysClockFreq>
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	4a42      	ldr	r2, [pc, #264]	; (8002260 <HAL_RCC_ClockConfig+0x15c>)
 8002156:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	40d8      	lsrs	r0, r3
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x160>)
 8002160:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f958 	bl	8001418 <HAL_InitTick>
  return HAL_OK;
 8002168:	2000      	movs	r0, #0
}
 800216a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f023 0307 	bic.w	r3, r3, #7
 8002174:	430b      	orrs	r3, r1
 8002176:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002178:	6813      	ldr	r3, [r2, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	4299      	cmp	r1, r3
 8002180:	d0ca      	beq.n	8002118 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218e:	bf1e      	ittt	ne
 8002190:	685a      	ldrne	r2, [r3, #4]
 8002192:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002196:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219a:	bf42      	ittt	mi
 800219c:	685a      	ldrmi	r2, [r3, #4]
 800219e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80021a2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	68a8      	ldr	r0, [r5, #8]
 80021a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021ac:	4302      	orrs	r2, r0
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	e7b5      	b.n	800211e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	686a      	ldr	r2, [r5, #4]
 80021b4:	4c29      	ldr	r4, [pc, #164]	; (800225c <HAL_RCC_ClockConfig+0x158>)
 80021b6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ba:	d11c      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	d0df      	beq.n	8002182 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80021d0:	f7ff f964 	bl	800149c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80021d6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d114      	bne.n	8002206 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d09d      	beq.n	8002122 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7ff f959 	bl	800149c <HAL_GetTick>
 80021ea:	1bc0      	subs	r0, r0, r7
 80021ec:	4540      	cmp	r0, r8
 80021ee:	d9f5      	bls.n	80021dc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
 80021f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f6:	2a02      	cmp	r2, #2
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021fe:	e7df      	b.n	80021c0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	f013 0f02 	tst.w	r3, #2
 8002204:	e7dc      	b.n	80021c0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	2b02      	cmp	r3, #2
 8002208:	d10f      	bne.n	800222a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d086      	beq.n	8002122 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7ff f942 	bl	800149c <HAL_GetTick>
 8002218:	1bc0      	subs	r0, r0, r7
 800221a:	4540      	cmp	r0, r8
 800221c:	d9f5      	bls.n	800220a <HAL_RCC_ClockConfig+0x106>
 800221e:	e7e7      	b.n	80021f0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7ff f93c 	bl	800149c <HAL_GetTick>
 8002224:	1bc0      	subs	r0, r0, r7
 8002226:	4540      	cmp	r0, r8
 8002228:	d8e2      	bhi.n	80021f0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	f013 0f0c 	tst.w	r3, #12
 8002230:	d1f6      	bne.n	8002220 <HAL_RCC_ClockConfig+0x11c>
 8002232:	e776      	b.n	8002122 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002234:	6813      	ldr	r3, [r2, #0]
 8002236:	f023 0307 	bic.w	r3, r3, #7
 800223a:	4333      	orrs	r3, r6
 800223c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	429e      	cmp	r6, r3
 8002246:	d19c      	bne.n	8002182 <HAL_RCC_ClockConfig+0x7e>
 8002248:	e772      	b.n	8002130 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	68e9      	ldr	r1, [r5, #12]
 800224e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002252:	430b      	orrs	r3, r1
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	e771      	b.n	800213c <HAL_RCC_ClockConfig+0x38>
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	080065f3 	.word	0x080065f3
 8002264:	20000014 	.word	0x20000014

08002268 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_RCC_GetPCLK1Freq+0x14>)
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x18>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002276:	6810      	ldr	r0, [r2, #0]
}    
 8002278:	40d8      	lsrs	r0, r3
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	08006603 	.word	0x08006603
 8002284:	20000014 	.word	0x20000014

08002288 <setFrequency>:
 *  Created on: Jan 6, 2019
 *      Author: shuran
 */
#include <TEA5767Radio.h>

void setFrequency(float frequency) {
 8002288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned int frequencyB = 4 * (frequency * 1000000 + 225000) / 32768;
 800228a:	4916      	ldr	r1, [pc, #88]	; (80022e4 <setFrequency+0x5c>)
 800228c:	f7fe fd56 	bl	8000d3c <__aeabi_fmul>
 8002290:	4915      	ldr	r1, [pc, #84]	; (80022e8 <setFrequency+0x60>)
 8002292:	f7fe fc4b 	bl	8000b2c <__addsf3>
 8002296:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800229a:	f7fe fd4f 	bl	8000d3c <__aeabi_fmul>
 800229e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80022a2:	f7fe fd4b 	bl	8000d3c <__aeabi_fmul>
 80022a6:	f7fe ff0f 	bl	80010c8 <__aeabi_f2uiz>
	uint8_t data_arr[5];
		data_arr[0] = frequencyB >> 8;
 80022aa:	0a03      	lsrs	r3, r0, #8
 80022ac:	f88d 3008 	strb.w	r3, [sp, #8]
		data_arr[1] = frequencyB & 0XFF;
		data_arr[2] = 0xB0;
 80022b0:	23b0      	movs	r3, #176	; 0xb0
 80022b2:	f88d 300a 	strb.w	r3, [sp, #10]
		data_arr[3] = 0x10;
 80022b6:	2310      	movs	r3, #16
 80022b8:	f88d 300b 	strb.w	r3, [sp, #11]
		data_arr[4] = 0x00;
 80022bc:	2300      	movs	r3, #0
 80022be:	f88d 300c 	strb.w	r3, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
		data_arr[1] = frequencyB & 0XFF;
 80022c6:	f88d 0009 	strb.w	r0, [sp, #9]
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	aa02      	add	r2, sp, #8
 80022ce:	2305      	movs	r3, #5
 80022d0:	21c0      	movs	r1, #192	; 0xc0
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <setFrequency+0x64>)
 80022d4:	f7ff fbe2 	bl	8001a9c <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_Delay(100);
 80022d8:	2064      	movs	r0, #100	; 0x64
 80022da:	f7ff f8e5 	bl	80014a8 <HAL_Delay>
}
 80022de:	b005      	add	sp, #20
 80022e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e4:	49742400 	.word	0x49742400
 80022e8:	485bba00 	.word	0x485bba00
 80022ec:	20000ae8 	.word	0x20000ae8

080022f0 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	2210      	movs	r2, #16
{
 80022f2:	b570      	push	{r4, r5, r6, lr}
 80022f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	eb0d 0002 	add.w	r0, sp, r2
 80022fa:	2100      	movs	r1, #0
 80022fc:	f000 fb9c 	bl	8002a38 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002302:	4e22      	ldr	r6, [pc, #136]	; (800238c <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002304:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002306:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002308:	f042 0210 	orr.w	r2, r2, #16
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002314:	f002 0210 	and.w	r2, r2, #16
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800232a:	f002 0220 	and.w	r2, r2, #32
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	f042 0208 	orr.w	r2, r2, #8
 8002338:	619a      	str	r2, [r3, #24]
 800233a:	699a      	ldr	r2, [r3, #24]
 800233c:	f002 0208 	and.w	r2, r2, #8
 8002340:	9202      	str	r2, [sp, #8]
 8002342:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	f042 0204 	orr.w	r2, r2, #4
 800234a:	619a      	str	r2, [r3, #24]
 800234c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	9303      	str	r3, [sp, #12]
 8002356:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002358:	f7ff f9fa 	bl	8001750 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800235c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002360:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002364:	a904      	add	r1, sp, #16
 8002366:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	f7ff f909 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002372:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	a904      	add	r1, sp, #16
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800237a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f7ff f900 	bl	8001584 <HAL_GPIO_Init>

}
 8002384:	b008      	add	sp, #32
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40011000 	.word	0x40011000
 8002390:	40010c00 	.word	0x40010c00

08002394 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002394:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_I2C1_Init+0x38>)
 800239a:	f8df e034 	ldr.w	lr, [pc, #52]	; 80023d0 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800239e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80023a2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a6:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023aa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ac:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ae:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023b0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023b4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023b6:	f7ff faf1 	bl	800199c <HAL_I2C_Init>
 80023ba:	b118      	cbz	r0, 80023c4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80023bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80023c0:	f000 b962 	b.w	8002688 <Error_Handler>
 80023c4:	bd08      	pop	{r3, pc}
 80023c6:	bf00      	nop
 80023c8:	20000ae8 	.word	0x20000ae8
 80023cc:	40005400 	.word	0x40005400
 80023d0:	000186a0 	.word	0x000186a0

080023d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4604      	mov	r4, r0
 80023d8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	2210      	movs	r2, #16
 80023dc:	2100      	movs	r1, #0
 80023de:	a802      	add	r0, sp, #8
 80023e0:	f000 fb2a 	bl	8002a38 <memset>
  if(i2cHandle->Instance==I2C1)
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_I2C_MspInit+0x58>)
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d11c      	bne.n	8002426 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ec:	4c10      	ldr	r4, [pc, #64]	; (8002430 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	4810      	ldr	r0, [pc, #64]	; (8002434 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f4:	f043 0308 	orr.w	r3, r3, #8
 80023f8:	61a3      	str	r3, [r4, #24]
 80023fa:	69a3      	ldr	r3, [r4, #24]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f7ff f8b8 	bl	8001584 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002414:	69e3      	ldr	r3, [r4, #28]
 8002416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241a:	61e3      	str	r3, [r4, #28]
 800241c:	69e3      	ldr	r3, [r4, #28]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002426:	b006      	add	sp, #24
 8002428:	bd10      	pop	{r4, pc}
 800242a:	bf00      	nop
 800242c:	40005400 	.word	0x40005400
 8002430:	40021000 	.word	0x40021000
 8002434:	40010c00 	.word	0x40010c00

08002438 <printFreq>:

/**
 * @brief  The application entry point.
 * @retval int
 */
void printFreq() {
 8002438:	b538      	push	{r3, r4, r5, lr}
	ssd1306_SetCursor(35, 36);
	ssd1306_WriteString("     ", Font_11x18, White);
 800243a:	4c29      	ldr	r4, [pc, #164]	; (80024e0 <printFreq+0xa8>)
	ssd1306_SetCursor(35, 36);
 800243c:	2124      	movs	r1, #36	; 0x24
 800243e:	2023      	movs	r0, #35	; 0x23
 8002440:	f000 fa58 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_11x18, White);
 8002444:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002448:	2301      	movs	r3, #1
 800244a:	4826      	ldr	r0, [pc, #152]	; (80024e4 <printFreq+0xac>)
 800244c:	f000 fa3c 	bl	80028c8 <ssd1306_WriteString>

	ssd1306_SetCursor(20, 0);
 8002450:	2100      	movs	r1, #0
 8002452:	2014      	movs	r0, #20
 8002454:	f000 fa4e 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString("FM RADIO", Font_11x18, White);
 8002458:	e894 0006 	ldmia.w	r4, {r1, r2}
 800245c:	2301      	movs	r3, #1
 800245e:	4822      	ldr	r0, [pc, #136]	; (80024e8 <printFreq+0xb0>)
 8002460:	f000 fa32 	bl	80028c8 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 16);
	ssd1306_WriteString("freq:", Font_11x18, White);
	if (freq >= 100) {
 8002464:	4d21      	ldr	r5, [pc, #132]	; (80024ec <printFreq+0xb4>)
	ssd1306_SetCursor(40, 16);
 8002466:	2110      	movs	r1, #16
 8002468:	2028      	movs	r0, #40	; 0x28
 800246a:	f000 fa43 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString("freq:", Font_11x18, White);
 800246e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002472:	2301      	movs	r3, #1
 8002474:	481e      	ldr	r0, [pc, #120]	; (80024f0 <printFreq+0xb8>)
 8002476:	f000 fa27 	bl	80028c8 <ssd1306_WriteString>
	if (freq >= 100) {
 800247a:	491e      	ldr	r1, [pc, #120]	; (80024f4 <printFreq+0xbc>)
 800247c:	6828      	ldr	r0, [r5, #0]
 800247e:	f7fe fe0f 	bl	80010a0 <__aeabi_fcmpge>
		ssd1306_SetCursor(35, 36);
 8002482:	2124      	movs	r1, #36	; 0x24
	if (freq >= 100) {
 8002484:	b348      	cbz	r0, 80024da <printFreq+0xa2>
		ssd1306_SetCursor(35, 36);
 8002486:	2023      	movs	r0, #35	; 0x23
	} else {
		ssd1306_SetCursor(40, 36);
 8002488:	f000 fa34 	bl	80028f4 <ssd1306_SetCursor>
	}
	sprintf(printData, "%3.1f", freq); //enable full c++ to make it work!
 800248c:	6828      	ldr	r0, [r5, #0]
 800248e:	f7fd ffcb 	bl	8000428 <__aeabi_f2d>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4818      	ldr	r0, [pc, #96]	; (80024f8 <printFreq+0xc0>)
 8002498:	4918      	ldr	r1, [pc, #96]	; (80024fc <printFreq+0xc4>)
 800249a:	f000 fad5 	bl	8002a48 <sprintf>
	ssd1306_WriteString(printData, Font_11x18, White);
 800249e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80024a2:	2301      	movs	r3, #1
 80024a4:	4814      	ldr	r0, [pc, #80]	; (80024f8 <printFreq+0xc0>)
 80024a6:	f000 fa0f 	bl	80028c8 <ssd1306_WriteString>

	ssd1306_SetCursor(0, 36);
 80024aa:	2124      	movs	r1, #36	; 0x24
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 fa21 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_11x18, White);
 80024b2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80024b6:	2301      	movs	r3, #1
 80024b8:	4811      	ldr	r0, [pc, #68]	; (8002500 <printFreq+0xc8>)
 80024ba:	f000 fa05 	bl	80028c8 <ssd1306_WriteString>
	ssd1306_SetCursor(116, 36);
 80024be:	2124      	movs	r1, #36	; 0x24
 80024c0:	2074      	movs	r0, #116	; 0x74
 80024c2:	f000 fa17 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString(">", Font_11x18, White);
 80024c6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80024ca:	2301      	movs	r3, #1
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <printFreq+0xcc>)
 80024ce:	f000 f9fb 	bl	80028c8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
}
 80024d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ssd1306_UpdateScreen();
 80024d6:	f000 b8fb 	b.w	80026d0 <ssd1306_UpdateScreen>
		ssd1306_SetCursor(40, 36);
 80024da:	2028      	movs	r0, #40	; 0x28
 80024dc:	e7d4      	b.n	8002488 <printFreq+0x50>
 80024de:	bf00      	nop
 80024e0:	20000008 	.word	0x20000008
 80024e4:	080065d4 	.word	0x080065d4
 80024e8:	080065da 	.word	0x080065da
 80024ec:	20000010 	.word	0x20000010
 80024f0:	080065e3 	.word	0x080065e3
 80024f4:	42c80000 	.word	0x42c80000
 80024f8:	20000b3c 	.word	0x20000b3c
 80024fc:	080065e9 	.word	0x080065e9
 8002500:	080065ef 	.word	0x080065ef
 8002504:	080065f1 	.word	0x080065f1

08002508 <printFreqDown>:

void printFreqDown() {
 8002508:	b508      	push	{r3, lr}
	ssd1306_SetCursor(0, 36);
 800250a:	2124      	movs	r1, #36	; 0x24
 800250c:	2000      	movs	r0, #0
 800250e:	f000 f9f1 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString("<", Font_11x18, Black);
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <printFreqDown+0x28>)
 8002514:	2300      	movs	r3, #0
 8002516:	ca06      	ldmia	r2, {r1, r2}
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <printFreqDown+0x2c>)
 800251a:	f000 f9d5 	bl	80028c8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800251e:	f000 f8d7 	bl	80026d0 <ssd1306_UpdateScreen>
	HAL_Delay(20);
 8002522:	2014      	movs	r0, #20
 8002524:	f7fe ffc0 	bl	80014a8 <HAL_Delay>
	printFreq();
}
 8002528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printFreq();
 800252c:	f7ff bf84 	b.w	8002438 <printFreq>
 8002530:	20000008 	.word	0x20000008
 8002534:	080065ef 	.word	0x080065ef

08002538 <printFreqUp>:

void printFreqUp() {
 8002538:	b508      	push	{r3, lr}
	ssd1306_SetCursor(116, 36);
 800253a:	2124      	movs	r1, #36	; 0x24
 800253c:	2074      	movs	r0, #116	; 0x74
 800253e:	f000 f9d9 	bl	80028f4 <ssd1306_SetCursor>
	ssd1306_WriteString(">", Font_11x18, Black);
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <printFreqUp+0x28>)
 8002544:	2300      	movs	r3, #0
 8002546:	ca06      	ldmia	r2, {r1, r2}
 8002548:	4806      	ldr	r0, [pc, #24]	; (8002564 <printFreqUp+0x2c>)
 800254a:	f000 f9bd 	bl	80028c8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800254e:	f000 f8bf 	bl	80026d0 <ssd1306_UpdateScreen>
	HAL_Delay(50);
 8002552:	2032      	movs	r0, #50	; 0x32
 8002554:	f7fe ffa8 	bl	80014a8 <HAL_Delay>
	printFreq();
}
 8002558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printFreq();
 800255c:	f7ff bf6c 	b.w	8002438 <printFreq>
 8002560:	20000008 	.word	0x20000008
 8002564:	080065f1 	.word	0x080065f1

08002568 <setFreq>:

void setFreq() {
 8002568:	b510      	push	{r4, lr}
	if (freq > 106.0) {
 800256a:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <setFreq+0x2c>)
 800256c:	490a      	ldr	r1, [pc, #40]	; (8002598 <setFreq+0x30>)
 800256e:	6820      	ldr	r0, [r4, #0]
 8002570:	f7fe fda0 	bl	80010b4 <__aeabi_fcmpgt>
 8002574:	b108      	cbz	r0, 800257a <setFreq+0x12>
		freq = 95.0;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <setFreq+0x34>)
 8002578:	6023      	str	r3, [r4, #0]
	}
	if (freq < 95.0) {
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <setFreq+0x34>)
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	f7fe fd7b 	bl	8001078 <__aeabi_fcmplt>
 8002582:	b108      	cbz	r0, 8002588 <setFreq+0x20>
		freq = 106.0;
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <setFreq+0x30>)
 8002586:	6023      	str	r3, [r4, #0]
	}
	setFrequency(freq);
 8002588:	6820      	ldr	r0, [r4, #0]
}
 800258a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setFrequency(freq);
 800258e:	f7ff be7b 	b.w	8002288 <setFrequency>
 8002592:	bf00      	nop
 8002594:	20000010 	.word	0x20000010
 8002598:	42d40000 	.word	0x42d40000
 800259c:	42be0000 	.word	0x42be0000

080025a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80025a0:	b510      	push	{r4, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80025a4:	2228      	movs	r2, #40	; 0x28
 80025a6:	2100      	movs	r1, #0
 80025a8:	a806      	add	r0, sp, #24
 80025aa:	f000 fa45 	bl	8002a38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80025ae:	2100      	movs	r1, #0
 80025b0:	2214      	movs	r2, #20
 80025b2:	a801      	add	r0, sp, #4
 80025b4:	f000 fa40 	bl	8002a38 <memset>

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025bc:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025be:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c0:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025c2:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025c8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ca:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025cc:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025ce:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d0:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025d2:	f7ff fbcf 	bl	8001d74 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025d6:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025dc:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025de:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80025e0:	4621      	mov	r1, r4
 80025e2:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e4:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e6:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025e8:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ea:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80025ec:	f7ff fd8a 	bl	8002104 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 80025f0:	b010      	add	sp, #64	; 0x40
 80025f2:	bd10      	pop	{r4, pc}
 80025f4:	0000      	movs	r0, r0
	...

080025f8 <main>:
int main(void) {
 80025f8:	b580      	push	{r7, lr}
			freq -= 0.1;
 80025fa:	a71f      	add	r7, pc, #124	; (adr r7, 8002678 <main+0x80>)
 80025fc:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Init();
 8002600:	f7fe ff2e 	bl	8001460 <HAL_Init>
	SystemClock_Config();
 8002604:	f7ff ffcc 	bl	80025a0 <SystemClock_Config>
	MX_GPIO_Init();
 8002608:	f7ff fe72 	bl	80022f0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800260c:	f7ff fec2 	bl	8002394 <MX_I2C1_Init>
	ssd1306_Init();
 8002610:	f000 f884 	bl	800271c <ssd1306_Init>
	setFreq();
 8002614:	f7ff ffa8 	bl	8002568 <setFreq>
	printFreq();
 8002618:	f7ff ff0e 	bl	8002438 <printFreq>
			freq -= 0.1;
 800261c:	4c18      	ldr	r4, [pc, #96]	; (8002680 <main+0x88>)
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 800261e:	4d19      	ldr	r5, [pc, #100]	; (8002684 <main+0x8c>)
 8002620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002624:	4628      	mov	r0, r5
 8002626:	f7ff f88d 	bl	8001744 <HAL_GPIO_ReadPin>
 800262a:	b968      	cbnz	r0, 8002648 <main+0x50>
			freq -= 0.1;
 800262c:	6820      	ldr	r0, [r4, #0]
 800262e:	f7fd fefb 	bl	8000428 <__aeabi_f2d>
 8002632:	4632      	mov	r2, r6
 8002634:	463b      	mov	r3, r7
 8002636:	f7fd fd97 	bl	8000168 <__aeabi_dsub>
 800263a:	f7fe fa21 	bl	8000a80 <__aeabi_d2f>
 800263e:	6020      	str	r0, [r4, #0]
			setFreq();
 8002640:	f7ff ff92 	bl	8002568 <setFreq>
			printFreqDown();
 8002644:	f7ff ff60 	bl	8002508 <printFreqDown>
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
 8002648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800264c:	4628      	mov	r0, r5
 800264e:	f7ff f879 	bl	8001744 <HAL_GPIO_ReadPin>
 8002652:	2800      	cmp	r0, #0
 8002654:	d1e4      	bne.n	8002620 <main+0x28>
			freq += 0.1;
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f7fd fee6 	bl	8000428 <__aeabi_f2d>
 800265c:	4632      	mov	r2, r6
 800265e:	463b      	mov	r3, r7
 8002660:	f7fd fd84 	bl	800016c <__adddf3>
 8002664:	f7fe fa0c 	bl	8000a80 <__aeabi_d2f>
 8002668:	6020      	str	r0, [r4, #0]
			setFreq();
 800266a:	f7ff ff7d 	bl	8002568 <setFreq>
			printFreqUp();
 800266e:	f7ff ff63 	bl	8002538 <printFreqUp>
 8002672:	e7d4      	b.n	800261e <main+0x26>
 8002674:	f3af 8000 	nop.w
 8002678:	9999999a 	.word	0x9999999a
 800267c:	3fb99999 	.word	0x3fb99999
 8002680:	20000010 	.word	0x20000010
 8002684:	40010c00 	.word	0x40010c00

08002688 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002688:	4770      	bx	lr
	...

0800268c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800268c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800268e:	230a      	movs	r3, #10
{
 8002690:	aa06      	add	r2, sp, #24
 8002692:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2301      	movs	r3, #1
 800269a:	2178      	movs	r1, #120	; 0x78
 800269c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <ssd1306_WriteCommand+0x24>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	f7ff fad0 	bl	8001c48 <HAL_I2C_Mem_Write>
}
 80026a8:	b007      	add	sp, #28
 80026aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ae:	bf00      	nop
 80026b0:	20000ae8 	.word	0x20000ae8

080026b4 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) 
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80026b4:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80026b6:	4905      	ldr	r1, [pc, #20]	; (80026cc <ssd1306_Fill+0x18>)
 80026b8:	1c02      	adds	r2, r0, #0
 80026ba:	bf18      	it	ne
 80026bc:	2201      	movne	r2, #1
 80026be:	4252      	negs	r2, r2
 80026c0:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80026c2:	3301      	adds	r3, #1
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d1f6      	bne.n	80026b8 <ssd1306_Fill+0x4>
	}
}
 80026ca:	4770      	bx	lr
 80026cc:	200006aa 	.word	0x200006aa

080026d0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80026d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80026d2:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80026d4:	4e0f      	ldr	r6, [pc, #60]	; (8002714 <ssd1306_UpdateScreen+0x44>)
 80026d6:	4d10      	ldr	r5, [pc, #64]	; (8002718 <ssd1306_UpdateScreen+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 80026d8:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80026dc:	b2c0      	uxtb	r0, r0
 80026de:	f7ff ffd5 	bl	800268c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff ffd2 	bl	800268c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80026e8:	2010      	movs	r0, #16
 80026ea:	f7ff ffcf 	bl	800268c <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80026ee:	2364      	movs	r3, #100	; 0x64
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2240      	movs	r2, #64	; 0x40
 80026fe:	2301      	movs	r3, #1
 8002700:	2178      	movs	r1, #120	; 0x78
 8002702:	4628      	mov	r0, r5
 8002704:	3401      	adds	r4, #1
 8002706:	f7ff fa9f 	bl	8001c48 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800270a:	2c08      	cmp	r4, #8
 800270c:	d1e4      	bne.n	80026d8 <ssd1306_UpdateScreen+0x8>
	}
}
 800270e:	b004      	add	sp, #16
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	bf00      	nop
 8002714:	200006aa 	.word	0x200006aa
 8002718:	20000ae8 	.word	0x20000ae8

0800271c <ssd1306_Init>:
{	
 800271c:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f7fe fec2 	bl	80014a8 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8002724:	20ae      	movs	r0, #174	; 0xae
 8002726:	f7ff ffb1 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800272a:	2020      	movs	r0, #32
 800272c:	f7ff ffae 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002730:	2010      	movs	r0, #16
 8002732:	f7ff ffab 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002736:	20b0      	movs	r0, #176	; 0xb0
 8002738:	f7ff ffa8 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800273c:	20c8      	movs	r0, #200	; 0xc8
 800273e:	f7ff ffa5 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff ffa2 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8002748:	2010      	movs	r0, #16
 800274a:	f7ff ff9f 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800274e:	2040      	movs	r0, #64	; 0x40
 8002750:	f7ff ff9c 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8002754:	2081      	movs	r0, #129	; 0x81
 8002756:	f7ff ff99 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800275a:	20ff      	movs	r0, #255	; 0xff
 800275c:	f7ff ff96 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002760:	20a1      	movs	r0, #161	; 0xa1
 8002762:	f7ff ff93 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8002766:	20a6      	movs	r0, #166	; 0xa6
 8002768:	f7ff ff90 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800276c:	20a8      	movs	r0, #168	; 0xa8
 800276e:	f7ff ff8d 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8002772:	203f      	movs	r0, #63	; 0x3f
 8002774:	f7ff ff8a 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002778:	20a4      	movs	r0, #164	; 0xa4
 800277a:	f7ff ff87 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800277e:	20d3      	movs	r0, #211	; 0xd3
 8002780:	f7ff ff84 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff ff81 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800278a:	20d5      	movs	r0, #213	; 0xd5
 800278c:	f7ff ff7e 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002790:	20f0      	movs	r0, #240	; 0xf0
 8002792:	f7ff ff7b 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002796:	20d9      	movs	r0, #217	; 0xd9
 8002798:	f7ff ff78 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800279c:	2022      	movs	r0, #34	; 0x22
 800279e:	f7ff ff75 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80027a2:	20da      	movs	r0, #218	; 0xda
 80027a4:	f7ff ff72 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80027a8:	2012      	movs	r0, #18
 80027aa:	f7ff ff6f 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80027ae:	20db      	movs	r0, #219	; 0xdb
 80027b0:	f7ff ff6c 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80027b4:	2020      	movs	r0, #32
 80027b6:	f7ff ff69 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80027ba:	208d      	movs	r0, #141	; 0x8d
 80027bc:	f7ff ff66 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80027c0:	2014      	movs	r0, #20
 80027c2:	f7ff ff63 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80027c6:	20af      	movs	r0, #175	; 0xaf
 80027c8:	f7ff ff60 	bl	800268c <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff ff71 	bl	80026b4 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80027d2:	f7ff ff7d 	bl	80026d0 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 80027d6:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80027d8:	2200      	movs	r2, #0
 80027da:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 80027dc:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80027de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80027e0:	805a      	strh	r2, [r3, #2]
}
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	200006a4 	.word	0x200006a4

080027e8 <ssd1306_DrawPixel>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80027e8:	0603      	lsls	r3, r0, #24
{
 80027ea:	b510      	push	{r4, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80027ec:	d41a      	bmi.n	8002824 <ssd1306_DrawPixel+0x3c>
 80027ee:	293f      	cmp	r1, #63	; 0x3f
 80027f0:	d818      	bhi.n	8002824 <ssd1306_DrawPixel+0x3c>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <ssd1306_DrawPixel+0x40>)
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	b113      	cbz	r3, 80027fe <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 80027f8:	fab2 f282 	clz	r2, r2
 80027fc:	0952      	lsrs	r2, r2, #5
 80027fe:	08cc      	lsrs	r4, r1, #3
	}
	
	// Draw in the right color
	if (color == White)
 8002800:	2a01      	cmp	r2, #1
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <ssd1306_DrawPixel+0x44>)
 8002804:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002808:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == White)
 800280c:	d104      	bne.n	8002818 <ssd1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800280e:	408a      	lsls	r2, r1
 8002810:	5c19      	ldrb	r1, [r3, r0]
 8002812:	430a      	orrs	r2, r1
 8002814:	541a      	strb	r2, [r3, r0]
 8002816:	bd10      	pop	{r4, pc}
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002818:	2201      	movs	r2, #1
 800281a:	408a      	lsls	r2, r1
 800281c:	5c19      	ldrb	r1, [r3, r0]
 800281e:	ea21 0102 	bic.w	r1, r1, r2
 8002822:	5419      	strb	r1, [r3, r0]
 8002824:	bd10      	pop	{r4, pc}
 8002826:	bf00      	nop
 8002828:	200006a4 	.word	0x200006a4
 800282c:	200006aa 	.word	0x200006aa

08002830 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002834:	b087      	sub	sp, #28
 8002836:	4607      	mov	r7, r0
 8002838:	a806      	add	r0, sp, #24
 800283a:	e900 0006 	stmdb	r0, {r1, r2}
 800283e:	469b      	mov	fp, r3
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <ssd1306_WriteChar+0x94>)
 8002842:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8002846:	881c      	ldrh	r4, [r3, #0]
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	eb04 0209 	add.w	r2, r4, r9
 800284e:	2a7f      	cmp	r2, #127	; 0x7f
 8002850:	dc36      	bgt.n	80028c0 <ssd1306_WriteChar+0x90>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002852:	885b      	ldrh	r3, [r3, #2]
 8002854:	f89d a011 	ldrb.w	sl, [sp, #17]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800285e:	2a3f      	cmp	r2, #63	; 0x3f
 8002860:	dc2e      	bgt.n	80028c0 <ssd1306_WriteChar+0x90>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002862:	2600      	movs	r6, #0
 8002864:	f1a7 0220 	sub.w	r2, r7, #32
 8002868:	fb0a f302 	mul.w	r3, sl, r2
 800286c:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font.FontHeight; i++)
 800286e:	4556      	cmp	r6, sl
 8002870:	d306      	bcc.n	8002880 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	444c      	add	r4, r9
 8002876:	801c      	strh	r4, [r3, #0]
	
	// Return written char for validation
	return ch;
}
 8002878:	4638      	mov	r0, r7
 800287a:	b007      	add	sp, #28
 800287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8002880:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002882:	9b03      	ldr	r3, [sp, #12]
 8002884:	9905      	ldr	r1, [sp, #20]
 8002886:	18f2      	adds	r2, r6, r3
 8002888:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800288c:	9302      	str	r3, [sp, #8]
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002894:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8002898:	454d      	cmp	r5, r9
 800289a:	d301      	bcc.n	80028a0 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 800289c:	3601      	adds	r6, #1
 800289e:	e7e6      	b.n	800286e <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000) 
 80028a0:	9b02      	ldr	r3, [sp, #8]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028a2:	1928      	adds	r0, r5, r4
			if ((b << j) & 0x8000) 
 80028a4:	fa03 f205 	lsl.w	r2, r3, r5
 80028a8:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028aa:	bf56      	itet	pl
 80028ac:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028b0:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028b2:	0952      	lsrpl	r2, r2, #5
 80028b4:	4641      	mov	r1, r8
 80028b6:	b2c0      	uxtb	r0, r0
 80028b8:	f7ff ff96 	bl	80027e8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80028bc:	3501      	adds	r5, #1
 80028be:	e7eb      	b.n	8002898 <ssd1306_WriteChar+0x68>
		return 0;
 80028c0:	2700      	movs	r7, #0
 80028c2:	e7d9      	b.n	8002878 <ssd1306_WriteChar+0x48>
 80028c4:	200006a4 	.word	0x200006a4

080028c8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80028c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028ca:	461f      	mov	r7, r3
 80028cc:	466d      	mov	r5, sp
 80028ce:	e88d 0006 	stmia.w	sp, {r1, r2}
 80028d2:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str) 
 80028d4:	7874      	ldrb	r4, [r6, #1]
 80028d6:	b14c      	cbz	r4, 80028ec <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80028d8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80028dc:	4620      	mov	r0, r4
 80028de:	463b      	mov	r3, r7
 80028e0:	f7ff ffa6 	bl	8002830 <ssd1306_WriteChar>
 80028e4:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d0f3      	beq.n	80028d4 <ssd1306_WriteString+0xc>
		str++;
	}
	
	// Everything ok
	return *str;
}
 80028ec:	4620      	mov	r0, r4
 80028ee:	b003      	add	sp, #12
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028f4 <ssd1306_SetCursor>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	SSD1306.CurrentX = x;
 80028f4:	4b01      	ldr	r3, [pc, #4]	; (80028fc <ssd1306_SetCursor+0x8>)
 80028f6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80028f8:	8059      	strh	r1, [r3, #2]
 80028fa:	4770      	bx	lr
 80028fc:	200006a4 	.word	0x200006a4

08002900 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <HAL_MspInit+0x3c>)
{
 8002902:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	619a      	str	r2, [r3, #24]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	f002 0201 	and.w	r2, r2, #1
 8002912:	9200      	str	r2, [sp, #0]
 8002914:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800291c:	61da      	str	r2, [r3, #28]
 800291e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800292a:	6853      	ldr	r3, [r2, #4]
 800292c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002936:	b002      	add	sp, #8
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40010000 	.word	0x40010000

08002944 <NMI_Handler>:
 8002944:	4770      	bx	lr

08002946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002946:	e7fe      	b.n	8002946 <HardFault_Handler>

08002948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	e7fe      	b.n	800294a <BusFault_Handler>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler>

0800294e <SVC_Handler>:
 800294e:	4770      	bx	lr

08002950 <DebugMon_Handler>:
 8002950:	4770      	bx	lr

08002952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002952:	4770      	bx	lr

08002954 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f7fe bd96 	b.w	8001484 <HAL_IncTick>

08002958 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <SystemInit+0x40>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	4a0d      	ldr	r2, [pc, #52]	; (800299c <SystemInit+0x44>)
 8002966:	400a      	ands	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002970:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002974:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800297c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002984:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002986:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800298a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800298c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <SystemInit+0x48>)
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	f8ff0000 	.word	0xf8ff0000
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029a6:	e003      	b.n	80029b0 <LoopCopyDataInit>

080029a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029ae:	3104      	adds	r1, #4

080029b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029b0:	480a      	ldr	r0, [pc, #40]	; (80029dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029b8:	d3f6      	bcc.n	80029a8 <CopyDataInit>
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029bc:	e002      	b.n	80029c4 <LoopFillZerobss>

080029be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029c0:	f842 3b04 	str.w	r3, [r2], #4

080029c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029c8:	d3f9      	bcc.n	80029be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ca:	f7ff ffc5 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ce:	f000 f80f 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d2:	f7ff fe11 	bl	80025f8 <main>
  bx lr
 80029d6:	4770      	bx	lr
  ldr r3, =_sidata
 80029d8:	08006888 	.word	0x08006888
  ldr r0, =_sdata
 80029dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029e0:	20000688 	.word	0x20000688
  ldr r2, =_sbss
 80029e4:	20000688 	.word	0x20000688
  ldr r3, = _ebss
 80029e8:	20000b7c 	.word	0x20000b7c

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2500      	movs	r5, #0
 80029f4:	4e0c      	ldr	r6, [pc, #48]	; (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1ba4      	subs	r4, r4, r6
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a5      	cmp	r5, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f002 ff26 	bl	8005850 <_init>
 8002a04:	2500      	movs	r5, #0
 8002a06:	4e0a      	ldr	r6, [pc, #40]	; (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	; (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1ba4      	subs	r4, r4, r6
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a5      	cmp	r5, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a18:	4798      	blx	r3
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a22:	4798      	blx	r3
 8002a24:	3501      	adds	r5, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08006880 	.word	0x08006880
 8002a2c:	08006880 	.word	0x08006880
 8002a30:	08006880 	.word	0x08006880
 8002a34:	08006884 	.word	0x08006884

08002a38 <memset>:
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4402      	add	r2, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <sprintf>:
 8002a48:	b40e      	push	{r1, r2, r3}
 8002a4a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002a4e:	b500      	push	{lr}
 8002a50:	b09c      	sub	sp, #112	; 0x70
 8002a52:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002a56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a5a:	9104      	str	r1, [sp, #16]
 8002a5c:	9107      	str	r1, [sp, #28]
 8002a5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a62:	ab1d      	add	r3, sp, #116	; 0x74
 8002a64:	9002      	str	r0, [sp, #8]
 8002a66:	9006      	str	r0, [sp, #24]
 8002a68:	4808      	ldr	r0, [pc, #32]	; (8002a8c <sprintf+0x44>)
 8002a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a6e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002a72:	6800      	ldr	r0, [r0, #0]
 8002a74:	a902      	add	r1, sp, #8
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	f000 f80a 	bl	8002a90 <_svfprintf_r>
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	9b02      	ldr	r3, [sp, #8]
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	b01c      	add	sp, #112	; 0x70
 8002a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a88:	b003      	add	sp, #12
 8002a8a:	4770      	bx	lr
 8002a8c:	20000018 	.word	0x20000018

08002a90 <_svfprintf_r>:
 8002a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a94:	b0bf      	sub	sp, #252	; 0xfc
 8002a96:	4689      	mov	r9, r1
 8002a98:	4615      	mov	r5, r2
 8002a9a:	461f      	mov	r7, r3
 8002a9c:	4682      	mov	sl, r0
 8002a9e:	f001 fe27 	bl	80046f0 <_localeconv_r>
 8002aa2:	6803      	ldr	r3, [r0, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	9311      	str	r3, [sp, #68]	; 0x44
 8002aa8:	f7fd fb52 	bl	8000150 <strlen>
 8002aac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002ab0:	900a      	str	r0, [sp, #40]	; 0x28
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	d518      	bpl.n	8002ae8 <_svfprintf_r+0x58>
 8002ab6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002aba:	b9ab      	cbnz	r3, 8002ae8 <_svfprintf_r+0x58>
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	4650      	mov	r0, sl
 8002ac0:	f001 fe2c 	bl	800471c <_malloc_r>
 8002ac4:	f8c9 0000 	str.w	r0, [r9]
 8002ac8:	f8c9 0010 	str.w	r0, [r9, #16]
 8002acc:	b948      	cbnz	r0, 8002ae2 <_svfprintf_r+0x52>
 8002ace:	230c      	movs	r3, #12
 8002ad0:	f8ca 3000 	str.w	r3, [sl]
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ada:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002adc:	b03f      	add	sp, #252	; 0xfc
 8002ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae2:	2340      	movs	r3, #64	; 0x40
 8002ae4:	f8c9 3014 	str.w	r3, [r9, #20]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	ac2e      	add	r4, sp, #184	; 0xb8
 8002aec:	9421      	str	r4, [sp, #132]	; 0x84
 8002aee:	9323      	str	r3, [sp, #140]	; 0x8c
 8002af0:	9322      	str	r3, [sp, #136]	; 0x88
 8002af2:	9509      	str	r5, [sp, #36]	; 0x24
 8002af4:	9307      	str	r3, [sp, #28]
 8002af6:	930d      	str	r3, [sp, #52]	; 0x34
 8002af8:	930e      	str	r3, [sp, #56]	; 0x38
 8002afa:	9315      	str	r3, [sp, #84]	; 0x54
 8002afc:	9314      	str	r3, [sp, #80]	; 0x50
 8002afe:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b00:	9312      	str	r3, [sp, #72]	; 0x48
 8002b02:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002b06:	462b      	mov	r3, r5
 8002b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b0c:	b112      	cbz	r2, 8002b14 <_svfprintf_r+0x84>
 8002b0e:	2a25      	cmp	r2, #37	; 0x25
 8002b10:	f040 8083 	bne.w	8002c1a <_svfprintf_r+0x18a>
 8002b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b16:	1aee      	subs	r6, r5, r3
 8002b18:	d00d      	beq.n	8002b36 <_svfprintf_r+0xa6>
 8002b1a:	e884 0048 	stmia.w	r4, {r3, r6}
 8002b1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b20:	4433      	add	r3, r6
 8002b22:	9323      	str	r3, [sp, #140]	; 0x8c
 8002b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b26:	3301      	adds	r3, #1
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	9322      	str	r3, [sp, #136]	; 0x88
 8002b2c:	dc77      	bgt.n	8002c1e <_svfprintf_r+0x18e>
 8002b2e:	3408      	adds	r4, #8
 8002b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b32:	4433      	add	r3, r6
 8002b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b36:	782b      	ldrb	r3, [r5, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8725 	beq.w	8003988 <_svfprintf_r+0xef8>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	1c69      	adds	r1, r5, #1
 8002b42:	461a      	mov	r2, r3
 8002b44:	f04f 3bff 	mov.w	fp, #4294967295
 8002b48:	461d      	mov	r5, r3
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002b50:	930c      	str	r3, [sp, #48]	; 0x30
 8002b52:	1c4e      	adds	r6, r1, #1
 8002b54:	7809      	ldrb	r1, [r1, #0]
 8002b56:	9609      	str	r6, [sp, #36]	; 0x24
 8002b58:	9106      	str	r1, [sp, #24]
 8002b5a:	9906      	ldr	r1, [sp, #24]
 8002b5c:	3920      	subs	r1, #32
 8002b5e:	2958      	cmp	r1, #88	; 0x58
 8002b60:	f200 8414 	bhi.w	800338c <_svfprintf_r+0x8fc>
 8002b64:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002b68:	041200a5 	.word	0x041200a5
 8002b6c:	00aa0412 	.word	0x00aa0412
 8002b70:	04120412 	.word	0x04120412
 8002b74:	04120412 	.word	0x04120412
 8002b78:	04120412 	.word	0x04120412
 8002b7c:	006500ad 	.word	0x006500ad
 8002b80:	00b50412 	.word	0x00b50412
 8002b84:	041200b8 	.word	0x041200b8
 8002b88:	00d800d5 	.word	0x00d800d5
 8002b8c:	00d800d8 	.word	0x00d800d8
 8002b90:	00d800d8 	.word	0x00d800d8
 8002b94:	00d800d8 	.word	0x00d800d8
 8002b98:	00d800d8 	.word	0x00d800d8
 8002b9c:	04120412 	.word	0x04120412
 8002ba0:	04120412 	.word	0x04120412
 8002ba4:	04120412 	.word	0x04120412
 8002ba8:	04120412 	.word	0x04120412
 8002bac:	04120412 	.word	0x04120412
 8002bb0:	0122010c 	.word	0x0122010c
 8002bb4:	01220412 	.word	0x01220412
 8002bb8:	04120412 	.word	0x04120412
 8002bbc:	04120412 	.word	0x04120412
 8002bc0:	041200eb 	.word	0x041200eb
 8002bc4:	033c0412 	.word	0x033c0412
 8002bc8:	04120412 	.word	0x04120412
 8002bcc:	04120412 	.word	0x04120412
 8002bd0:	03a40412 	.word	0x03a40412
 8002bd4:	04120412 	.word	0x04120412
 8002bd8:	04120085 	.word	0x04120085
 8002bdc:	04120412 	.word	0x04120412
 8002be0:	04120412 	.word	0x04120412
 8002be4:	04120412 	.word	0x04120412
 8002be8:	04120412 	.word	0x04120412
 8002bec:	00fe0412 	.word	0x00fe0412
 8002bf0:	0122006b 	.word	0x0122006b
 8002bf4:	01220122 	.word	0x01220122
 8002bf8:	006b00ee 	.word	0x006b00ee
 8002bfc:	04120412 	.word	0x04120412
 8002c00:	041200f1 	.word	0x041200f1
 8002c04:	033e031e 	.word	0x033e031e
 8002c08:	00f80372 	.word	0x00f80372
 8002c0c:	03830412 	.word	0x03830412
 8002c10:	03a60412 	.word	0x03a60412
 8002c14:	04120412 	.word	0x04120412
 8002c18:	03be      	.short	0x03be
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	e773      	b.n	8002b06 <_svfprintf_r+0x76>
 8002c1e:	aa21      	add	r2, sp, #132	; 0x84
 8002c20:	4649      	mov	r1, r9
 8002c22:	4650      	mov	r0, sl
 8002c24:	f002 fa8e 	bl	8005144 <__ssprint_r>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	f040 868e 	bne.w	800394a <_svfprintf_r+0xeba>
 8002c2e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002c30:	e77e      	b.n	8002b30 <_svfprintf_r+0xa0>
 8002c32:	2301      	movs	r3, #1
 8002c34:	222b      	movs	r2, #43	; 0x2b
 8002c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c38:	e78b      	b.n	8002b52 <_svfprintf_r+0xc2>
 8002c3a:	460f      	mov	r7, r1
 8002c3c:	e7fb      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002c3e:	b10b      	cbz	r3, 8002c44 <_svfprintf_r+0x1b4>
 8002c40:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002c44:	06ae      	lsls	r6, r5, #26
 8002c46:	f140 80a1 	bpl.w	8002d8c <_svfprintf_r+0x2fc>
 8002c4a:	3707      	adds	r7, #7
 8002c4c:	f027 0707 	bic.w	r7, r7, #7
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	9308      	str	r3, [sp, #32]
 8002c56:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	f177 0300 	sbcs.w	r3, r7, #0
 8002c60:	da05      	bge.n	8002c6e <_svfprintf_r+0x1de>
 8002c62:	232d      	movs	r3, #45	; 0x2d
 8002c64:	4276      	negs	r6, r6
 8002c66:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002c6a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e2c7      	b.n	8003202 <_svfprintf_r+0x772>
 8002c72:	b10b      	cbz	r3, 8002c78 <_svfprintf_r+0x1e8>
 8002c74:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002c78:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <_svfprintf_r+0x46c>)
 8002c7a:	9315      	str	r3, [sp, #84]	; 0x54
 8002c7c:	06ab      	lsls	r3, r5, #26
 8002c7e:	f140 8336 	bpl.w	80032ee <_svfprintf_r+0x85e>
 8002c82:	3707      	adds	r7, #7
 8002c84:	f027 0707 	bic.w	r7, r7, #7
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	9308      	str	r3, [sp, #32]
 8002c8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c92:	07e8      	lsls	r0, r5, #31
 8002c94:	d50b      	bpl.n	8002cae <_svfprintf_r+0x21e>
 8002c96:	ea56 0307 	orrs.w	r3, r6, r7
 8002c9a:	d008      	beq.n	8002cae <_svfprintf_r+0x21e>
 8002c9c:	2330      	movs	r3, #48	; 0x30
 8002c9e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002ca2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ca6:	f045 0502 	orr.w	r5, r5, #2
 8002caa:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e2a4      	b.n	80031fc <_svfprintf_r+0x76c>
 8002cb2:	2a00      	cmp	r2, #0
 8002cb4:	d1bf      	bne.n	8002c36 <_svfprintf_r+0x1a6>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	2220      	movs	r2, #32
 8002cba:	e7bc      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002cbc:	f045 0501 	orr.w	r5, r5, #1
 8002cc0:	e7b9      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002cc2:	683e      	ldr	r6, [r7, #0]
 8002cc4:	1d39      	adds	r1, r7, #4
 8002cc6:	2e00      	cmp	r6, #0
 8002cc8:	960c      	str	r6, [sp, #48]	; 0x30
 8002cca:	dab6      	bge.n	8002c3a <_svfprintf_r+0x1aa>
 8002ccc:	460f      	mov	r7, r1
 8002cce:	4276      	negs	r6, r6
 8002cd0:	960c      	str	r6, [sp, #48]	; 0x30
 8002cd2:	f045 0504 	orr.w	r5, r5, #4
 8002cd6:	e7ae      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cda:	1c4e      	adds	r6, r1, #1
 8002cdc:	7809      	ldrb	r1, [r1, #0]
 8002cde:	292a      	cmp	r1, #42	; 0x2a
 8002ce0:	9106      	str	r1, [sp, #24]
 8002ce2:	d010      	beq.n	8002d06 <_svfprintf_r+0x276>
 8002ce4:	f04f 0b00 	mov.w	fp, #0
 8002ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8002cea:	9906      	ldr	r1, [sp, #24]
 8002cec:	3930      	subs	r1, #48	; 0x30
 8002cee:	2909      	cmp	r1, #9
 8002cf0:	f63f af33 	bhi.w	8002b5a <_svfprintf_r+0xca>
 8002cf4:	fb00 1b0b 	mla	fp, r0, fp, r1
 8002cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cfa:	460e      	mov	r6, r1
 8002cfc:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002d00:	9106      	str	r1, [sp, #24]
 8002d02:	9609      	str	r6, [sp, #36]	; 0x24
 8002d04:	e7f1      	b.n	8002cea <_svfprintf_r+0x25a>
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	9609      	str	r6, [sp, #36]	; 0x24
 8002d0a:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8002d0e:	3704      	adds	r7, #4
 8002d10:	e791      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d12:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002d16:	e78e      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d18:	2100      	movs	r1, #0
 8002d1a:	910c      	str	r1, [sp, #48]	; 0x30
 8002d1c:	9906      	ldr	r1, [sp, #24]
 8002d1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002d20:	3930      	subs	r1, #48	; 0x30
 8002d22:	fb00 1106 	mla	r1, r0, r6, r1
 8002d26:	910c      	str	r1, [sp, #48]	; 0x30
 8002d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d2a:	460e      	mov	r6, r1
 8002d2c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002d30:	9106      	str	r1, [sp, #24]
 8002d32:	9906      	ldr	r1, [sp, #24]
 8002d34:	9609      	str	r6, [sp, #36]	; 0x24
 8002d36:	3930      	subs	r1, #48	; 0x30
 8002d38:	2909      	cmp	r1, #9
 8002d3a:	d9ef      	bls.n	8002d1c <_svfprintf_r+0x28c>
 8002d3c:	e70d      	b.n	8002b5a <_svfprintf_r+0xca>
 8002d3e:	f045 0508 	orr.w	r5, r5, #8
 8002d42:	e778      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d44:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002d48:	e775      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d4c:	7809      	ldrb	r1, [r1, #0]
 8002d4e:	296c      	cmp	r1, #108	; 0x6c
 8002d50:	d105      	bne.n	8002d5e <_svfprintf_r+0x2ce>
 8002d52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d54:	3101      	adds	r1, #1
 8002d56:	9109      	str	r1, [sp, #36]	; 0x24
 8002d58:	f045 0520 	orr.w	r5, r5, #32
 8002d5c:	e76b      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d5e:	f045 0510 	orr.w	r5, r5, #16
 8002d62:	e768      	b.n	8002c36 <_svfprintf_r+0x1a6>
 8002d64:	2600      	movs	r6, #0
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	9308      	str	r3, [sp, #32]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8002d70:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002d74:	f04f 0b01 	mov.w	fp, #1
 8002d78:	4637      	mov	r7, r6
 8002d7a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8002d7e:	e11c      	b.n	8002fba <_svfprintf_r+0x52a>
 8002d80:	b10b      	cbz	r3, 8002d86 <_svfprintf_r+0x2f6>
 8002d82:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002d86:	f045 0510 	orr.w	r5, r5, #16
 8002d8a:	e75b      	b.n	8002c44 <_svfprintf_r+0x1b4>
 8002d8c:	f015 0f10 	tst.w	r5, #16
 8002d90:	f107 0304 	add.w	r3, r7, #4
 8002d94:	d003      	beq.n	8002d9e <_svfprintf_r+0x30e>
 8002d96:	683e      	ldr	r6, [r7, #0]
 8002d98:	9308      	str	r3, [sp, #32]
 8002d9a:	17f7      	asrs	r7, r6, #31
 8002d9c:	e75d      	b.n	8002c5a <_svfprintf_r+0x1ca>
 8002d9e:	683e      	ldr	r6, [r7, #0]
 8002da0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002da4:	9308      	str	r3, [sp, #32]
 8002da6:	bf18      	it	ne
 8002da8:	b236      	sxthne	r6, r6
 8002daa:	e7f6      	b.n	8002d9a <_svfprintf_r+0x30a>
 8002dac:	b10b      	cbz	r3, 8002db2 <_svfprintf_r+0x322>
 8002dae:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002db2:	3707      	adds	r7, #7
 8002db4:	f027 0707 	bic.w	r7, r7, #7
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	9308      	str	r3, [sp, #32]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002dca:	930e      	str	r3, [sp, #56]	; 0x38
 8002dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002dd4:	4631      	mov	r1, r6
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <_svfprintf_r+0x470>)
 8002dd8:	f7fd fe14 	bl	8000a04 <__aeabi_dcmpun>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	f040 85dc 	bne.w	800399a <_svfprintf_r+0xf0a>
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <_svfprintf_r+0x470>)
 8002de8:	4638      	mov	r0, r7
 8002dea:	4631      	mov	r1, r6
 8002dec:	f7fd fdec 	bl	80009c8 <__aeabi_dcmple>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	f040 85d2 	bne.w	800399a <_svfprintf_r+0xf0a>
 8002df6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002df8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002dfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002dfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002dfe:	f7fd fdd9 	bl	80009b4 <__aeabi_dcmplt>
 8002e02:	b110      	cbz	r0, 8002e0a <_svfprintf_r+0x37a>
 8002e04:	232d      	movs	r3, #45	; 0x2d
 8002e06:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <_svfprintf_r+0x474>)
 8002e0c:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <_svfprintf_r+0x478>)
 8002e0e:	9906      	ldr	r1, [sp, #24]
 8002e10:	f04f 0b03 	mov.w	fp, #3
 8002e14:	2947      	cmp	r1, #71	; 0x47
 8002e16:	bfcc      	ite	gt
 8002e18:	4690      	movgt	r8, r2
 8002e1a:	4698      	movle	r8, r3
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002e22:	4637      	mov	r7, r6
 8002e24:	e0c9      	b.n	8002fba <_svfprintf_r+0x52a>
 8002e26:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002e2a:	d026      	beq.n	8002e7a <_svfprintf_r+0x3ea>
 8002e2c:	9b06      	ldr	r3, [sp, #24]
 8002e2e:	f023 0320 	bic.w	r3, r3, #32
 8002e32:	2b47      	cmp	r3, #71	; 0x47
 8002e34:	d104      	bne.n	8002e40 <_svfprintf_r+0x3b0>
 8002e36:	f1bb 0f00 	cmp.w	fp, #0
 8002e3a:	bf08      	it	eq
 8002e3c:	f04f 0b01 	moveq.w	fp, #1
 8002e40:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002e44:	9317      	str	r3, [sp, #92]	; 0x5c
 8002e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e48:	1e1f      	subs	r7, r3, #0
 8002e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e4c:	bfa8      	it	ge
 8002e4e:	9710      	strge	r7, [sp, #64]	; 0x40
 8002e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e52:	bfbd      	ittte	lt
 8002e54:	463b      	movlt	r3, r7
 8002e56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e5a:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002e5c:	2300      	movge	r3, #0
 8002e5e:	bfb8      	it	lt
 8002e60:	232d      	movlt	r3, #45	; 0x2d
 8002e62:	9316      	str	r3, [sp, #88]	; 0x58
 8002e64:	9b06      	ldr	r3, [sp, #24]
 8002e66:	f023 0720 	bic.w	r7, r3, #32
 8002e6a:	2f46      	cmp	r7, #70	; 0x46
 8002e6c:	d008      	beq.n	8002e80 <_svfprintf_r+0x3f0>
 8002e6e:	2f45      	cmp	r7, #69	; 0x45
 8002e70:	d142      	bne.n	8002ef8 <_svfprintf_r+0x468>
 8002e72:	f10b 0601 	add.w	r6, fp, #1
 8002e76:	2302      	movs	r3, #2
 8002e78:	e004      	b.n	8002e84 <_svfprintf_r+0x3f4>
 8002e7a:	f04f 0b06 	mov.w	fp, #6
 8002e7e:	e7df      	b.n	8002e40 <_svfprintf_r+0x3b0>
 8002e80:	465e      	mov	r6, fp
 8002e82:	2303      	movs	r3, #3
 8002e84:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e86:	9204      	str	r2, [sp, #16]
 8002e88:	aa1c      	add	r2, sp, #112	; 0x70
 8002e8a:	9203      	str	r2, [sp, #12]
 8002e8c:	aa1b      	add	r2, sp, #108	; 0x6c
 8002e8e:	9202      	str	r2, [sp, #8]
 8002e90:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e98:	4650      	mov	r0, sl
 8002e9a:	f000 fe55 	bl	8003b48 <_dtoa_r>
 8002e9e:	2f47      	cmp	r7, #71	; 0x47
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	d102      	bne.n	8002eaa <_svfprintf_r+0x41a>
 8002ea4:	07e8      	lsls	r0, r5, #31
 8002ea6:	f140 8585 	bpl.w	80039b4 <_svfprintf_r+0xf24>
 8002eaa:	eb08 0306 	add.w	r3, r8, r6
 8002eae:	2f46      	cmp	r7, #70	; 0x46
 8002eb0:	9307      	str	r3, [sp, #28]
 8002eb2:	d111      	bne.n	8002ed8 <_svfprintf_r+0x448>
 8002eb4:	f898 3000 	ldrb.w	r3, [r8]
 8002eb8:	2b30      	cmp	r3, #48	; 0x30
 8002eba:	d109      	bne.n	8002ed0 <_svfprintf_r+0x440>
 8002ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ebe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002ec0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ec2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ec4:	f7fd fd6c 	bl	80009a0 <__aeabi_dcmpeq>
 8002ec8:	b910      	cbnz	r0, 8002ed0 <_svfprintf_r+0x440>
 8002eca:	f1c6 0601 	rsb	r6, r6, #1
 8002ece:	961b      	str	r6, [sp, #108]	; 0x6c
 8002ed0:	9a07      	ldr	r2, [sp, #28]
 8002ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002ed4:	441a      	add	r2, r3
 8002ed6:	9207      	str	r2, [sp, #28]
 8002ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002edc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002ede:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ee0:	f7fd fd5e 	bl	80009a0 <__aeabi_dcmpeq>
 8002ee4:	b990      	cbnz	r0, 8002f0c <_svfprintf_r+0x47c>
 8002ee6:	2230      	movs	r2, #48	; 0x30
 8002ee8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002eea:	9907      	ldr	r1, [sp, #28]
 8002eec:	4299      	cmp	r1, r3
 8002eee:	d90f      	bls.n	8002f10 <_svfprintf_r+0x480>
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	911f      	str	r1, [sp, #124]	; 0x7c
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e7f7      	b.n	8002ee8 <_svfprintf_r+0x458>
 8002ef8:	465e      	mov	r6, fp
 8002efa:	e7bc      	b.n	8002e76 <_svfprintf_r+0x3e6>
 8002efc:	0800661b 	.word	0x0800661b
 8002f00:	7fefffff 	.word	0x7fefffff
 8002f04:	0800660b 	.word	0x0800660b
 8002f08:	0800660f 	.word	0x0800660f
 8002f0c:	9b07      	ldr	r3, [sp, #28]
 8002f0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8002f10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f12:	2f47      	cmp	r7, #71	; 0x47
 8002f14:	eba3 0308 	sub.w	r3, r3, r8
 8002f18:	9307      	str	r3, [sp, #28]
 8002f1a:	f040 8100 	bne.w	800311e <_svfprintf_r+0x68e>
 8002f1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f20:	1cd9      	adds	r1, r3, #3
 8002f22:	db02      	blt.n	8002f2a <_svfprintf_r+0x49a>
 8002f24:	459b      	cmp	fp, r3
 8002f26:	f280 8126 	bge.w	8003176 <_svfprintf_r+0x6e6>
 8002f2a:	9b06      	ldr	r3, [sp, #24]
 8002f2c:	3b02      	subs	r3, #2
 8002f2e:	9306      	str	r3, [sp, #24]
 8002f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002f32:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8002f36:	1e53      	subs	r3, r2, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfa8      	it	ge
 8002f3c:	222b      	movge	r2, #43	; 0x2b
 8002f3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f40:	bfbc      	itt	lt
 8002f42:	f1c2 0301 	rsblt	r3, r2, #1
 8002f46:	222d      	movlt	r2, #45	; 0x2d
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 8002f4e:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8002f52:	f340 8100 	ble.w	8003156 <_svfprintf_r+0x6c6>
 8002f56:	260a      	movs	r6, #10
 8002f58:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8002f5c:	fb93 f0f6 	sdiv	r0, r3, r6
 8002f60:	fb06 3310 	mls	r3, r6, r0, r3
 8002f64:	2809      	cmp	r0, #9
 8002f66:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002f6a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002f6e:	f102 31ff 	add.w	r1, r2, #4294967295
 8002f72:	4603      	mov	r3, r0
 8002f74:	f300 80e8 	bgt.w	8003148 <_svfprintf_r+0x6b8>
 8002f78:	3330      	adds	r3, #48	; 0x30
 8002f7a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002f7e:	3a02      	subs	r2, #2
 8002f80:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8002f84:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8002f88:	4282      	cmp	r2, r0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f0c0 80de 	bcc.w	800314c <_svfprintf_r+0x6bc>
 8002f90:	9a07      	ldr	r2, [sp, #28]
 8002f92:	ab1d      	add	r3, sp, #116	; 0x74
 8002f94:	1acb      	subs	r3, r1, r3
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	9314      	str	r3, [sp, #80]	; 0x50
 8002f9a:	eb03 0b02 	add.w	fp, r3, r2
 8002f9e:	dc02      	bgt.n	8002fa6 <_svfprintf_r+0x516>
 8002fa0:	f015 0701 	ands.w	r7, r5, #1
 8002fa4:	d002      	beq.n	8002fac <_svfprintf_r+0x51c>
 8002fa6:	2700      	movs	r7, #0
 8002fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002faa:	449b      	add	fp, r3
 8002fac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002fae:	b113      	cbz	r3, 8002fb6 <_svfprintf_r+0x526>
 8002fb0:	232d      	movs	r3, #45	; 0x2d
 8002fb2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002fba:	455e      	cmp	r6, fp
 8002fbc:	4633      	mov	r3, r6
 8002fbe:	bfb8      	it	lt
 8002fc0:	465b      	movlt	r3, fp
 8002fc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fc4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002fc8:	b113      	cbz	r3, 8002fd0 <_svfprintf_r+0x540>
 8002fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fcc:	3301      	adds	r3, #1
 8002fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fd0:	f015 0302 	ands.w	r3, r5, #2
 8002fd4:	9316      	str	r3, [sp, #88]	; 0x58
 8002fd6:	bf1e      	ittt	ne
 8002fd8:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8002fda:	3302      	addne	r3, #2
 8002fdc:	930f      	strne	r3, [sp, #60]	; 0x3c
 8002fde:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002fe2:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fe4:	d118      	bne.n	8003018 <_svfprintf_r+0x588>
 8002fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	9310      	str	r3, [sp, #64]	; 0x40
 8002ff0:	dd12      	ble.n	8003018 <_svfprintf_r+0x588>
 8002ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	4bab      	ldr	r3, [pc, #684]	; (80032a4 <_svfprintf_r+0x814>)
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	f300 81d9 	bgt.w	80033b0 <_svfprintf_r+0x920>
 8002ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003000:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003006:	4413      	add	r3, r2
 8003008:	9323      	str	r3, [sp, #140]	; 0x8c
 800300a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800300c:	3301      	adds	r3, #1
 800300e:	2b07      	cmp	r3, #7
 8003010:	9322      	str	r3, [sp, #136]	; 0x88
 8003012:	f300 81e6 	bgt.w	80033e2 <_svfprintf_r+0x952>
 8003016:	3408      	adds	r4, #8
 8003018:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800301c:	b173      	cbz	r3, 800303c <_svfprintf_r+0x5ac>
 800301e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	6063      	str	r3, [r4, #4]
 8003028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800302a:	3301      	adds	r3, #1
 800302c:	9323      	str	r3, [sp, #140]	; 0x8c
 800302e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003030:	3301      	adds	r3, #1
 8003032:	2b07      	cmp	r3, #7
 8003034:	9322      	str	r3, [sp, #136]	; 0x88
 8003036:	f300 81de 	bgt.w	80033f6 <_svfprintf_r+0x966>
 800303a:	3408      	adds	r4, #8
 800303c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800303e:	b16b      	cbz	r3, 800305c <_svfprintf_r+0x5cc>
 8003040:	ab1a      	add	r3, sp, #104	; 0x68
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	2302      	movs	r3, #2
 8003046:	6063      	str	r3, [r4, #4]
 8003048:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800304a:	3302      	adds	r3, #2
 800304c:	9323      	str	r3, [sp, #140]	; 0x8c
 800304e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003050:	3301      	adds	r3, #1
 8003052:	2b07      	cmp	r3, #7
 8003054:	9322      	str	r3, [sp, #136]	; 0x88
 8003056:	f300 81d8 	bgt.w	800340a <_svfprintf_r+0x97a>
 800305a:	3408      	adds	r4, #8
 800305c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d118      	bne.n	8003094 <_svfprintf_r+0x604>
 8003062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	9310      	str	r3, [sp, #64]	; 0x40
 800306c:	dd12      	ble.n	8003094 <_svfprintf_r+0x604>
 800306e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003070:	2b10      	cmp	r3, #16
 8003072:	4b8d      	ldr	r3, [pc, #564]	; (80032a8 <_svfprintf_r+0x818>)
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	f300 81d2 	bgt.w	800341e <_svfprintf_r+0x98e>
 800307a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800307c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003082:	4413      	add	r3, r2
 8003084:	9323      	str	r3, [sp, #140]	; 0x8c
 8003086:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003088:	3301      	adds	r3, #1
 800308a:	2b07      	cmp	r3, #7
 800308c:	9322      	str	r3, [sp, #136]	; 0x88
 800308e:	f300 81df 	bgt.w	8003450 <_svfprintf_r+0x9c0>
 8003092:	3408      	adds	r4, #8
 8003094:	eba6 060b 	sub.w	r6, r6, fp
 8003098:	2e00      	cmp	r6, #0
 800309a:	dd0f      	ble.n	80030bc <_svfprintf_r+0x62c>
 800309c:	4b82      	ldr	r3, [pc, #520]	; (80032a8 <_svfprintf_r+0x818>)
 800309e:	2e10      	cmp	r6, #16
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	f300 81df 	bgt.w	8003464 <_svfprintf_r+0x9d4>
 80030a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030a8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80030aa:	3301      	adds	r3, #1
 80030ac:	6066      	str	r6, [r4, #4]
 80030ae:	2b07      	cmp	r3, #7
 80030b0:	4406      	add	r6, r0
 80030b2:	9623      	str	r6, [sp, #140]	; 0x8c
 80030b4:	9322      	str	r3, [sp, #136]	; 0x88
 80030b6:	f300 81ec 	bgt.w	8003492 <_svfprintf_r+0xa02>
 80030ba:	3408      	adds	r4, #8
 80030bc:	05eb      	lsls	r3, r5, #23
 80030be:	f100 81f2 	bmi.w	80034a6 <_svfprintf_r+0xa16>
 80030c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80030c4:	e884 0900 	stmia.w	r4, {r8, fp}
 80030c8:	445b      	add	r3, fp
 80030ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80030cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030ce:	3301      	adds	r3, #1
 80030d0:	2b07      	cmp	r3, #7
 80030d2:	9322      	str	r3, [sp, #136]	; 0x88
 80030d4:	f340 8419 	ble.w	800390a <_svfprintf_r+0xe7a>
 80030d8:	aa21      	add	r2, sp, #132	; 0x84
 80030da:	4649      	mov	r1, r9
 80030dc:	4650      	mov	r0, sl
 80030de:	f002 f831 	bl	8005144 <__ssprint_r>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	f040 8431 	bne.w	800394a <_svfprintf_r+0xeba>
 80030e8:	ac2e      	add	r4, sp, #184	; 0xb8
 80030ea:	076b      	lsls	r3, r5, #29
 80030ec:	f100 8410 	bmi.w	8003910 <_svfprintf_r+0xe80>
 80030f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030f6:	428a      	cmp	r2, r1
 80030f8:	bfac      	ite	ge
 80030fa:	189b      	addge	r3, r3, r2
 80030fc:	185b      	addlt	r3, r3, r1
 80030fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003100:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003102:	b13b      	cbz	r3, 8003114 <_svfprintf_r+0x684>
 8003104:	aa21      	add	r2, sp, #132	; 0x84
 8003106:	4649      	mov	r1, r9
 8003108:	4650      	mov	r0, sl
 800310a:	f002 f81b 	bl	8005144 <__ssprint_r>
 800310e:	2800      	cmp	r0, #0
 8003110:	f040 841b 	bne.w	800394a <_svfprintf_r+0xeba>
 8003114:	2300      	movs	r3, #0
 8003116:	9f08      	ldr	r7, [sp, #32]
 8003118:	9322      	str	r3, [sp, #136]	; 0x88
 800311a:	ac2e      	add	r4, sp, #184	; 0xb8
 800311c:	e4f2      	b.n	8002b04 <_svfprintf_r+0x74>
 800311e:	9b06      	ldr	r3, [sp, #24]
 8003120:	2b65      	cmp	r3, #101	; 0x65
 8003122:	f77f af05 	ble.w	8002f30 <_svfprintf_r+0x4a0>
 8003126:	9b06      	ldr	r3, [sp, #24]
 8003128:	2b66      	cmp	r3, #102	; 0x66
 800312a:	d124      	bne.n	8003176 <_svfprintf_r+0x6e6>
 800312c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800312e:	2b00      	cmp	r3, #0
 8003130:	dd19      	ble.n	8003166 <_svfprintf_r+0x6d6>
 8003132:	f1bb 0f00 	cmp.w	fp, #0
 8003136:	d101      	bne.n	800313c <_svfprintf_r+0x6ac>
 8003138:	07ea      	lsls	r2, r5, #31
 800313a:	d502      	bpl.n	8003142 <_svfprintf_r+0x6b2>
 800313c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800313e:	4413      	add	r3, r2
 8003140:	445b      	add	r3, fp
 8003142:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003144:	469b      	mov	fp, r3
 8003146:	e731      	b.n	8002fac <_svfprintf_r+0x51c>
 8003148:	460a      	mov	r2, r1
 800314a:	e707      	b.n	8002f5c <_svfprintf_r+0x4cc>
 800314c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003150:	f803 1b01 	strb.w	r1, [r3], #1
 8003154:	e718      	b.n	8002f88 <_svfprintf_r+0x4f8>
 8003156:	2230      	movs	r2, #48	; 0x30
 8003158:	4413      	add	r3, r2
 800315a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800315e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8003162:	a91e      	add	r1, sp, #120	; 0x78
 8003164:	e714      	b.n	8002f90 <_svfprintf_r+0x500>
 8003166:	f1bb 0f00 	cmp.w	fp, #0
 800316a:	d101      	bne.n	8003170 <_svfprintf_r+0x6e0>
 800316c:	07eb      	lsls	r3, r5, #31
 800316e:	d515      	bpl.n	800319c <_svfprintf_r+0x70c>
 8003170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003172:	3301      	adds	r3, #1
 8003174:	e7e4      	b.n	8003140 <_svfprintf_r+0x6b0>
 8003176:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003178:	9b07      	ldr	r3, [sp, #28]
 800317a:	429a      	cmp	r2, r3
 800317c:	db06      	blt.n	800318c <_svfprintf_r+0x6fc>
 800317e:	07ef      	lsls	r7, r5, #31
 8003180:	d50e      	bpl.n	80031a0 <_svfprintf_r+0x710>
 8003182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003184:	4413      	add	r3, r2
 8003186:	2267      	movs	r2, #103	; 0x67
 8003188:	9206      	str	r2, [sp, #24]
 800318a:	e7da      	b.n	8003142 <_svfprintf_r+0x6b2>
 800318c:	9b07      	ldr	r3, [sp, #28]
 800318e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003190:	2a00      	cmp	r2, #0
 8003192:	440b      	add	r3, r1
 8003194:	dcf7      	bgt.n	8003186 <_svfprintf_r+0x6f6>
 8003196:	f1c2 0201 	rsb	r2, r2, #1
 800319a:	e7f3      	b.n	8003184 <_svfprintf_r+0x6f4>
 800319c:	2301      	movs	r3, #1
 800319e:	e7d0      	b.n	8003142 <_svfprintf_r+0x6b2>
 80031a0:	4613      	mov	r3, r2
 80031a2:	e7f0      	b.n	8003186 <_svfprintf_r+0x6f6>
 80031a4:	b10b      	cbz	r3, 80031aa <_svfprintf_r+0x71a>
 80031a6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80031aa:	f015 0f20 	tst.w	r5, #32
 80031ae:	f107 0304 	add.w	r3, r7, #4
 80031b2:	d008      	beq.n	80031c6 <_svfprintf_r+0x736>
 80031b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	17ce      	asrs	r6, r1, #31
 80031ba:	4608      	mov	r0, r1
 80031bc:	4631      	mov	r1, r6
 80031be:	e9c2 0100 	strd	r0, r1, [r2]
 80031c2:	461f      	mov	r7, r3
 80031c4:	e49e      	b.n	8002b04 <_svfprintf_r+0x74>
 80031c6:	06ee      	lsls	r6, r5, #27
 80031c8:	d503      	bpl.n	80031d2 <_svfprintf_r+0x742>
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ce:	6011      	str	r1, [r2, #0]
 80031d0:	e7f7      	b.n	80031c2 <_svfprintf_r+0x732>
 80031d2:	0668      	lsls	r0, r5, #25
 80031d4:	d5f9      	bpl.n	80031ca <_svfprintf_r+0x73a>
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80031dc:	8011      	strh	r1, [r2, #0]
 80031de:	e7f0      	b.n	80031c2 <_svfprintf_r+0x732>
 80031e0:	f045 0510 	orr.w	r5, r5, #16
 80031e4:	f015 0320 	ands.w	r3, r5, #32
 80031e8:	d022      	beq.n	8003230 <_svfprintf_r+0x7a0>
 80031ea:	3707      	adds	r7, #7
 80031ec:	f027 0707 	bic.w	r7, r7, #7
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	9308      	str	r3, [sp, #32]
 80031f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80031fa:	2300      	movs	r3, #0
 80031fc:	2200      	movs	r2, #0
 80031fe:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003202:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003206:	f000 83db 	beq.w	80039c0 <_svfprintf_r+0xf30>
 800320a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800320e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003210:	ea56 0207 	orrs.w	r2, r6, r7
 8003214:	f040 83d9 	bne.w	80039ca <_svfprintf_r+0xf3a>
 8003218:	f1bb 0f00 	cmp.w	fp, #0
 800321c:	f000 80aa 	beq.w	8003374 <_svfprintf_r+0x8e4>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d076      	beq.n	8003312 <_svfprintf_r+0x882>
 8003224:	2b02      	cmp	r3, #2
 8003226:	f000 8091 	beq.w	800334c <_svfprintf_r+0x8bc>
 800322a:	2600      	movs	r6, #0
 800322c:	2700      	movs	r7, #0
 800322e:	e3d2      	b.n	80039d6 <_svfprintf_r+0xf46>
 8003230:	1d3a      	adds	r2, r7, #4
 8003232:	f015 0110 	ands.w	r1, r5, #16
 8003236:	9208      	str	r2, [sp, #32]
 8003238:	d002      	beq.n	8003240 <_svfprintf_r+0x7b0>
 800323a:	683e      	ldr	r6, [r7, #0]
 800323c:	2700      	movs	r7, #0
 800323e:	e7dd      	b.n	80031fc <_svfprintf_r+0x76c>
 8003240:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003244:	d0f9      	beq.n	800323a <_svfprintf_r+0x7aa>
 8003246:	883e      	ldrh	r6, [r7, #0]
 8003248:	2700      	movs	r7, #0
 800324a:	e7d6      	b.n	80031fa <_svfprintf_r+0x76a>
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	9308      	str	r3, [sp, #32]
 8003250:	2330      	movs	r3, #48	; 0x30
 8003252:	2278      	movs	r2, #120	; 0x78
 8003254:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <_svfprintf_r+0x81c>)
 800325a:	683e      	ldr	r6, [r7, #0]
 800325c:	9315      	str	r3, [sp, #84]	; 0x54
 800325e:	2700      	movs	r7, #0
 8003260:	f045 0502 	orr.w	r5, r5, #2
 8003264:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8003268:	2302      	movs	r3, #2
 800326a:	9206      	str	r2, [sp, #24]
 800326c:	e7c6      	b.n	80031fc <_svfprintf_r+0x76c>
 800326e:	2600      	movs	r6, #0
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003276:	9308      	str	r3, [sp, #32]
 8003278:	f8d7 8000 	ldr.w	r8, [r7]
 800327c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8003280:	d00a      	beq.n	8003298 <_svfprintf_r+0x808>
 8003282:	465a      	mov	r2, fp
 8003284:	4631      	mov	r1, r6
 8003286:	4640      	mov	r0, r8
 8003288:	f001 fc54 	bl	8004b34 <memchr>
 800328c:	2800      	cmp	r0, #0
 800328e:	f000 808d 	beq.w	80033ac <_svfprintf_r+0x91c>
 8003292:	eba0 0b08 	sub.w	fp, r0, r8
 8003296:	e5c4      	b.n	8002e22 <_svfprintf_r+0x392>
 8003298:	4640      	mov	r0, r8
 800329a:	f7fc ff59 	bl	8000150 <strlen>
 800329e:	4683      	mov	fp, r0
 80032a0:	e5bf      	b.n	8002e22 <_svfprintf_r+0x392>
 80032a2:	bf00      	nop
 80032a4:	0800663f 	.word	0x0800663f
 80032a8:	0800664f 	.word	0x0800664f
 80032ac:	0800662c 	.word	0x0800662c
 80032b0:	f045 0510 	orr.w	r5, r5, #16
 80032b4:	06a9      	lsls	r1, r5, #26
 80032b6:	d509      	bpl.n	80032cc <_svfprintf_r+0x83c>
 80032b8:	3707      	adds	r7, #7
 80032ba:	f027 0707 	bic.w	r7, r7, #7
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	9308      	str	r3, [sp, #32]
 80032c4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80032c8:	2301      	movs	r3, #1
 80032ca:	e797      	b.n	80031fc <_svfprintf_r+0x76c>
 80032cc:	1d3b      	adds	r3, r7, #4
 80032ce:	f015 0f10 	tst.w	r5, #16
 80032d2:	9308      	str	r3, [sp, #32]
 80032d4:	d001      	beq.n	80032da <_svfprintf_r+0x84a>
 80032d6:	683e      	ldr	r6, [r7, #0]
 80032d8:	e002      	b.n	80032e0 <_svfprintf_r+0x850>
 80032da:	066a      	lsls	r2, r5, #25
 80032dc:	d5fb      	bpl.n	80032d6 <_svfprintf_r+0x846>
 80032de:	883e      	ldrh	r6, [r7, #0]
 80032e0:	2700      	movs	r7, #0
 80032e2:	e7f1      	b.n	80032c8 <_svfprintf_r+0x838>
 80032e4:	b10b      	cbz	r3, 80032ea <_svfprintf_r+0x85a>
 80032e6:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80032ea:	4ba3      	ldr	r3, [pc, #652]	; (8003578 <_svfprintf_r+0xae8>)
 80032ec:	e4c5      	b.n	8002c7a <_svfprintf_r+0x1ea>
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	f015 0f10 	tst.w	r5, #16
 80032f4:	9308      	str	r3, [sp, #32]
 80032f6:	d001      	beq.n	80032fc <_svfprintf_r+0x86c>
 80032f8:	683e      	ldr	r6, [r7, #0]
 80032fa:	e002      	b.n	8003302 <_svfprintf_r+0x872>
 80032fc:	066e      	lsls	r6, r5, #25
 80032fe:	d5fb      	bpl.n	80032f8 <_svfprintf_r+0x868>
 8003300:	883e      	ldrh	r6, [r7, #0]
 8003302:	2700      	movs	r7, #0
 8003304:	e4c5      	b.n	8002c92 <_svfprintf_r+0x202>
 8003306:	4643      	mov	r3, r8
 8003308:	e366      	b.n	80039d8 <_svfprintf_r+0xf48>
 800330a:	2f00      	cmp	r7, #0
 800330c:	bf08      	it	eq
 800330e:	2e0a      	cmpeq	r6, #10
 8003310:	d205      	bcs.n	800331e <_svfprintf_r+0x88e>
 8003312:	3630      	adds	r6, #48	; 0x30
 8003314:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8003318:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800331c:	e377      	b.n	8003a0e <_svfprintf_r+0xf7e>
 800331e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003322:	4630      	mov	r0, r6
 8003324:	4639      	mov	r1, r7
 8003326:	220a      	movs	r2, #10
 8003328:	2300      	movs	r3, #0
 800332a:	f7fd feed 	bl	8001108 <__aeabi_uldivmod>
 800332e:	3230      	adds	r2, #48	; 0x30
 8003330:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003334:	2300      	movs	r3, #0
 8003336:	4630      	mov	r0, r6
 8003338:	4639      	mov	r1, r7
 800333a:	220a      	movs	r2, #10
 800333c:	f7fd fee4 	bl	8001108 <__aeabi_uldivmod>
 8003340:	4606      	mov	r6, r0
 8003342:	460f      	mov	r7, r1
 8003344:	ea56 0307 	orrs.w	r3, r6, r7
 8003348:	d1eb      	bne.n	8003322 <_svfprintf_r+0x892>
 800334a:	e360      	b.n	8003a0e <_svfprintf_r+0xf7e>
 800334c:	2600      	movs	r6, #0
 800334e:	2700      	movs	r7, #0
 8003350:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8003354:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003356:	f006 030f 	and.w	r3, r6, #15
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	093a      	lsrs	r2, r7, #4
 800335e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003362:	0933      	lsrs	r3, r6, #4
 8003364:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003368:	461e      	mov	r6, r3
 800336a:	4617      	mov	r7, r2
 800336c:	ea56 0307 	orrs.w	r3, r6, r7
 8003370:	d1f0      	bne.n	8003354 <_svfprintf_r+0x8c4>
 8003372:	e34c      	b.n	8003a0e <_svfprintf_r+0xf7e>
 8003374:	b93b      	cbnz	r3, 8003386 <_svfprintf_r+0x8f6>
 8003376:	07ea      	lsls	r2, r5, #31
 8003378:	d505      	bpl.n	8003386 <_svfprintf_r+0x8f6>
 800337a:	2330      	movs	r3, #48	; 0x30
 800337c:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8003380:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003384:	e343      	b.n	8003a0e <_svfprintf_r+0xf7e>
 8003386:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800338a:	e340      	b.n	8003a0e <_svfprintf_r+0xf7e>
 800338c:	b10b      	cbz	r3, 8003392 <_svfprintf_r+0x902>
 800338e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003392:	9b06      	ldr	r3, [sp, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 82f7 	beq.w	8003988 <_svfprintf_r+0xef8>
 800339a:	2600      	movs	r6, #0
 800339c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80033a0:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80033a4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80033a8:	9708      	str	r7, [sp, #32]
 80033aa:	e4e3      	b.n	8002d74 <_svfprintf_r+0x2e4>
 80033ac:	4606      	mov	r6, r0
 80033ae:	e538      	b.n	8002e22 <_svfprintf_r+0x392>
 80033b0:	2310      	movs	r3, #16
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80033b6:	3310      	adds	r3, #16
 80033b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80033ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033bc:	3301      	adds	r3, #1
 80033be:	2b07      	cmp	r3, #7
 80033c0:	9322      	str	r3, [sp, #136]	; 0x88
 80033c2:	dc04      	bgt.n	80033ce <_svfprintf_r+0x93e>
 80033c4:	3408      	adds	r4, #8
 80033c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033c8:	3b10      	subs	r3, #16
 80033ca:	9310      	str	r3, [sp, #64]	; 0x40
 80033cc:	e611      	b.n	8002ff2 <_svfprintf_r+0x562>
 80033ce:	aa21      	add	r2, sp, #132	; 0x84
 80033d0:	4649      	mov	r1, r9
 80033d2:	4650      	mov	r0, sl
 80033d4:	f001 feb6 	bl	8005144 <__ssprint_r>
 80033d8:	2800      	cmp	r0, #0
 80033da:	f040 82b6 	bne.w	800394a <_svfprintf_r+0xeba>
 80033de:	ac2e      	add	r4, sp, #184	; 0xb8
 80033e0:	e7f1      	b.n	80033c6 <_svfprintf_r+0x936>
 80033e2:	aa21      	add	r2, sp, #132	; 0x84
 80033e4:	4649      	mov	r1, r9
 80033e6:	4650      	mov	r0, sl
 80033e8:	f001 feac 	bl	8005144 <__ssprint_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	f040 82ac 	bne.w	800394a <_svfprintf_r+0xeba>
 80033f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80033f4:	e610      	b.n	8003018 <_svfprintf_r+0x588>
 80033f6:	aa21      	add	r2, sp, #132	; 0x84
 80033f8:	4649      	mov	r1, r9
 80033fa:	4650      	mov	r0, sl
 80033fc:	f001 fea2 	bl	8005144 <__ssprint_r>
 8003400:	2800      	cmp	r0, #0
 8003402:	f040 82a2 	bne.w	800394a <_svfprintf_r+0xeba>
 8003406:	ac2e      	add	r4, sp, #184	; 0xb8
 8003408:	e618      	b.n	800303c <_svfprintf_r+0x5ac>
 800340a:	aa21      	add	r2, sp, #132	; 0x84
 800340c:	4649      	mov	r1, r9
 800340e:	4650      	mov	r0, sl
 8003410:	f001 fe98 	bl	8005144 <__ssprint_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	f040 8298 	bne.w	800394a <_svfprintf_r+0xeba>
 800341a:	ac2e      	add	r4, sp, #184	; 0xb8
 800341c:	e61e      	b.n	800305c <_svfprintf_r+0x5cc>
 800341e:	2310      	movs	r3, #16
 8003420:	6063      	str	r3, [r4, #4]
 8003422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003424:	3310      	adds	r3, #16
 8003426:	9323      	str	r3, [sp, #140]	; 0x8c
 8003428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800342a:	3301      	adds	r3, #1
 800342c:	2b07      	cmp	r3, #7
 800342e:	9322      	str	r3, [sp, #136]	; 0x88
 8003430:	dc04      	bgt.n	800343c <_svfprintf_r+0x9ac>
 8003432:	3408      	adds	r4, #8
 8003434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003436:	3b10      	subs	r3, #16
 8003438:	9310      	str	r3, [sp, #64]	; 0x40
 800343a:	e618      	b.n	800306e <_svfprintf_r+0x5de>
 800343c:	aa21      	add	r2, sp, #132	; 0x84
 800343e:	4649      	mov	r1, r9
 8003440:	4650      	mov	r0, sl
 8003442:	f001 fe7f 	bl	8005144 <__ssprint_r>
 8003446:	2800      	cmp	r0, #0
 8003448:	f040 827f 	bne.w	800394a <_svfprintf_r+0xeba>
 800344c:	ac2e      	add	r4, sp, #184	; 0xb8
 800344e:	e7f1      	b.n	8003434 <_svfprintf_r+0x9a4>
 8003450:	aa21      	add	r2, sp, #132	; 0x84
 8003452:	4649      	mov	r1, r9
 8003454:	4650      	mov	r0, sl
 8003456:	f001 fe75 	bl	8005144 <__ssprint_r>
 800345a:	2800      	cmp	r0, #0
 800345c:	f040 8275 	bne.w	800394a <_svfprintf_r+0xeba>
 8003460:	ac2e      	add	r4, sp, #184	; 0xb8
 8003462:	e617      	b.n	8003094 <_svfprintf_r+0x604>
 8003464:	2310      	movs	r3, #16
 8003466:	6063      	str	r3, [r4, #4]
 8003468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800346a:	3310      	adds	r3, #16
 800346c:	9323      	str	r3, [sp, #140]	; 0x8c
 800346e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003470:	3301      	adds	r3, #1
 8003472:	2b07      	cmp	r3, #7
 8003474:	9322      	str	r3, [sp, #136]	; 0x88
 8003476:	dc02      	bgt.n	800347e <_svfprintf_r+0x9ee>
 8003478:	3408      	adds	r4, #8
 800347a:	3e10      	subs	r6, #16
 800347c:	e60e      	b.n	800309c <_svfprintf_r+0x60c>
 800347e:	aa21      	add	r2, sp, #132	; 0x84
 8003480:	4649      	mov	r1, r9
 8003482:	4650      	mov	r0, sl
 8003484:	f001 fe5e 	bl	8005144 <__ssprint_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	f040 825e 	bne.w	800394a <_svfprintf_r+0xeba>
 800348e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003490:	e7f3      	b.n	800347a <_svfprintf_r+0x9ea>
 8003492:	aa21      	add	r2, sp, #132	; 0x84
 8003494:	4649      	mov	r1, r9
 8003496:	4650      	mov	r0, sl
 8003498:	f001 fe54 	bl	8005144 <__ssprint_r>
 800349c:	2800      	cmp	r0, #0
 800349e:	f040 8254 	bne.w	800394a <_svfprintf_r+0xeba>
 80034a2:	ac2e      	add	r4, sp, #184	; 0xb8
 80034a4:	e60a      	b.n	80030bc <_svfprintf_r+0x62c>
 80034a6:	9b06      	ldr	r3, [sp, #24]
 80034a8:	2b65      	cmp	r3, #101	; 0x65
 80034aa:	f340 81a9 	ble.w	8003800 <_svfprintf_r+0xd70>
 80034ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034b6:	f7fd fa73 	bl	80009a0 <__aeabi_dcmpeq>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d062      	beq.n	8003584 <_svfprintf_r+0xaf4>
 80034be:	4b2f      	ldr	r3, [pc, #188]	; (800357c <_svfprintf_r+0xaec>)
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034c8:	3301      	adds	r3, #1
 80034ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80034cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034ce:	3301      	adds	r3, #1
 80034d0:	2b07      	cmp	r3, #7
 80034d2:	9322      	str	r3, [sp, #136]	; 0x88
 80034d4:	dc25      	bgt.n	8003522 <_svfprintf_r+0xa92>
 80034d6:	3408      	adds	r4, #8
 80034d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80034da:	9a07      	ldr	r2, [sp, #28]
 80034dc:	4293      	cmp	r3, r2
 80034de:	db02      	blt.n	80034e6 <_svfprintf_r+0xa56>
 80034e0:	07ee      	lsls	r6, r5, #31
 80034e2:	f57f ae02 	bpl.w	80030ea <_svfprintf_r+0x65a>
 80034e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ee:	6063      	str	r3, [r4, #4]
 80034f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80034f2:	4413      	add	r3, r2
 80034f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80034f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034f8:	3301      	adds	r3, #1
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	9322      	str	r3, [sp, #136]	; 0x88
 80034fe:	dc1a      	bgt.n	8003536 <_svfprintf_r+0xaa6>
 8003500:	3408      	adds	r4, #8
 8003502:	9b07      	ldr	r3, [sp, #28]
 8003504:	1e5e      	subs	r6, r3, #1
 8003506:	2e00      	cmp	r6, #0
 8003508:	f77f adef 	ble.w	80030ea <_svfprintf_r+0x65a>
 800350c:	f04f 0810 	mov.w	r8, #16
 8003510:	4f1b      	ldr	r7, [pc, #108]	; (8003580 <_svfprintf_r+0xaf0>)
 8003512:	2e10      	cmp	r6, #16
 8003514:	6027      	str	r7, [r4, #0]
 8003516:	dc18      	bgt.n	800354a <_svfprintf_r+0xaba>
 8003518:	6066      	str	r6, [r4, #4]
 800351a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800351c:	441e      	add	r6, r3
 800351e:	9623      	str	r6, [sp, #140]	; 0x8c
 8003520:	e5d4      	b.n	80030cc <_svfprintf_r+0x63c>
 8003522:	aa21      	add	r2, sp, #132	; 0x84
 8003524:	4649      	mov	r1, r9
 8003526:	4650      	mov	r0, sl
 8003528:	f001 fe0c 	bl	8005144 <__ssprint_r>
 800352c:	2800      	cmp	r0, #0
 800352e:	f040 820c 	bne.w	800394a <_svfprintf_r+0xeba>
 8003532:	ac2e      	add	r4, sp, #184	; 0xb8
 8003534:	e7d0      	b.n	80034d8 <_svfprintf_r+0xa48>
 8003536:	aa21      	add	r2, sp, #132	; 0x84
 8003538:	4649      	mov	r1, r9
 800353a:	4650      	mov	r0, sl
 800353c:	f001 fe02 	bl	8005144 <__ssprint_r>
 8003540:	2800      	cmp	r0, #0
 8003542:	f040 8202 	bne.w	800394a <_svfprintf_r+0xeba>
 8003546:	ac2e      	add	r4, sp, #184	; 0xb8
 8003548:	e7db      	b.n	8003502 <_svfprintf_r+0xa72>
 800354a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800354c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003550:	3310      	adds	r3, #16
 8003552:	9323      	str	r3, [sp, #140]	; 0x8c
 8003554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003556:	3301      	adds	r3, #1
 8003558:	2b07      	cmp	r3, #7
 800355a:	9322      	str	r3, [sp, #136]	; 0x88
 800355c:	dc02      	bgt.n	8003564 <_svfprintf_r+0xad4>
 800355e:	3408      	adds	r4, #8
 8003560:	3e10      	subs	r6, #16
 8003562:	e7d6      	b.n	8003512 <_svfprintf_r+0xa82>
 8003564:	aa21      	add	r2, sp, #132	; 0x84
 8003566:	4649      	mov	r1, r9
 8003568:	4650      	mov	r0, sl
 800356a:	f001 fdeb 	bl	8005144 <__ssprint_r>
 800356e:	2800      	cmp	r0, #0
 8003570:	f040 81eb 	bne.w	800394a <_svfprintf_r+0xeba>
 8003574:	ac2e      	add	r4, sp, #184	; 0xb8
 8003576:	e7f3      	b.n	8003560 <_svfprintf_r+0xad0>
 8003578:	0800662c 	.word	0x0800662c
 800357c:	0800663d 	.word	0x0800663d
 8003580:	0800664f 	.word	0x0800664f
 8003584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003586:	2b00      	cmp	r3, #0
 8003588:	dc7a      	bgt.n	8003680 <_svfprintf_r+0xbf0>
 800358a:	4b9b      	ldr	r3, [pc, #620]	; (80037f8 <_svfprintf_r+0xd68>)
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	2301      	movs	r3, #1
 8003590:	6063      	str	r3, [r4, #4]
 8003592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003594:	3301      	adds	r3, #1
 8003596:	9323      	str	r3, [sp, #140]	; 0x8c
 8003598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800359a:	3301      	adds	r3, #1
 800359c:	2b07      	cmp	r3, #7
 800359e:	9322      	str	r3, [sp, #136]	; 0x88
 80035a0:	dc44      	bgt.n	800362c <_svfprintf_r+0xb9c>
 80035a2:	3408      	adds	r4, #8
 80035a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80035a6:	b923      	cbnz	r3, 80035b2 <_svfprintf_r+0xb22>
 80035a8:	9b07      	ldr	r3, [sp, #28]
 80035aa:	b913      	cbnz	r3, 80035b2 <_svfprintf_r+0xb22>
 80035ac:	07e8      	lsls	r0, r5, #31
 80035ae:	f57f ad9c 	bpl.w	80030ea <_svfprintf_r+0x65a>
 80035b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035ba:	6063      	str	r3, [r4, #4]
 80035bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80035be:	4413      	add	r3, r2
 80035c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80035c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035c4:	3301      	adds	r3, #1
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	9322      	str	r3, [sp, #136]	; 0x88
 80035ca:	dc39      	bgt.n	8003640 <_svfprintf_r+0xbb0>
 80035cc:	f104 0308 	add.w	r3, r4, #8
 80035d0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80035d2:	2e00      	cmp	r6, #0
 80035d4:	da19      	bge.n	800360a <_svfprintf_r+0xb7a>
 80035d6:	2410      	movs	r4, #16
 80035d8:	4f88      	ldr	r7, [pc, #544]	; (80037fc <_svfprintf_r+0xd6c>)
 80035da:	4276      	negs	r6, r6
 80035dc:	2e10      	cmp	r6, #16
 80035de:	601f      	str	r7, [r3, #0]
 80035e0:	dc38      	bgt.n	8003654 <_svfprintf_r+0xbc4>
 80035e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80035e4:	605e      	str	r6, [r3, #4]
 80035e6:	4416      	add	r6, r2
 80035e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035ea:	9623      	str	r6, [sp, #140]	; 0x8c
 80035ec:	3201      	adds	r2, #1
 80035ee:	2a07      	cmp	r2, #7
 80035f0:	f103 0308 	add.w	r3, r3, #8
 80035f4:	9222      	str	r2, [sp, #136]	; 0x88
 80035f6:	dd08      	ble.n	800360a <_svfprintf_r+0xb7a>
 80035f8:	aa21      	add	r2, sp, #132	; 0x84
 80035fa:	4649      	mov	r1, r9
 80035fc:	4650      	mov	r0, sl
 80035fe:	f001 fda1 	bl	8005144 <__ssprint_r>
 8003602:	2800      	cmp	r0, #0
 8003604:	f040 81a1 	bne.w	800394a <_svfprintf_r+0xeba>
 8003608:	ab2e      	add	r3, sp, #184	; 0xb8
 800360a:	9a07      	ldr	r2, [sp, #28]
 800360c:	9907      	ldr	r1, [sp, #28]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003612:	f8c3 8000 	str.w	r8, [r3]
 8003616:	440a      	add	r2, r1
 8003618:	9223      	str	r2, [sp, #140]	; 0x8c
 800361a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800361c:	3201      	adds	r2, #1
 800361e:	2a07      	cmp	r2, #7
 8003620:	9222      	str	r2, [sp, #136]	; 0x88
 8003622:	f73f ad59 	bgt.w	80030d8 <_svfprintf_r+0x648>
 8003626:	f103 0408 	add.w	r4, r3, #8
 800362a:	e55e      	b.n	80030ea <_svfprintf_r+0x65a>
 800362c:	aa21      	add	r2, sp, #132	; 0x84
 800362e:	4649      	mov	r1, r9
 8003630:	4650      	mov	r0, sl
 8003632:	f001 fd87 	bl	8005144 <__ssprint_r>
 8003636:	2800      	cmp	r0, #0
 8003638:	f040 8187 	bne.w	800394a <_svfprintf_r+0xeba>
 800363c:	ac2e      	add	r4, sp, #184	; 0xb8
 800363e:	e7b1      	b.n	80035a4 <_svfprintf_r+0xb14>
 8003640:	aa21      	add	r2, sp, #132	; 0x84
 8003642:	4649      	mov	r1, r9
 8003644:	4650      	mov	r0, sl
 8003646:	f001 fd7d 	bl	8005144 <__ssprint_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	f040 817d 	bne.w	800394a <_svfprintf_r+0xeba>
 8003650:	ab2e      	add	r3, sp, #184	; 0xb8
 8003652:	e7bd      	b.n	80035d0 <_svfprintf_r+0xb40>
 8003654:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8003656:	605c      	str	r4, [r3, #4]
 8003658:	3210      	adds	r2, #16
 800365a:	9223      	str	r2, [sp, #140]	; 0x8c
 800365c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800365e:	3201      	adds	r2, #1
 8003660:	2a07      	cmp	r2, #7
 8003662:	9222      	str	r2, [sp, #136]	; 0x88
 8003664:	dc02      	bgt.n	800366c <_svfprintf_r+0xbdc>
 8003666:	3308      	adds	r3, #8
 8003668:	3e10      	subs	r6, #16
 800366a:	e7b7      	b.n	80035dc <_svfprintf_r+0xb4c>
 800366c:	aa21      	add	r2, sp, #132	; 0x84
 800366e:	4649      	mov	r1, r9
 8003670:	4650      	mov	r0, sl
 8003672:	f001 fd67 	bl	8005144 <__ssprint_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	f040 8167 	bne.w	800394a <_svfprintf_r+0xeba>
 800367c:	ab2e      	add	r3, sp, #184	; 0xb8
 800367e:	e7f3      	b.n	8003668 <_svfprintf_r+0xbd8>
 8003680:	9b07      	ldr	r3, [sp, #28]
 8003682:	42bb      	cmp	r3, r7
 8003684:	bfa8      	it	ge
 8003686:	463b      	movge	r3, r7
 8003688:	2b00      	cmp	r3, #0
 800368a:	461e      	mov	r6, r3
 800368c:	dd0b      	ble.n	80036a6 <_svfprintf_r+0xc16>
 800368e:	6063      	str	r3, [r4, #4]
 8003690:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003692:	f8c4 8000 	str.w	r8, [r4]
 8003696:	4433      	add	r3, r6
 8003698:	9323      	str	r3, [sp, #140]	; 0x8c
 800369a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800369c:	3301      	adds	r3, #1
 800369e:	2b07      	cmp	r3, #7
 80036a0:	9322      	str	r3, [sp, #136]	; 0x88
 80036a2:	dc5f      	bgt.n	8003764 <_svfprintf_r+0xcd4>
 80036a4:	3408      	adds	r4, #8
 80036a6:	2e00      	cmp	r6, #0
 80036a8:	bfb4      	ite	lt
 80036aa:	463e      	movlt	r6, r7
 80036ac:	1bbe      	subge	r6, r7, r6
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	dd0f      	ble.n	80036d2 <_svfprintf_r+0xc42>
 80036b2:	f8df b148 	ldr.w	fp, [pc, #328]	; 80037fc <_svfprintf_r+0xd6c>
 80036b6:	2e10      	cmp	r6, #16
 80036b8:	f8c4 b000 	str.w	fp, [r4]
 80036bc:	dc5c      	bgt.n	8003778 <_svfprintf_r+0xce8>
 80036be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036c0:	6066      	str	r6, [r4, #4]
 80036c2:	441e      	add	r6, r3
 80036c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036c6:	9623      	str	r6, [sp, #140]	; 0x8c
 80036c8:	3301      	adds	r3, #1
 80036ca:	2b07      	cmp	r3, #7
 80036cc:	9322      	str	r3, [sp, #136]	; 0x88
 80036ce:	dc6a      	bgt.n	80037a6 <_svfprintf_r+0xd16>
 80036d0:	3408      	adds	r4, #8
 80036d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80036d4:	9a07      	ldr	r2, [sp, #28]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	db01      	blt.n	80036de <_svfprintf_r+0xc4e>
 80036da:	07e9      	lsls	r1, r5, #31
 80036dc:	d50d      	bpl.n	80036fa <_svfprintf_r+0xc6a>
 80036de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036e6:	6063      	str	r3, [r4, #4]
 80036e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036ea:	4413      	add	r3, r2
 80036ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80036ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036f0:	3301      	adds	r3, #1
 80036f2:	2b07      	cmp	r3, #7
 80036f4:	9322      	str	r3, [sp, #136]	; 0x88
 80036f6:	dc60      	bgt.n	80037ba <_svfprintf_r+0xd2a>
 80036f8:	3408      	adds	r4, #8
 80036fa:	9b07      	ldr	r3, [sp, #28]
 80036fc:	9a07      	ldr	r2, [sp, #28]
 80036fe:	1bde      	subs	r6, r3, r7
 8003700:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	429e      	cmp	r6, r3
 8003706:	bfa8      	it	ge
 8003708:	461e      	movge	r6, r3
 800370a:	2e00      	cmp	r6, #0
 800370c:	dd0b      	ble.n	8003726 <_svfprintf_r+0xc96>
 800370e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003710:	4447      	add	r7, r8
 8003712:	4433      	add	r3, r6
 8003714:	9323      	str	r3, [sp, #140]	; 0x8c
 8003716:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003718:	6027      	str	r7, [r4, #0]
 800371a:	3301      	adds	r3, #1
 800371c:	2b07      	cmp	r3, #7
 800371e:	6066      	str	r6, [r4, #4]
 8003720:	9322      	str	r3, [sp, #136]	; 0x88
 8003722:	dc54      	bgt.n	80037ce <_svfprintf_r+0xd3e>
 8003724:	3408      	adds	r4, #8
 8003726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003728:	9a07      	ldr	r2, [sp, #28]
 800372a:	2e00      	cmp	r6, #0
 800372c:	eba2 0303 	sub.w	r3, r2, r3
 8003730:	bfb4      	ite	lt
 8003732:	461e      	movlt	r6, r3
 8003734:	1b9e      	subge	r6, r3, r6
 8003736:	2e00      	cmp	r6, #0
 8003738:	f77f acd7 	ble.w	80030ea <_svfprintf_r+0x65a>
 800373c:	f04f 0810 	mov.w	r8, #16
 8003740:	4f2e      	ldr	r7, [pc, #184]	; (80037fc <_svfprintf_r+0xd6c>)
 8003742:	2e10      	cmp	r6, #16
 8003744:	6027      	str	r7, [r4, #0]
 8003746:	f77f aee7 	ble.w	8003518 <_svfprintf_r+0xa88>
 800374a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800374c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003750:	3310      	adds	r3, #16
 8003752:	9323      	str	r3, [sp, #140]	; 0x8c
 8003754:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003756:	3301      	adds	r3, #1
 8003758:	2b07      	cmp	r3, #7
 800375a:	9322      	str	r3, [sp, #136]	; 0x88
 800375c:	dc41      	bgt.n	80037e2 <_svfprintf_r+0xd52>
 800375e:	3408      	adds	r4, #8
 8003760:	3e10      	subs	r6, #16
 8003762:	e7ee      	b.n	8003742 <_svfprintf_r+0xcb2>
 8003764:	aa21      	add	r2, sp, #132	; 0x84
 8003766:	4649      	mov	r1, r9
 8003768:	4650      	mov	r0, sl
 800376a:	f001 fceb 	bl	8005144 <__ssprint_r>
 800376e:	2800      	cmp	r0, #0
 8003770:	f040 80eb 	bne.w	800394a <_svfprintf_r+0xeba>
 8003774:	ac2e      	add	r4, sp, #184	; 0xb8
 8003776:	e796      	b.n	80036a6 <_svfprintf_r+0xc16>
 8003778:	2310      	movs	r3, #16
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800377e:	3310      	adds	r3, #16
 8003780:	9323      	str	r3, [sp, #140]	; 0x8c
 8003782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003784:	3301      	adds	r3, #1
 8003786:	2b07      	cmp	r3, #7
 8003788:	9322      	str	r3, [sp, #136]	; 0x88
 800378a:	dc02      	bgt.n	8003792 <_svfprintf_r+0xd02>
 800378c:	3408      	adds	r4, #8
 800378e:	3e10      	subs	r6, #16
 8003790:	e791      	b.n	80036b6 <_svfprintf_r+0xc26>
 8003792:	aa21      	add	r2, sp, #132	; 0x84
 8003794:	4649      	mov	r1, r9
 8003796:	4650      	mov	r0, sl
 8003798:	f001 fcd4 	bl	8005144 <__ssprint_r>
 800379c:	2800      	cmp	r0, #0
 800379e:	f040 80d4 	bne.w	800394a <_svfprintf_r+0xeba>
 80037a2:	ac2e      	add	r4, sp, #184	; 0xb8
 80037a4:	e7f3      	b.n	800378e <_svfprintf_r+0xcfe>
 80037a6:	aa21      	add	r2, sp, #132	; 0x84
 80037a8:	4649      	mov	r1, r9
 80037aa:	4650      	mov	r0, sl
 80037ac:	f001 fcca 	bl	8005144 <__ssprint_r>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	f040 80ca 	bne.w	800394a <_svfprintf_r+0xeba>
 80037b6:	ac2e      	add	r4, sp, #184	; 0xb8
 80037b8:	e78b      	b.n	80036d2 <_svfprintf_r+0xc42>
 80037ba:	aa21      	add	r2, sp, #132	; 0x84
 80037bc:	4649      	mov	r1, r9
 80037be:	4650      	mov	r0, sl
 80037c0:	f001 fcc0 	bl	8005144 <__ssprint_r>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	f040 80c0 	bne.w	800394a <_svfprintf_r+0xeba>
 80037ca:	ac2e      	add	r4, sp, #184	; 0xb8
 80037cc:	e795      	b.n	80036fa <_svfprintf_r+0xc6a>
 80037ce:	aa21      	add	r2, sp, #132	; 0x84
 80037d0:	4649      	mov	r1, r9
 80037d2:	4650      	mov	r0, sl
 80037d4:	f001 fcb6 	bl	8005144 <__ssprint_r>
 80037d8:	2800      	cmp	r0, #0
 80037da:	f040 80b6 	bne.w	800394a <_svfprintf_r+0xeba>
 80037de:	ac2e      	add	r4, sp, #184	; 0xb8
 80037e0:	e7a1      	b.n	8003726 <_svfprintf_r+0xc96>
 80037e2:	aa21      	add	r2, sp, #132	; 0x84
 80037e4:	4649      	mov	r1, r9
 80037e6:	4650      	mov	r0, sl
 80037e8:	f001 fcac 	bl	8005144 <__ssprint_r>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f040 80ac 	bne.w	800394a <_svfprintf_r+0xeba>
 80037f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80037f4:	e7b4      	b.n	8003760 <_svfprintf_r+0xcd0>
 80037f6:	bf00      	nop
 80037f8:	0800663d 	.word	0x0800663d
 80037fc:	0800664f 	.word	0x0800664f
 8003800:	9b07      	ldr	r3, [sp, #28]
 8003802:	2b01      	cmp	r3, #1
 8003804:	dc01      	bgt.n	800380a <_svfprintf_r+0xd7a>
 8003806:	07ea      	lsls	r2, r5, #31
 8003808:	d576      	bpl.n	80038f8 <_svfprintf_r+0xe68>
 800380a:	2301      	movs	r3, #1
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003810:	f8c4 8000 	str.w	r8, [r4]
 8003814:	3301      	adds	r3, #1
 8003816:	9323      	str	r3, [sp, #140]	; 0x8c
 8003818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800381a:	3301      	adds	r3, #1
 800381c:	2b07      	cmp	r3, #7
 800381e:	9322      	str	r3, [sp, #136]	; 0x88
 8003820:	dc36      	bgt.n	8003890 <_svfprintf_r+0xe00>
 8003822:	3408      	adds	r4, #8
 8003824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800382c:	6063      	str	r3, [r4, #4]
 800382e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003830:	4413      	add	r3, r2
 8003832:	9323      	str	r3, [sp, #140]	; 0x8c
 8003834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003836:	3301      	adds	r3, #1
 8003838:	2b07      	cmp	r3, #7
 800383a:	9322      	str	r3, [sp, #136]	; 0x88
 800383c:	dc31      	bgt.n	80038a2 <_svfprintf_r+0xe12>
 800383e:	3408      	adds	r4, #8
 8003840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003842:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003844:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003846:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003848:	f7fd f8aa 	bl	80009a0 <__aeabi_dcmpeq>
 800384c:	9b07      	ldr	r3, [sp, #28]
 800384e:	1e5e      	subs	r6, r3, #1
 8003850:	2800      	cmp	r0, #0
 8003852:	d12f      	bne.n	80038b4 <_svfprintf_r+0xe24>
 8003854:	f108 0301 	add.w	r3, r8, #1
 8003858:	e884 0048 	stmia.w	r4, {r3, r6}
 800385c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800385e:	9a07      	ldr	r2, [sp, #28]
 8003860:	3b01      	subs	r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	9323      	str	r3, [sp, #140]	; 0x8c
 8003866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003868:	3301      	adds	r3, #1
 800386a:	2b07      	cmp	r3, #7
 800386c:	9322      	str	r3, [sp, #136]	; 0x88
 800386e:	dd4a      	ble.n	8003906 <_svfprintf_r+0xe76>
 8003870:	aa21      	add	r2, sp, #132	; 0x84
 8003872:	4649      	mov	r1, r9
 8003874:	4650      	mov	r0, sl
 8003876:	f001 fc65 	bl	8005144 <__ssprint_r>
 800387a:	2800      	cmp	r0, #0
 800387c:	d165      	bne.n	800394a <_svfprintf_r+0xeba>
 800387e:	ac2e      	add	r4, sp, #184	; 0xb8
 8003880:	ab1d      	add	r3, sp, #116	; 0x74
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003886:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003888:	6063      	str	r3, [r4, #4]
 800388a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800388c:	4413      	add	r3, r2
 800388e:	e41c      	b.n	80030ca <_svfprintf_r+0x63a>
 8003890:	aa21      	add	r2, sp, #132	; 0x84
 8003892:	4649      	mov	r1, r9
 8003894:	4650      	mov	r0, sl
 8003896:	f001 fc55 	bl	8005144 <__ssprint_r>
 800389a:	2800      	cmp	r0, #0
 800389c:	d155      	bne.n	800394a <_svfprintf_r+0xeba>
 800389e:	ac2e      	add	r4, sp, #184	; 0xb8
 80038a0:	e7c0      	b.n	8003824 <_svfprintf_r+0xd94>
 80038a2:	aa21      	add	r2, sp, #132	; 0x84
 80038a4:	4649      	mov	r1, r9
 80038a6:	4650      	mov	r0, sl
 80038a8:	f001 fc4c 	bl	8005144 <__ssprint_r>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d14c      	bne.n	800394a <_svfprintf_r+0xeba>
 80038b0:	ac2e      	add	r4, sp, #184	; 0xb8
 80038b2:	e7c5      	b.n	8003840 <_svfprintf_r+0xdb0>
 80038b4:	2e00      	cmp	r6, #0
 80038b6:	dde3      	ble.n	8003880 <_svfprintf_r+0xdf0>
 80038b8:	f04f 0810 	mov.w	r8, #16
 80038bc:	4f58      	ldr	r7, [pc, #352]	; (8003a20 <_svfprintf_r+0xf90>)
 80038be:	2e10      	cmp	r6, #16
 80038c0:	6027      	str	r7, [r4, #0]
 80038c2:	dc04      	bgt.n	80038ce <_svfprintf_r+0xe3e>
 80038c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038c6:	6066      	str	r6, [r4, #4]
 80038c8:	441e      	add	r6, r3
 80038ca:	9623      	str	r6, [sp, #140]	; 0x8c
 80038cc:	e7cb      	b.n	8003866 <_svfprintf_r+0xdd6>
 80038ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038d0:	f8c4 8004 	str.w	r8, [r4, #4]
 80038d4:	3310      	adds	r3, #16
 80038d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80038d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038da:	3301      	adds	r3, #1
 80038dc:	2b07      	cmp	r3, #7
 80038de:	9322      	str	r3, [sp, #136]	; 0x88
 80038e0:	dc02      	bgt.n	80038e8 <_svfprintf_r+0xe58>
 80038e2:	3408      	adds	r4, #8
 80038e4:	3e10      	subs	r6, #16
 80038e6:	e7ea      	b.n	80038be <_svfprintf_r+0xe2e>
 80038e8:	aa21      	add	r2, sp, #132	; 0x84
 80038ea:	4649      	mov	r1, r9
 80038ec:	4650      	mov	r0, sl
 80038ee:	f001 fc29 	bl	8005144 <__ssprint_r>
 80038f2:	bb50      	cbnz	r0, 800394a <_svfprintf_r+0xeba>
 80038f4:	ac2e      	add	r4, sp, #184	; 0xb8
 80038f6:	e7f5      	b.n	80038e4 <_svfprintf_r+0xe54>
 80038f8:	2301      	movs	r3, #1
 80038fa:	6063      	str	r3, [r4, #4]
 80038fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038fe:	f8c4 8000 	str.w	r8, [r4]
 8003902:	3301      	adds	r3, #1
 8003904:	e7ae      	b.n	8003864 <_svfprintf_r+0xdd4>
 8003906:	3408      	adds	r4, #8
 8003908:	e7ba      	b.n	8003880 <_svfprintf_r+0xdf0>
 800390a:	3408      	adds	r4, #8
 800390c:	f7ff bbed 	b.w	80030ea <_svfprintf_r+0x65a>
 8003910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003914:	1a9d      	subs	r5, r3, r2
 8003916:	2d00      	cmp	r5, #0
 8003918:	f77f abea 	ble.w	80030f0 <_svfprintf_r+0x660>
 800391c:	2610      	movs	r6, #16
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <_svfprintf_r+0xf94>)
 8003920:	2d10      	cmp	r5, #16
 8003922:	6023      	str	r3, [r4, #0]
 8003924:	dc1b      	bgt.n	800395e <_svfprintf_r+0xece>
 8003926:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003928:	6065      	str	r5, [r4, #4]
 800392a:	441d      	add	r5, r3
 800392c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800392e:	9523      	str	r5, [sp, #140]	; 0x8c
 8003930:	3301      	adds	r3, #1
 8003932:	2b07      	cmp	r3, #7
 8003934:	9322      	str	r3, [sp, #136]	; 0x88
 8003936:	f77f abdb 	ble.w	80030f0 <_svfprintf_r+0x660>
 800393a:	aa21      	add	r2, sp, #132	; 0x84
 800393c:	4649      	mov	r1, r9
 800393e:	4650      	mov	r0, sl
 8003940:	f001 fc00 	bl	8005144 <__ssprint_r>
 8003944:	2800      	cmp	r0, #0
 8003946:	f43f abd3 	beq.w	80030f0 <_svfprintf_r+0x660>
 800394a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800394e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003954:	bf18      	it	ne
 8003956:	f04f 33ff 	movne.w	r3, #4294967295
 800395a:	f7ff b8bd 	b.w	8002ad8 <_svfprintf_r+0x48>
 800395e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003960:	6066      	str	r6, [r4, #4]
 8003962:	3310      	adds	r3, #16
 8003964:	9323      	str	r3, [sp, #140]	; 0x8c
 8003966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003968:	3301      	adds	r3, #1
 800396a:	2b07      	cmp	r3, #7
 800396c:	9322      	str	r3, [sp, #136]	; 0x88
 800396e:	dc02      	bgt.n	8003976 <_svfprintf_r+0xee6>
 8003970:	3408      	adds	r4, #8
 8003972:	3d10      	subs	r5, #16
 8003974:	e7d3      	b.n	800391e <_svfprintf_r+0xe8e>
 8003976:	aa21      	add	r2, sp, #132	; 0x84
 8003978:	4649      	mov	r1, r9
 800397a:	4650      	mov	r0, sl
 800397c:	f001 fbe2 	bl	8005144 <__ssprint_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d1e2      	bne.n	800394a <_svfprintf_r+0xeba>
 8003984:	ac2e      	add	r4, sp, #184	; 0xb8
 8003986:	e7f4      	b.n	8003972 <_svfprintf_r+0xee2>
 8003988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0dd      	beq.n	800394a <_svfprintf_r+0xeba>
 800398e:	aa21      	add	r2, sp, #132	; 0x84
 8003990:	4649      	mov	r1, r9
 8003992:	4650      	mov	r0, sl
 8003994:	f001 fbd6 	bl	8005144 <__ssprint_r>
 8003998:	e7d7      	b.n	800394a <_svfprintf_r+0xeba>
 800399a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800399e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80039a2:	f7fd f82f 	bl	8000a04 <__aeabi_dcmpun>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	f43f aa3d 	beq.w	8002e26 <_svfprintf_r+0x396>
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <_svfprintf_r+0xf98>)
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <_svfprintf_r+0xf9c>)
 80039b0:	f7ff ba2d 	b.w	8002e0e <_svfprintf_r+0x37e>
 80039b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80039b6:	eba3 0308 	sub.w	r3, r3, r8
 80039ba:	9307      	str	r3, [sp, #28]
 80039bc:	f7ff baaf 	b.w	8002f1e <_svfprintf_r+0x48e>
 80039c0:	ea56 0207 	orrs.w	r2, r6, r7
 80039c4:	950f      	str	r5, [sp, #60]	; 0x3c
 80039c6:	f43f ac2b 	beq.w	8003220 <_svfprintf_r+0x790>
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	f43f ac9d 	beq.w	800330a <_svfprintf_r+0x87a>
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	f43f acbd 	beq.w	8003350 <_svfprintf_r+0x8c0>
 80039d6:	ab2e      	add	r3, sp, #184	; 0xb8
 80039d8:	08f1      	lsrs	r1, r6, #3
 80039da:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 80039de:	08f8      	lsrs	r0, r7, #3
 80039e0:	f006 0207 	and.w	r2, r6, #7
 80039e4:	4607      	mov	r7, r0
 80039e6:	460e      	mov	r6, r1
 80039e8:	3230      	adds	r2, #48	; 0x30
 80039ea:	ea56 0107 	orrs.w	r1, r6, r7
 80039ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80039f2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80039f6:	f47f ac86 	bne.w	8003306 <_svfprintf_r+0x876>
 80039fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80039fc:	07c9      	lsls	r1, r1, #31
 80039fe:	d506      	bpl.n	8003a0e <_svfprintf_r+0xf7e>
 8003a00:	2a30      	cmp	r2, #48	; 0x30
 8003a02:	d004      	beq.n	8003a0e <_svfprintf_r+0xf7e>
 8003a04:	2230      	movs	r2, #48	; 0x30
 8003a06:	f808 2c01 	strb.w	r2, [r8, #-1]
 8003a0a:	f1a3 0802 	sub.w	r8, r3, #2
 8003a0e:	ab2e      	add	r3, sp, #184	; 0xb8
 8003a10:	465e      	mov	r6, fp
 8003a12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003a14:	eba3 0b08 	sub.w	fp, r3, r8
 8003a18:	2700      	movs	r7, #0
 8003a1a:	f7ff bace 	b.w	8002fba <_svfprintf_r+0x52a>
 8003a1e:	bf00      	nop
 8003a20:	0800664f 	.word	0x0800664f
 8003a24:	0800663f 	.word	0x0800663f
 8003a28:	08006613 	.word	0x08006613
 8003a2c:	08006617 	.word	0x08006617

08003a30 <quorem>:
 8003a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a34:	6903      	ldr	r3, [r0, #16]
 8003a36:	690c      	ldr	r4, [r1, #16]
 8003a38:	4680      	mov	r8, r0
 8003a3a:	429c      	cmp	r4, r3
 8003a3c:	f300 8082 	bgt.w	8003b44 <quorem+0x114>
 8003a40:	3c01      	subs	r4, #1
 8003a42:	f101 0714 	add.w	r7, r1, #20
 8003a46:	f100 0614 	add.w	r6, r0, #20
 8003a4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a52:	3501      	adds	r5, #1
 8003a54:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a58:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003a5c:	eb06 030e 	add.w	r3, r6, lr
 8003a60:	eb07 090e 	add.w	r9, r7, lr
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	b38d      	cbz	r5, 8003acc <quorem+0x9c>
 8003a68:	f04f 0a00 	mov.w	sl, #0
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	46b4      	mov	ip, r6
 8003a70:	46d3      	mov	fp, sl
 8003a72:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a76:	b293      	uxth	r3, r2
 8003a78:	fb05 a303 	mla	r3, r5, r3, sl
 8003a7c:	0c12      	lsrs	r2, r2, #16
 8003a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a82:	fb05 a202 	mla	r2, r5, r2, sl
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	ebab 0303 	sub.w	r3, fp, r3
 8003a8c:	f8bc b000 	ldrh.w	fp, [ip]
 8003a90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a94:	445b      	add	r3, fp
 8003a96:	fa1f fb82 	uxth.w	fp, r2
 8003a9a:	f8dc 2000 	ldr.w	r2, [ip]
 8003a9e:	4581      	cmp	r9, r0
 8003aa0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aae:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003ab2:	f84c 3b04 	str.w	r3, [ip], #4
 8003ab6:	d2dc      	bcs.n	8003a72 <quorem+0x42>
 8003ab8:	f856 300e 	ldr.w	r3, [r6, lr]
 8003abc:	b933      	cbnz	r3, 8003acc <quorem+0x9c>
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	3b04      	subs	r3, #4
 8003ac2:	429e      	cmp	r6, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	d331      	bcc.n	8003b2c <quorem+0xfc>
 8003ac8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003acc:	4640      	mov	r0, r8
 8003ace:	f001 fa60 	bl	8004f92 <__mcmp>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	db26      	blt.n	8003b24 <quorem+0xf4>
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f04f 0e00 	mov.w	lr, #0
 8003adc:	3501      	adds	r5, #1
 8003ade:	f857 1b04 	ldr.w	r1, [r7], #4
 8003ae2:	f8d0 c000 	ldr.w	ip, [r0]
 8003ae6:	b28b      	uxth	r3, r1
 8003ae8:	ebae 0303 	sub.w	r3, lr, r3
 8003aec:	fa1f f28c 	uxth.w	r2, ip
 8003af0:	4413      	add	r3, r2
 8003af2:	0c0a      	lsrs	r2, r1, #16
 8003af4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b02:	45b9      	cmp	r9, r7
 8003b04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003b08:	f840 3b04 	str.w	r3, [r0], #4
 8003b0c:	d2e7      	bcs.n	8003ade <quorem+0xae>
 8003b0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003b12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003b16:	b92a      	cbnz	r2, 8003b24 <quorem+0xf4>
 8003b18:	3b04      	subs	r3, #4
 8003b1a:	429e      	cmp	r6, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	d30b      	bcc.n	8003b38 <quorem+0x108>
 8003b20:	f8c8 4010 	str.w	r4, [r8, #16]
 8003b24:	4628      	mov	r0, r5
 8003b26:	b003      	add	sp, #12
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	2a00      	cmp	r2, #0
 8003b32:	d1c9      	bne.n	8003ac8 <quorem+0x98>
 8003b34:	3c01      	subs	r4, #1
 8003b36:	e7c4      	b.n	8003ac2 <quorem+0x92>
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d1ef      	bne.n	8003b20 <quorem+0xf0>
 8003b40:	3c01      	subs	r4, #1
 8003b42:	e7ea      	b.n	8003b1a <quorem+0xea>
 8003b44:	2000      	movs	r0, #0
 8003b46:	e7ee      	b.n	8003b26 <quorem+0xf6>

08003b48 <_dtoa_r>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b4e:	b095      	sub	sp, #84	; 0x54
 8003b50:	4604      	mov	r4, r0
 8003b52:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b58:	b93e      	cbnz	r6, 8003b6a <_dtoa_r+0x22>
 8003b5a:	2010      	movs	r0, #16
 8003b5c:	f000 fdd6 	bl	800470c <malloc>
 8003b60:	6260      	str	r0, [r4, #36]	; 0x24
 8003b62:	6046      	str	r6, [r0, #4]
 8003b64:	6086      	str	r6, [r0, #8]
 8003b66:	6006      	str	r6, [r0, #0]
 8003b68:	60c6      	str	r6, [r0, #12]
 8003b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	b151      	cbz	r1, 8003b86 <_dtoa_r+0x3e>
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2301      	movs	r3, #1
 8003b74:	4093      	lsls	r3, r2
 8003b76:	604a      	str	r2, [r1, #4]
 8003b78:	608b      	str	r3, [r1, #8]
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f001 f834 	bl	8004be8 <_Bfree>
 8003b80:	2200      	movs	r2, #0
 8003b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bfb7      	itett	lt
 8003b8c:	2301      	movlt	r3, #1
 8003b8e:	2300      	movge	r3, #0
 8003b90:	602b      	strlt	r3, [r5, #0]
 8003b92:	9b03      	ldrlt	r3, [sp, #12]
 8003b94:	bfae      	itee	ge
 8003b96:	602b      	strge	r3, [r5, #0]
 8003b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b9c:	9303      	strlt	r3, [sp, #12]
 8003b9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003ba2:	4bab      	ldr	r3, [pc, #684]	; (8003e50 <_dtoa_r+0x308>)
 8003ba4:	ea33 0309 	bics.w	r3, r3, r9
 8003ba8:	d11b      	bne.n	8003be2 <_dtoa_r+0x9a>
 8003baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	9b02      	ldr	r3, [sp, #8]
 8003bb4:	b923      	cbnz	r3, 8003bc0 <_dtoa_r+0x78>
 8003bb6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	f000 8583 	beq.w	80046c6 <_dtoa_r+0xb7e>
 8003bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bc2:	b953      	cbnz	r3, 8003bda <_dtoa_r+0x92>
 8003bc4:	4ba3      	ldr	r3, [pc, #652]	; (8003e54 <_dtoa_r+0x30c>)
 8003bc6:	e021      	b.n	8003c0c <_dtoa_r+0xc4>
 8003bc8:	4ba3      	ldr	r3, [pc, #652]	; (8003e58 <_dtoa_r+0x310>)
 8003bca:	9306      	str	r3, [sp, #24]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	9806      	ldr	r0, [sp, #24]
 8003bd4:	b015      	add	sp, #84	; 0x54
 8003bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bda:	4b9e      	ldr	r3, [pc, #632]	; (8003e54 <_dtoa_r+0x30c>)
 8003bdc:	9306      	str	r3, [sp, #24]
 8003bde:	3303      	adds	r3, #3
 8003be0:	e7f5      	b.n	8003bce <_dtoa_r+0x86>
 8003be2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2300      	movs	r3, #0
 8003bea:	4630      	mov	r0, r6
 8003bec:	4639      	mov	r1, r7
 8003bee:	f7fc fed7 	bl	80009a0 <__aeabi_dcmpeq>
 8003bf2:	4680      	mov	r8, r0
 8003bf4:	b160      	cbz	r0, 8003c10 <_dtoa_r+0xc8>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 855e 	beq.w	80046c0 <_dtoa_r+0xb78>
 8003c04:	4b95      	ldr	r3, [pc, #596]	; (8003e5c <_dtoa_r+0x314>)
 8003c06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	9306      	str	r3, [sp, #24]
 8003c0e:	e7e0      	b.n	8003bd2 <_dtoa_r+0x8a>
 8003c10:	ab12      	add	r3, sp, #72	; 0x48
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	ab13      	add	r3, sp, #76	; 0x4c
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4632      	mov	r2, r6
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f001 fa31 	bl	8005084 <__d2b>
 8003c22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003c26:	4682      	mov	sl, r0
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	d07d      	beq.n	8003d28 <_dtoa_r+0x1e0>
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c32:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003c36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c3a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c3e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003c42:	2200      	movs	r2, #0
 8003c44:	4b86      	ldr	r3, [pc, #536]	; (8003e60 <_dtoa_r+0x318>)
 8003c46:	f7fc fa8f 	bl	8000168 <__aeabi_dsub>
 8003c4a:	a37b      	add	r3, pc, #492	; (adr r3, 8003e38 <_dtoa_r+0x2f0>)
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f7fc fc3e 	bl	80004d0 <__aeabi_dmul>
 8003c54:	a37a      	add	r3, pc, #488	; (adr r3, 8003e40 <_dtoa_r+0x2f8>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fa87 	bl	800016c <__adddf3>
 8003c5e:	4606      	mov	r6, r0
 8003c60:	4628      	mov	r0, r5
 8003c62:	460f      	mov	r7, r1
 8003c64:	f7fc fbce 	bl	8000404 <__aeabi_i2d>
 8003c68:	a377      	add	r3, pc, #476	; (adr r3, 8003e48 <_dtoa_r+0x300>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc fc2f 	bl	80004d0 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4630      	mov	r0, r6
 8003c78:	4639      	mov	r1, r7
 8003c7a:	f7fc fa77 	bl	800016c <__adddf3>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	460f      	mov	r7, r1
 8003c82:	f7fc fed5 	bl	8000a30 <__aeabi_d2iz>
 8003c86:	2200      	movs	r2, #0
 8003c88:	4683      	mov	fp, r0
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4639      	mov	r1, r7
 8003c90:	f7fc fe90 	bl	80009b4 <__aeabi_dcmplt>
 8003c94:	b158      	cbz	r0, 8003cae <_dtoa_r+0x166>
 8003c96:	4658      	mov	r0, fp
 8003c98:	f7fc fbb4 	bl	8000404 <__aeabi_i2d>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	f7fc fe7c 	bl	80009a0 <__aeabi_dcmpeq>
 8003ca8:	b908      	cbnz	r0, 8003cae <_dtoa_r+0x166>
 8003caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003cae:	f1bb 0f16 	cmp.w	fp, #22
 8003cb2:	d858      	bhi.n	8003d66 <_dtoa_r+0x21e>
 8003cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cb8:	496a      	ldr	r1, [pc, #424]	; (8003e64 <_dtoa_r+0x31c>)
 8003cba:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc2:	f7fc fe95 	bl	80009f0 <__aeabi_dcmpgt>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d04f      	beq.n	8003d6a <_dtoa_r+0x222>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003cd0:	930d      	str	r3, [sp, #52]	; 0x34
 8003cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cd4:	1b5d      	subs	r5, r3, r5
 8003cd6:	1e6b      	subs	r3, r5, #1
 8003cd8:	9307      	str	r3, [sp, #28]
 8003cda:	bf43      	ittte	mi
 8003cdc:	2300      	movmi	r3, #0
 8003cde:	f1c5 0801 	rsbmi	r8, r5, #1
 8003ce2:	9307      	strmi	r3, [sp, #28]
 8003ce4:	f04f 0800 	movpl.w	r8, #0
 8003ce8:	f1bb 0f00 	cmp.w	fp, #0
 8003cec:	db3f      	blt.n	8003d6e <_dtoa_r+0x226>
 8003cee:	9b07      	ldr	r3, [sp, #28]
 8003cf0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003cf4:	445b      	add	r3, fp
 8003cf6:	9307      	str	r3, [sp, #28]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9308      	str	r3, [sp, #32]
 8003cfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	f200 80b4 	bhi.w	8003e6c <_dtoa_r+0x324>
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	bfc4      	itt	gt
 8003d08:	3b04      	subgt	r3, #4
 8003d0a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d0e:	bfc8      	it	gt
 8003d10:	2600      	movgt	r6, #0
 8003d12:	f1a3 0302 	sub.w	r3, r3, #2
 8003d16:	bfd8      	it	le
 8003d18:	2601      	movle	r6, #1
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	f200 80b2 	bhi.w	8003e84 <_dtoa_r+0x33c>
 8003d20:	e8df f003 	tbb	[pc, r3]
 8003d24:	782d8684 	.word	0x782d8684
 8003d28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003d2c:	441d      	add	r5, r3
 8003d2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	dd11      	ble.n	8003d5a <_dtoa_r+0x212>
 8003d36:	9a02      	ldr	r2, [sp, #8]
 8003d38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003d3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003d40:	fa22 f000 	lsr.w	r0, r2, r0
 8003d44:	fa09 f303 	lsl.w	r3, r9, r3
 8003d48:	4318      	orrs	r0, r3
 8003d4a:	f7fc fb4b 	bl	80003e4 <__aeabi_ui2d>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d54:	3d01      	subs	r5, #1
 8003d56:	9310      	str	r3, [sp, #64]	; 0x40
 8003d58:	e773      	b.n	8003c42 <_dtoa_r+0xfa>
 8003d5a:	f1c3 0020 	rsb	r0, r3, #32
 8003d5e:	9b02      	ldr	r3, [sp, #8]
 8003d60:	fa03 f000 	lsl.w	r0, r3, r0
 8003d64:	e7f1      	b.n	8003d4a <_dtoa_r+0x202>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e7b2      	b.n	8003cd0 <_dtoa_r+0x188>
 8003d6a:	900d      	str	r0, [sp, #52]	; 0x34
 8003d6c:	e7b1      	b.n	8003cd2 <_dtoa_r+0x18a>
 8003d6e:	f1cb 0300 	rsb	r3, fp, #0
 8003d72:	9308      	str	r3, [sp, #32]
 8003d74:	2300      	movs	r3, #0
 8003d76:	eba8 080b 	sub.w	r8, r8, fp
 8003d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8003d7c:	e7be      	b.n	8003cfc <_dtoa_r+0x1b4>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	9309      	str	r3, [sp, #36]	; 0x24
 8003d82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f340 8080 	ble.w	8003e8a <_dtoa_r+0x342>
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2104      	movs	r1, #4
 8003d92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d94:	606a      	str	r2, [r5, #4]
 8003d96:	f101 0214 	add.w	r2, r1, #20
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d97a      	bls.n	8003e94 <_dtoa_r+0x34c>
 8003d9e:	6869      	ldr	r1, [r5, #4]
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 feed 	bl	8004b80 <_Balloc>
 8003da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003da8:	6028      	str	r0, [r5, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b9 0f0e 	cmp.w	r9, #14
 8003db0:	9306      	str	r3, [sp, #24]
 8003db2:	f200 80f0 	bhi.w	8003f96 <_dtoa_r+0x44e>
 8003db6:	2e00      	cmp	r6, #0
 8003db8:	f000 80ed 	beq.w	8003f96 <_dtoa_r+0x44e>
 8003dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dc0:	f1bb 0f00 	cmp.w	fp, #0
 8003dc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003dc8:	dd79      	ble.n	8003ebe <_dtoa_r+0x376>
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <_dtoa_r+0x31c>)
 8003dcc:	f00b 030f 	and.w	r3, fp, #15
 8003dd0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003dd8:	06f0      	lsls	r0, r6, #27
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003de2:	d55c      	bpl.n	8003e9e <_dtoa_r+0x356>
 8003de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003de8:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <_dtoa_r+0x320>)
 8003dea:	2503      	movs	r5, #3
 8003dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003df0:	f7fc fc98 	bl	8000724 <__aeabi_ddiv>
 8003df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003df8:	f006 060f 	and.w	r6, r6, #15
 8003dfc:	4f1a      	ldr	r7, [pc, #104]	; (8003e68 <_dtoa_r+0x320>)
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	d14f      	bne.n	8003ea2 <_dtoa_r+0x35a>
 8003e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e0a:	f7fc fc8b 	bl	8000724 <__aeabi_ddiv>
 8003e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e12:	e06e      	b.n	8003ef2 <_dtoa_r+0x3aa>
 8003e14:	2301      	movs	r3, #1
 8003e16:	9309      	str	r3, [sp, #36]	; 0x24
 8003e18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e1a:	445b      	add	r3, fp
 8003e1c:	f103 0901 	add.w	r9, r3, #1
 8003e20:	9304      	str	r3, [sp, #16]
 8003e22:	464b      	mov	r3, r9
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	bfb8      	it	lt
 8003e28:	2301      	movlt	r3, #1
 8003e2a:	e7b0      	b.n	8003d8e <_dtoa_r+0x246>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e7a7      	b.n	8003d80 <_dtoa_r+0x238>
 8003e30:	2300      	movs	r3, #0
 8003e32:	e7f0      	b.n	8003e16 <_dtoa_r+0x2ce>
 8003e34:	f3af 8000 	nop.w
 8003e38:	636f4361 	.word	0x636f4361
 8003e3c:	3fd287a7 	.word	0x3fd287a7
 8003e40:	8b60c8b3 	.word	0x8b60c8b3
 8003e44:	3fc68a28 	.word	0x3fc68a28
 8003e48:	509f79fb 	.word	0x509f79fb
 8003e4c:	3fd34413 	.word	0x3fd34413
 8003e50:	7ff00000 	.word	0x7ff00000
 8003e54:	08006668 	.word	0x08006668
 8003e58:	0800665f 	.word	0x0800665f
 8003e5c:	0800663e 	.word	0x0800663e
 8003e60:	3ff80000 	.word	0x3ff80000
 8003e64:	08006698 	.word	0x08006698
 8003e68:	08006670 	.word	0x08006670
 8003e6c:	2601      	movs	r6, #1
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9609      	str	r6, [sp, #36]	; 0x24
 8003e72:	931e      	str	r3, [sp, #120]	; 0x78
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	2200      	movs	r2, #0
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	4699      	mov	r9, r3
 8003e7e:	2312      	movs	r3, #18
 8003e80:	921f      	str	r2, [sp, #124]	; 0x7c
 8003e82:	e784      	b.n	8003d8e <_dtoa_r+0x246>
 8003e84:	2301      	movs	r3, #1
 8003e86:	9309      	str	r3, [sp, #36]	; 0x24
 8003e88:	e7f4      	b.n	8003e74 <_dtoa_r+0x32c>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	4699      	mov	r9, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	e7f5      	b.n	8003e80 <_dtoa_r+0x338>
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	0049      	lsls	r1, r1, #1
 8003e98:	3201      	adds	r2, #1
 8003e9a:	606a      	str	r2, [r5, #4]
 8003e9c:	e77b      	b.n	8003d96 <_dtoa_r+0x24e>
 8003e9e:	2502      	movs	r5, #2
 8003ea0:	e7ac      	b.n	8003dfc <_dtoa_r+0x2b4>
 8003ea2:	07f1      	lsls	r1, r6, #31
 8003ea4:	d508      	bpl.n	8003eb8 <_dtoa_r+0x370>
 8003ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eae:	f7fc fb0f 	bl	80004d0 <__aeabi_dmul>
 8003eb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	1076      	asrs	r6, r6, #1
 8003eba:	3708      	adds	r7, #8
 8003ebc:	e79f      	b.n	8003dfe <_dtoa_r+0x2b6>
 8003ebe:	f000 80a5 	beq.w	800400c <_dtoa_r+0x4c4>
 8003ec2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ec6:	f1cb 0600 	rsb	r6, fp, #0
 8003eca:	4ba2      	ldr	r3, [pc, #648]	; (8004154 <_dtoa_r+0x60c>)
 8003ecc:	f006 020f 	and.w	r2, r6, #15
 8003ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fafa 	bl	80004d0 <__aeabi_dmul>
 8003edc:	2502      	movs	r5, #2
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ee4:	4f9c      	ldr	r7, [pc, #624]	; (8004158 <_dtoa_r+0x610>)
 8003ee6:	1136      	asrs	r6, r6, #4
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	f040 8084 	bne.w	8003ff6 <_dtoa_r+0x4ae>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d18d      	bne.n	8003e0e <_dtoa_r+0x2c6>
 8003ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 808b 	beq.w	8004010 <_dtoa_r+0x4c8>
 8003efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003efe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f06:	2200      	movs	r2, #0
 8003f08:	4b94      	ldr	r3, [pc, #592]	; (800415c <_dtoa_r+0x614>)
 8003f0a:	f7fc fd53 	bl	80009b4 <__aeabi_dcmplt>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d07e      	beq.n	8004010 <_dtoa_r+0x4c8>
 8003f12:	f1b9 0f00 	cmp.w	r9, #0
 8003f16:	d07b      	beq.n	8004010 <_dtoa_r+0x4c8>
 8003f18:	9b04      	ldr	r3, [sp, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dd37      	ble.n	8003f8e <_dtoa_r+0x446>
 8003f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f22:	2200      	movs	r2, #0
 8003f24:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <_dtoa_r+0x618>)
 8003f26:	f7fc fad3 	bl	80004d0 <__aeabi_dmul>
 8003f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f2e:	9e04      	ldr	r6, [sp, #16]
 8003f30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003f34:	3501      	adds	r5, #1
 8003f36:	4628      	mov	r0, r5
 8003f38:	f7fc fa64 	bl	8000404 <__aeabi_i2d>
 8003f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f40:	f7fc fac6 	bl	80004d0 <__aeabi_dmul>
 8003f44:	4b87      	ldr	r3, [pc, #540]	; (8004164 <_dtoa_r+0x61c>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	f7fc f910 	bl	800016c <__adddf3>
 8003f4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f52:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003f56:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f58:	2e00      	cmp	r6, #0
 8003f5a:	d15c      	bne.n	8004016 <_dtoa_r+0x4ce>
 8003f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	4b81      	ldr	r3, [pc, #516]	; (8004168 <_dtoa_r+0x620>)
 8003f64:	f7fc f900 	bl	8000168 <__aeabi_dsub>
 8003f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f70:	f7fc fd3e 	bl	80009f0 <__aeabi_dcmpgt>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f040 82f7 	bne.w	8004568 <_dtoa_r+0xa20>
 8003f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f84:	f7fc fd16 	bl	80009b4 <__aeabi_dcmplt>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f040 82eb 	bne.w	8004564 <_dtoa_r+0xa1c>
 8003f8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003f92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f2c0 8150 	blt.w	800423e <_dtoa_r+0x6f6>
 8003f9e:	f1bb 0f0e 	cmp.w	fp, #14
 8003fa2:	f300 814c 	bgt.w	800423e <_dtoa_r+0x6f6>
 8003fa6:	4b6b      	ldr	r3, [pc, #428]	; (8004154 <_dtoa_r+0x60c>)
 8003fa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f280 80da 	bge.w	8004170 <_dtoa_r+0x628>
 8003fbc:	f1b9 0f00 	cmp.w	r9, #0
 8003fc0:	f300 80d6 	bgt.w	8004170 <_dtoa_r+0x628>
 8003fc4:	f040 82cd 	bne.w	8004562 <_dtoa_r+0xa1a>
 8003fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4b66      	ldr	r3, [pc, #408]	; (8004168 <_dtoa_r+0x620>)
 8003fd0:	f7fc fa7e 	bl	80004d0 <__aeabi_dmul>
 8003fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fd8:	f7fc fd00 	bl	80009dc <__aeabi_dcmpge>
 8003fdc:	464e      	mov	r6, r9
 8003fde:	464f      	mov	r7, r9
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	f040 82a4 	bne.w	800452e <_dtoa_r+0x9e6>
 8003fe6:	9b06      	ldr	r3, [sp, #24]
 8003fe8:	9a06      	ldr	r2, [sp, #24]
 8003fea:	1c5d      	adds	r5, r3, #1
 8003fec:	2331      	movs	r3, #49	; 0x31
 8003fee:	f10b 0b01 	add.w	fp, fp, #1
 8003ff2:	7013      	strb	r3, [r2, #0]
 8003ff4:	e29f      	b.n	8004536 <_dtoa_r+0x9ee>
 8003ff6:	07f2      	lsls	r2, r6, #31
 8003ff8:	d505      	bpl.n	8004006 <_dtoa_r+0x4be>
 8003ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ffe:	f7fc fa67 	bl	80004d0 <__aeabi_dmul>
 8004002:	2301      	movs	r3, #1
 8004004:	3501      	adds	r5, #1
 8004006:	1076      	asrs	r6, r6, #1
 8004008:	3708      	adds	r7, #8
 800400a:	e76d      	b.n	8003ee8 <_dtoa_r+0x3a0>
 800400c:	2502      	movs	r5, #2
 800400e:	e770      	b.n	8003ef2 <_dtoa_r+0x3aa>
 8004010:	465f      	mov	r7, fp
 8004012:	464e      	mov	r6, r9
 8004014:	e78f      	b.n	8003f36 <_dtoa_r+0x3ee>
 8004016:	9a06      	ldr	r2, [sp, #24]
 8004018:	4b4e      	ldr	r3, [pc, #312]	; (8004154 <_dtoa_r+0x60c>)
 800401a:	4432      	add	r2, r6
 800401c:	9211      	str	r2, [sp, #68]	; 0x44
 800401e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004020:	1e71      	subs	r1, r6, #1
 8004022:	2a00      	cmp	r2, #0
 8004024:	d048      	beq.n	80040b8 <_dtoa_r+0x570>
 8004026:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	2000      	movs	r0, #0
 8004030:	494e      	ldr	r1, [pc, #312]	; (800416c <_dtoa_r+0x624>)
 8004032:	f7fc fb77 	bl	8000724 <__aeabi_ddiv>
 8004036:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800403a:	f7fc f895 	bl	8000168 <__aeabi_dsub>
 800403e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004042:	9d06      	ldr	r5, [sp, #24]
 8004044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004048:	f7fc fcf2 	bl	8000a30 <__aeabi_d2iz>
 800404c:	4606      	mov	r6, r0
 800404e:	f7fc f9d9 	bl	8000404 <__aeabi_i2d>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800405a:	f7fc f885 	bl	8000168 <__aeabi_dsub>
 800405e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004062:	3630      	adds	r6, #48	; 0x30
 8004064:	f805 6b01 	strb.w	r6, [r5], #1
 8004068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800406c:	f7fc fca2 	bl	80009b4 <__aeabi_dcmplt>
 8004070:	2800      	cmp	r0, #0
 8004072:	d164      	bne.n	800413e <_dtoa_r+0x5f6>
 8004074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004078:	2000      	movs	r0, #0
 800407a:	4938      	ldr	r1, [pc, #224]	; (800415c <_dtoa_r+0x614>)
 800407c:	f7fc f874 	bl	8000168 <__aeabi_dsub>
 8004080:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004084:	f7fc fc96 	bl	80009b4 <__aeabi_dcmplt>
 8004088:	2800      	cmp	r0, #0
 800408a:	f040 80b9 	bne.w	8004200 <_dtoa_r+0x6b8>
 800408e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004090:	429d      	cmp	r5, r3
 8004092:	f43f af7c 	beq.w	8003f8e <_dtoa_r+0x446>
 8004096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800409a:	2200      	movs	r2, #0
 800409c:	4b30      	ldr	r3, [pc, #192]	; (8004160 <_dtoa_r+0x618>)
 800409e:	f7fc fa17 	bl	80004d0 <__aeabi_dmul>
 80040a2:	2200      	movs	r2, #0
 80040a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040ac:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <_dtoa_r+0x618>)
 80040ae:	f7fc fa0f 	bl	80004d0 <__aeabi_dmul>
 80040b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040b6:	e7c5      	b.n	8004044 <_dtoa_r+0x4fc>
 80040b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80040bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040c4:	f7fc fa04 	bl	80004d0 <__aeabi_dmul>
 80040c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040cc:	9d06      	ldr	r5, [sp, #24]
 80040ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040d2:	f7fc fcad 	bl	8000a30 <__aeabi_d2iz>
 80040d6:	4606      	mov	r6, r0
 80040d8:	f7fc f994 	bl	8000404 <__aeabi_i2d>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e4:	f7fc f840 	bl	8000168 <__aeabi_dsub>
 80040e8:	3630      	adds	r6, #48	; 0x30
 80040ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040ec:	f805 6b01 	strb.w	r6, [r5], #1
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	d124      	bne.n	8004146 <_dtoa_r+0x5fe>
 80040fc:	4b1b      	ldr	r3, [pc, #108]	; (800416c <_dtoa_r+0x624>)
 80040fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004102:	f7fc f833 	bl	800016c <__adddf3>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800410e:	f7fc fc6f 	bl	80009f0 <__aeabi_dcmpgt>
 8004112:	2800      	cmp	r0, #0
 8004114:	d174      	bne.n	8004200 <_dtoa_r+0x6b8>
 8004116:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800411a:	2000      	movs	r0, #0
 800411c:	4913      	ldr	r1, [pc, #76]	; (800416c <_dtoa_r+0x624>)
 800411e:	f7fc f823 	bl	8000168 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800412a:	f7fc fc43 	bl	80009b4 <__aeabi_dcmplt>
 800412e:	2800      	cmp	r0, #0
 8004130:	f43f af2d 	beq.w	8003f8e <_dtoa_r+0x446>
 8004134:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004138:	1e6a      	subs	r2, r5, #1
 800413a:	2b30      	cmp	r3, #48	; 0x30
 800413c:	d001      	beq.n	8004142 <_dtoa_r+0x5fa>
 800413e:	46bb      	mov	fp, r7
 8004140:	e04d      	b.n	80041de <_dtoa_r+0x696>
 8004142:	4615      	mov	r5, r2
 8004144:	e7f6      	b.n	8004134 <_dtoa_r+0x5ec>
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <_dtoa_r+0x618>)
 8004148:	f7fc f9c2 	bl	80004d0 <__aeabi_dmul>
 800414c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004150:	e7bd      	b.n	80040ce <_dtoa_r+0x586>
 8004152:	bf00      	nop
 8004154:	08006698 	.word	0x08006698
 8004158:	08006670 	.word	0x08006670
 800415c:	3ff00000 	.word	0x3ff00000
 8004160:	40240000 	.word	0x40240000
 8004164:	401c0000 	.word	0x401c0000
 8004168:	40140000 	.word	0x40140000
 800416c:	3fe00000 	.word	0x3fe00000
 8004170:	9d06      	ldr	r5, [sp, #24]
 8004172:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800417a:	4630      	mov	r0, r6
 800417c:	4639      	mov	r1, r7
 800417e:	f7fc fad1 	bl	8000724 <__aeabi_ddiv>
 8004182:	f7fc fc55 	bl	8000a30 <__aeabi_d2iz>
 8004186:	4680      	mov	r8, r0
 8004188:	f7fc f93c 	bl	8000404 <__aeabi_i2d>
 800418c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004190:	f7fc f99e 	bl	80004d0 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4630      	mov	r0, r6
 800419a:	4639      	mov	r1, r7
 800419c:	f7fb ffe4 	bl	8000168 <__aeabi_dsub>
 80041a0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80041a4:	f805 6b01 	strb.w	r6, [r5], #1
 80041a8:	9e06      	ldr	r6, [sp, #24]
 80041aa:	4602      	mov	r2, r0
 80041ac:	1bae      	subs	r6, r5, r6
 80041ae:	45b1      	cmp	r9, r6
 80041b0:	460b      	mov	r3, r1
 80041b2:	d137      	bne.n	8004224 <_dtoa_r+0x6dc>
 80041b4:	f7fb ffda 	bl	800016c <__adddf3>
 80041b8:	4606      	mov	r6, r0
 80041ba:	460f      	mov	r7, r1
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c4:	f7fc fbf6 	bl	80009b4 <__aeabi_dcmplt>
 80041c8:	b9c8      	cbnz	r0, 80041fe <_dtoa_r+0x6b6>
 80041ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ce:	4632      	mov	r2, r6
 80041d0:	463b      	mov	r3, r7
 80041d2:	f7fc fbe5 	bl	80009a0 <__aeabi_dcmpeq>
 80041d6:	b110      	cbz	r0, 80041de <_dtoa_r+0x696>
 80041d8:	f018 0f01 	tst.w	r8, #1
 80041dc:	d10f      	bne.n	80041fe <_dtoa_r+0x6b6>
 80041de:	4651      	mov	r1, sl
 80041e0:	4620      	mov	r0, r4
 80041e2:	f000 fd01 	bl	8004be8 <_Bfree>
 80041e6:	2300      	movs	r3, #0
 80041e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041ea:	702b      	strb	r3, [r5, #0]
 80041ec:	f10b 0301 	add.w	r3, fp, #1
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f43f acec 	beq.w	8003bd2 <_dtoa_r+0x8a>
 80041fa:	601d      	str	r5, [r3, #0]
 80041fc:	e4e9      	b.n	8003bd2 <_dtoa_r+0x8a>
 80041fe:	465f      	mov	r7, fp
 8004200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004204:	1e6b      	subs	r3, r5, #1
 8004206:	2a39      	cmp	r2, #57	; 0x39
 8004208:	d106      	bne.n	8004218 <_dtoa_r+0x6d0>
 800420a:	9a06      	ldr	r2, [sp, #24]
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <_dtoa_r+0x6d8>
 8004210:	2330      	movs	r3, #48	; 0x30
 8004212:	7013      	strb	r3, [r2, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	3701      	adds	r7, #1
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	3201      	adds	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e78e      	b.n	800413e <_dtoa_r+0x5f6>
 8004220:	461d      	mov	r5, r3
 8004222:	e7ed      	b.n	8004200 <_dtoa_r+0x6b8>
 8004224:	2200      	movs	r2, #0
 8004226:	4bb5      	ldr	r3, [pc, #724]	; (80044fc <_dtoa_r+0x9b4>)
 8004228:	f7fc f952 	bl	80004d0 <__aeabi_dmul>
 800422c:	2200      	movs	r2, #0
 800422e:	2300      	movs	r3, #0
 8004230:	4606      	mov	r6, r0
 8004232:	460f      	mov	r7, r1
 8004234:	f7fc fbb4 	bl	80009a0 <__aeabi_dcmpeq>
 8004238:	2800      	cmp	r0, #0
 800423a:	d09c      	beq.n	8004176 <_dtoa_r+0x62e>
 800423c:	e7cf      	b.n	80041de <_dtoa_r+0x696>
 800423e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004240:	2a00      	cmp	r2, #0
 8004242:	f000 8129 	beq.w	8004498 <_dtoa_r+0x950>
 8004246:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004248:	2a01      	cmp	r2, #1
 800424a:	f300 810e 	bgt.w	800446a <_dtoa_r+0x922>
 800424e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004250:	2a00      	cmp	r2, #0
 8004252:	f000 8106 	beq.w	8004462 <_dtoa_r+0x91a>
 8004256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800425a:	4645      	mov	r5, r8
 800425c:	9e08      	ldr	r6, [sp, #32]
 800425e:	9a07      	ldr	r2, [sp, #28]
 8004260:	2101      	movs	r1, #1
 8004262:	441a      	add	r2, r3
 8004264:	4620      	mov	r0, r4
 8004266:	4498      	add	r8, r3
 8004268:	9207      	str	r2, [sp, #28]
 800426a:	f000 fd5d 	bl	8004d28 <__i2b>
 800426e:	4607      	mov	r7, r0
 8004270:	2d00      	cmp	r5, #0
 8004272:	dd0b      	ble.n	800428c <_dtoa_r+0x744>
 8004274:	9b07      	ldr	r3, [sp, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	dd08      	ble.n	800428c <_dtoa_r+0x744>
 800427a:	42ab      	cmp	r3, r5
 800427c:	bfa8      	it	ge
 800427e:	462b      	movge	r3, r5
 8004280:	9a07      	ldr	r2, [sp, #28]
 8004282:	eba8 0803 	sub.w	r8, r8, r3
 8004286:	1aed      	subs	r5, r5, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	9307      	str	r3, [sp, #28]
 800428c:	9b08      	ldr	r3, [sp, #32]
 800428e:	b1fb      	cbz	r3, 80042d0 <_dtoa_r+0x788>
 8004290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8104 	beq.w	80044a0 <_dtoa_r+0x958>
 8004298:	2e00      	cmp	r6, #0
 800429a:	dd11      	ble.n	80042c0 <_dtoa_r+0x778>
 800429c:	4639      	mov	r1, r7
 800429e:	4632      	mov	r2, r6
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 fdd7 	bl	8004e54 <__pow5mult>
 80042a6:	4652      	mov	r2, sl
 80042a8:	4601      	mov	r1, r0
 80042aa:	4607      	mov	r7, r0
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fd44 	bl	8004d3a <__multiply>
 80042b2:	4651      	mov	r1, sl
 80042b4:	900a      	str	r0, [sp, #40]	; 0x28
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 fc96 	bl	8004be8 <_Bfree>
 80042bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042be:	469a      	mov	sl, r3
 80042c0:	9b08      	ldr	r3, [sp, #32]
 80042c2:	1b9a      	subs	r2, r3, r6
 80042c4:	d004      	beq.n	80042d0 <_dtoa_r+0x788>
 80042c6:	4651      	mov	r1, sl
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fdc3 	bl	8004e54 <__pow5mult>
 80042ce:	4682      	mov	sl, r0
 80042d0:	2101      	movs	r1, #1
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fd28 	bl	8004d28 <__i2b>
 80042d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042da:	4606      	mov	r6, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f340 80e1 	ble.w	80044a4 <_dtoa_r+0x95c>
 80042e2:	461a      	mov	r2, r3
 80042e4:	4601      	mov	r1, r0
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 fdb4 	bl	8004e54 <__pow5mult>
 80042ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042ee:	4606      	mov	r6, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f340 80da 	ble.w	80044aa <_dtoa_r+0x962>
 80042f6:	2300      	movs	r3, #0
 80042f8:	9308      	str	r3, [sp, #32]
 80042fa:	6933      	ldr	r3, [r6, #16]
 80042fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004300:	6918      	ldr	r0, [r3, #16]
 8004302:	f000 fcc3 	bl	8004c8c <__hi0bits>
 8004306:	f1c0 0020 	rsb	r0, r0, #32
 800430a:	9b07      	ldr	r3, [sp, #28]
 800430c:	4418      	add	r0, r3
 800430e:	f010 001f 	ands.w	r0, r0, #31
 8004312:	f000 80f0 	beq.w	80044f6 <_dtoa_r+0x9ae>
 8004316:	f1c0 0320 	rsb	r3, r0, #32
 800431a:	2b04      	cmp	r3, #4
 800431c:	f340 80e2 	ble.w	80044e4 <_dtoa_r+0x99c>
 8004320:	9b07      	ldr	r3, [sp, #28]
 8004322:	f1c0 001c 	rsb	r0, r0, #28
 8004326:	4480      	add	r8, r0
 8004328:	4405      	add	r5, r0
 800432a:	4403      	add	r3, r0
 800432c:	9307      	str	r3, [sp, #28]
 800432e:	f1b8 0f00 	cmp.w	r8, #0
 8004332:	dd05      	ble.n	8004340 <_dtoa_r+0x7f8>
 8004334:	4651      	mov	r1, sl
 8004336:	4642      	mov	r2, r8
 8004338:	4620      	mov	r0, r4
 800433a:	f000 fdd9 	bl	8004ef0 <__lshift>
 800433e:	4682      	mov	sl, r0
 8004340:	9b07      	ldr	r3, [sp, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	dd05      	ble.n	8004352 <_dtoa_r+0x80a>
 8004346:	4631      	mov	r1, r6
 8004348:	461a      	mov	r2, r3
 800434a:	4620      	mov	r0, r4
 800434c:	f000 fdd0 	bl	8004ef0 <__lshift>
 8004350:	4606      	mov	r6, r0
 8004352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80d3 	beq.w	8004500 <_dtoa_r+0x9b8>
 800435a:	4631      	mov	r1, r6
 800435c:	4650      	mov	r0, sl
 800435e:	f000 fe18 	bl	8004f92 <__mcmp>
 8004362:	2800      	cmp	r0, #0
 8004364:	f280 80cc 	bge.w	8004500 <_dtoa_r+0x9b8>
 8004368:	2300      	movs	r3, #0
 800436a:	4651      	mov	r1, sl
 800436c:	220a      	movs	r2, #10
 800436e:	4620      	mov	r0, r4
 8004370:	f000 fc51 	bl	8004c16 <__multadd>
 8004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004376:	f10b 3bff 	add.w	fp, fp, #4294967295
 800437a:	4682      	mov	sl, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 81a9 	beq.w	80046d4 <_dtoa_r+0xb8c>
 8004382:	2300      	movs	r3, #0
 8004384:	4639      	mov	r1, r7
 8004386:	220a      	movs	r2, #10
 8004388:	4620      	mov	r0, r4
 800438a:	f000 fc44 	bl	8004c16 <__multadd>
 800438e:	9b04      	ldr	r3, [sp, #16]
 8004390:	4607      	mov	r7, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	dc03      	bgt.n	800439e <_dtoa_r+0x856>
 8004396:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004398:	2b02      	cmp	r3, #2
 800439a:	f300 80b9 	bgt.w	8004510 <_dtoa_r+0x9c8>
 800439e:	2d00      	cmp	r5, #0
 80043a0:	dd05      	ble.n	80043ae <_dtoa_r+0x866>
 80043a2:	4639      	mov	r1, r7
 80043a4:	462a      	mov	r2, r5
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 fda2 	bl	8004ef0 <__lshift>
 80043ac:	4607      	mov	r7, r0
 80043ae:	9b08      	ldr	r3, [sp, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8110 	beq.w	80045d6 <_dtoa_r+0xa8e>
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 fbe1 	bl	8004b80 <_Balloc>
 80043be:	4605      	mov	r5, r0
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	f107 010c 	add.w	r1, r7, #12
 80043c6:	3202      	adds	r2, #2
 80043c8:	0092      	lsls	r2, r2, #2
 80043ca:	300c      	adds	r0, #12
 80043cc:	f000 fbc0 	bl	8004b50 <memcpy>
 80043d0:	2201      	movs	r2, #1
 80043d2:	4629      	mov	r1, r5
 80043d4:	4620      	mov	r0, r4
 80043d6:	f000 fd8b 	bl	8004ef0 <__lshift>
 80043da:	9707      	str	r7, [sp, #28]
 80043dc:	4607      	mov	r7, r0
 80043de:	9b02      	ldr	r3, [sp, #8]
 80043e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	9308      	str	r3, [sp, #32]
 80043ea:	4631      	mov	r1, r6
 80043ec:	4650      	mov	r0, sl
 80043ee:	f7ff fb1f 	bl	8003a30 <quorem>
 80043f2:	9907      	ldr	r1, [sp, #28]
 80043f4:	4605      	mov	r5, r0
 80043f6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80043fa:	4650      	mov	r0, sl
 80043fc:	f000 fdc9 	bl	8004f92 <__mcmp>
 8004400:	463a      	mov	r2, r7
 8004402:	9002      	str	r0, [sp, #8]
 8004404:	4631      	mov	r1, r6
 8004406:	4620      	mov	r0, r4
 8004408:	f000 fddd 	bl	8004fc6 <__mdiff>
 800440c:	68c3      	ldr	r3, [r0, #12]
 800440e:	4602      	mov	r2, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 80e2 	bne.w	80045da <_dtoa_r+0xa92>
 8004416:	4601      	mov	r1, r0
 8004418:	9009      	str	r0, [sp, #36]	; 0x24
 800441a:	4650      	mov	r0, sl
 800441c:	f000 fdb9 	bl	8004f92 <__mcmp>
 8004420:	4603      	mov	r3, r0
 8004422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004424:	4611      	mov	r1, r2
 8004426:	4620      	mov	r0, r4
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	f000 fbdd 	bl	8004be8 <_Bfree>
 800442e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 80d4 	bne.w	80045de <_dtoa_r+0xa96>
 8004436:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004438:	2a00      	cmp	r2, #0
 800443a:	f040 80d0 	bne.w	80045de <_dtoa_r+0xa96>
 800443e:	9a08      	ldr	r2, [sp, #32]
 8004440:	2a00      	cmp	r2, #0
 8004442:	f040 80cc 	bne.w	80045de <_dtoa_r+0xa96>
 8004446:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800444a:	f000 80e8 	beq.w	800461e <_dtoa_r+0xad6>
 800444e:	9b02      	ldr	r3, [sp, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	dd01      	ble.n	8004458 <_dtoa_r+0x910>
 8004454:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004458:	f108 0501 	add.w	r5, r8, #1
 800445c:	f888 9000 	strb.w	r9, [r8]
 8004460:	e06b      	b.n	800453a <_dtoa_r+0x9f2>
 8004462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004464:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004468:	e6f7      	b.n	800425a <_dtoa_r+0x712>
 800446a:	9b08      	ldr	r3, [sp, #32]
 800446c:	f109 36ff 	add.w	r6, r9, #4294967295
 8004470:	42b3      	cmp	r3, r6
 8004472:	bfb7      	itett	lt
 8004474:	9b08      	ldrlt	r3, [sp, #32]
 8004476:	1b9e      	subge	r6, r3, r6
 8004478:	1af2      	sublt	r2, r6, r3
 800447a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800447c:	bfbf      	itttt	lt
 800447e:	9608      	strlt	r6, [sp, #32]
 8004480:	189b      	addlt	r3, r3, r2
 8004482:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004484:	2600      	movlt	r6, #0
 8004486:	f1b9 0f00 	cmp.w	r9, #0
 800448a:	bfb9      	ittee	lt
 800448c:	eba8 0509 	sublt.w	r5, r8, r9
 8004490:	2300      	movlt	r3, #0
 8004492:	4645      	movge	r5, r8
 8004494:	464b      	movge	r3, r9
 8004496:	e6e2      	b.n	800425e <_dtoa_r+0x716>
 8004498:	9e08      	ldr	r6, [sp, #32]
 800449a:	4645      	mov	r5, r8
 800449c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800449e:	e6e7      	b.n	8004270 <_dtoa_r+0x728>
 80044a0:	9a08      	ldr	r2, [sp, #32]
 80044a2:	e710      	b.n	80042c6 <_dtoa_r+0x77e>
 80044a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	dc18      	bgt.n	80044dc <_dtoa_r+0x994>
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	b9b3      	cbnz	r3, 80044dc <_dtoa_r+0x994>
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b4:	b9a3      	cbnz	r3, 80044e0 <_dtoa_r+0x998>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044bc:	0d1b      	lsrs	r3, r3, #20
 80044be:	051b      	lsls	r3, r3, #20
 80044c0:	b12b      	cbz	r3, 80044ce <_dtoa_r+0x986>
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	f108 0801 	add.w	r8, r8, #1
 80044c8:	3301      	adds	r3, #1
 80044ca:	9307      	str	r3, [sp, #28]
 80044cc:	2301      	movs	r3, #1
 80044ce:	9308      	str	r3, [sp, #32]
 80044d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f af11 	bne.w	80042fa <_dtoa_r+0x7b2>
 80044d8:	2001      	movs	r0, #1
 80044da:	e716      	b.n	800430a <_dtoa_r+0x7c2>
 80044dc:	2300      	movs	r3, #0
 80044de:	e7f6      	b.n	80044ce <_dtoa_r+0x986>
 80044e0:	9b02      	ldr	r3, [sp, #8]
 80044e2:	e7f4      	b.n	80044ce <_dtoa_r+0x986>
 80044e4:	f43f af23 	beq.w	800432e <_dtoa_r+0x7e6>
 80044e8:	9a07      	ldr	r2, [sp, #28]
 80044ea:	331c      	adds	r3, #28
 80044ec:	441a      	add	r2, r3
 80044ee:	4498      	add	r8, r3
 80044f0:	441d      	add	r5, r3
 80044f2:	4613      	mov	r3, r2
 80044f4:	e71a      	b.n	800432c <_dtoa_r+0x7e4>
 80044f6:	4603      	mov	r3, r0
 80044f8:	e7f6      	b.n	80044e8 <_dtoa_r+0x9a0>
 80044fa:	bf00      	nop
 80044fc:	40240000 	.word	0x40240000
 8004500:	f1b9 0f00 	cmp.w	r9, #0
 8004504:	dc33      	bgt.n	800456e <_dtoa_r+0xa26>
 8004506:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004508:	2b02      	cmp	r3, #2
 800450a:	dd30      	ble.n	800456e <_dtoa_r+0xa26>
 800450c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004510:	9b04      	ldr	r3, [sp, #16]
 8004512:	b963      	cbnz	r3, 800452e <_dtoa_r+0x9e6>
 8004514:	4631      	mov	r1, r6
 8004516:	2205      	movs	r2, #5
 8004518:	4620      	mov	r0, r4
 800451a:	f000 fb7c 	bl	8004c16 <__multadd>
 800451e:	4601      	mov	r1, r0
 8004520:	4606      	mov	r6, r0
 8004522:	4650      	mov	r0, sl
 8004524:	f000 fd35 	bl	8004f92 <__mcmp>
 8004528:	2800      	cmp	r0, #0
 800452a:	f73f ad5c 	bgt.w	8003fe6 <_dtoa_r+0x49e>
 800452e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004530:	9d06      	ldr	r5, [sp, #24]
 8004532:	ea6f 0b03 	mvn.w	fp, r3
 8004536:	2300      	movs	r3, #0
 8004538:	9307      	str	r3, [sp, #28]
 800453a:	4631      	mov	r1, r6
 800453c:	4620      	mov	r0, r4
 800453e:	f000 fb53 	bl	8004be8 <_Bfree>
 8004542:	2f00      	cmp	r7, #0
 8004544:	f43f ae4b 	beq.w	80041de <_dtoa_r+0x696>
 8004548:	9b07      	ldr	r3, [sp, #28]
 800454a:	b12b      	cbz	r3, 8004558 <_dtoa_r+0xa10>
 800454c:	42bb      	cmp	r3, r7
 800454e:	d003      	beq.n	8004558 <_dtoa_r+0xa10>
 8004550:	4619      	mov	r1, r3
 8004552:	4620      	mov	r0, r4
 8004554:	f000 fb48 	bl	8004be8 <_Bfree>
 8004558:	4639      	mov	r1, r7
 800455a:	4620      	mov	r0, r4
 800455c:	f000 fb44 	bl	8004be8 <_Bfree>
 8004560:	e63d      	b.n	80041de <_dtoa_r+0x696>
 8004562:	2600      	movs	r6, #0
 8004564:	4637      	mov	r7, r6
 8004566:	e7e2      	b.n	800452e <_dtoa_r+0x9e6>
 8004568:	46bb      	mov	fp, r7
 800456a:	4637      	mov	r7, r6
 800456c:	e53b      	b.n	8003fe6 <_dtoa_r+0x49e>
 800456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004570:	f8cd 9010 	str.w	r9, [sp, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f47f af12 	bne.w	800439e <_dtoa_r+0x856>
 800457a:	9d06      	ldr	r5, [sp, #24]
 800457c:	4631      	mov	r1, r6
 800457e:	4650      	mov	r0, sl
 8004580:	f7ff fa56 	bl	8003a30 <quorem>
 8004584:	9b06      	ldr	r3, [sp, #24]
 8004586:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800458a:	f805 9b01 	strb.w	r9, [r5], #1
 800458e:	9a04      	ldr	r2, [sp, #16]
 8004590:	1aeb      	subs	r3, r5, r3
 8004592:	429a      	cmp	r2, r3
 8004594:	f300 8081 	bgt.w	800469a <_dtoa_r+0xb52>
 8004598:	9b06      	ldr	r3, [sp, #24]
 800459a:	2a01      	cmp	r2, #1
 800459c:	bfac      	ite	ge
 800459e:	189b      	addge	r3, r3, r2
 80045a0:	3301      	addlt	r3, #1
 80045a2:	4698      	mov	r8, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	9307      	str	r3, [sp, #28]
 80045a8:	4651      	mov	r1, sl
 80045aa:	2201      	movs	r2, #1
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 fc9f 	bl	8004ef0 <__lshift>
 80045b2:	4631      	mov	r1, r6
 80045b4:	4682      	mov	sl, r0
 80045b6:	f000 fcec 	bl	8004f92 <__mcmp>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	dc34      	bgt.n	8004628 <_dtoa_r+0xae0>
 80045be:	d102      	bne.n	80045c6 <_dtoa_r+0xa7e>
 80045c0:	f019 0f01 	tst.w	r9, #1
 80045c4:	d130      	bne.n	8004628 <_dtoa_r+0xae0>
 80045c6:	4645      	mov	r5, r8
 80045c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045cc:	1e6a      	subs	r2, r5, #1
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d1b3      	bne.n	800453a <_dtoa_r+0x9f2>
 80045d2:	4615      	mov	r5, r2
 80045d4:	e7f8      	b.n	80045c8 <_dtoa_r+0xa80>
 80045d6:	4638      	mov	r0, r7
 80045d8:	e6ff      	b.n	80043da <_dtoa_r+0x892>
 80045da:	2301      	movs	r3, #1
 80045dc:	e722      	b.n	8004424 <_dtoa_r+0x8dc>
 80045de:	9a02      	ldr	r2, [sp, #8]
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	db04      	blt.n	80045ee <_dtoa_r+0xaa6>
 80045e4:	d128      	bne.n	8004638 <_dtoa_r+0xaf0>
 80045e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80045e8:	bb32      	cbnz	r2, 8004638 <_dtoa_r+0xaf0>
 80045ea:	9a08      	ldr	r2, [sp, #32]
 80045ec:	bb22      	cbnz	r2, 8004638 <_dtoa_r+0xaf0>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f77f af32 	ble.w	8004458 <_dtoa_r+0x910>
 80045f4:	4651      	mov	r1, sl
 80045f6:	2201      	movs	r2, #1
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fc79 	bl	8004ef0 <__lshift>
 80045fe:	4631      	mov	r1, r6
 8004600:	4682      	mov	sl, r0
 8004602:	f000 fcc6 	bl	8004f92 <__mcmp>
 8004606:	2800      	cmp	r0, #0
 8004608:	dc05      	bgt.n	8004616 <_dtoa_r+0xace>
 800460a:	f47f af25 	bne.w	8004458 <_dtoa_r+0x910>
 800460e:	f019 0f01 	tst.w	r9, #1
 8004612:	f43f af21 	beq.w	8004458 <_dtoa_r+0x910>
 8004616:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800461a:	f47f af1b 	bne.w	8004454 <_dtoa_r+0x90c>
 800461e:	2339      	movs	r3, #57	; 0x39
 8004620:	f108 0801 	add.w	r8, r8, #1
 8004624:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004628:	4645      	mov	r5, r8
 800462a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800462e:	1e6a      	subs	r2, r5, #1
 8004630:	2b39      	cmp	r3, #57	; 0x39
 8004632:	d03a      	beq.n	80046aa <_dtoa_r+0xb62>
 8004634:	3301      	adds	r3, #1
 8004636:	e03f      	b.n	80046b8 <_dtoa_r+0xb70>
 8004638:	2b00      	cmp	r3, #0
 800463a:	f108 0501 	add.w	r5, r8, #1
 800463e:	dd05      	ble.n	800464c <_dtoa_r+0xb04>
 8004640:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004644:	d0eb      	beq.n	800461e <_dtoa_r+0xad6>
 8004646:	f109 0901 	add.w	r9, r9, #1
 800464a:	e707      	b.n	800445c <_dtoa_r+0x914>
 800464c:	9b06      	ldr	r3, [sp, #24]
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	1aeb      	subs	r3, r5, r3
 8004652:	4293      	cmp	r3, r2
 8004654:	46a8      	mov	r8, r5
 8004656:	f805 9c01 	strb.w	r9, [r5, #-1]
 800465a:	d0a5      	beq.n	80045a8 <_dtoa_r+0xa60>
 800465c:	4651      	mov	r1, sl
 800465e:	2300      	movs	r3, #0
 8004660:	220a      	movs	r2, #10
 8004662:	4620      	mov	r0, r4
 8004664:	f000 fad7 	bl	8004c16 <__multadd>
 8004668:	9b07      	ldr	r3, [sp, #28]
 800466a:	4682      	mov	sl, r0
 800466c:	42bb      	cmp	r3, r7
 800466e:	f04f 020a 	mov.w	r2, #10
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	9907      	ldr	r1, [sp, #28]
 8004678:	4620      	mov	r0, r4
 800467a:	d104      	bne.n	8004686 <_dtoa_r+0xb3e>
 800467c:	f000 facb 	bl	8004c16 <__multadd>
 8004680:	9007      	str	r0, [sp, #28]
 8004682:	4607      	mov	r7, r0
 8004684:	e6b1      	b.n	80043ea <_dtoa_r+0x8a2>
 8004686:	f000 fac6 	bl	8004c16 <__multadd>
 800468a:	2300      	movs	r3, #0
 800468c:	9007      	str	r0, [sp, #28]
 800468e:	220a      	movs	r2, #10
 8004690:	4639      	mov	r1, r7
 8004692:	4620      	mov	r0, r4
 8004694:	f000 fabf 	bl	8004c16 <__multadd>
 8004698:	e7f3      	b.n	8004682 <_dtoa_r+0xb3a>
 800469a:	4651      	mov	r1, sl
 800469c:	2300      	movs	r3, #0
 800469e:	220a      	movs	r2, #10
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 fab8 	bl	8004c16 <__multadd>
 80046a6:	4682      	mov	sl, r0
 80046a8:	e768      	b.n	800457c <_dtoa_r+0xa34>
 80046aa:	9b06      	ldr	r3, [sp, #24]
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d105      	bne.n	80046bc <_dtoa_r+0xb74>
 80046b0:	2331      	movs	r3, #49	; 0x31
 80046b2:	9a06      	ldr	r2, [sp, #24]
 80046b4:	f10b 0b01 	add.w	fp, fp, #1
 80046b8:	7013      	strb	r3, [r2, #0]
 80046ba:	e73e      	b.n	800453a <_dtoa_r+0x9f2>
 80046bc:	4615      	mov	r5, r2
 80046be:	e7b4      	b.n	800462a <_dtoa_r+0xae2>
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <_dtoa_r+0xba0>)
 80046c2:	f7ff baa3 	b.w	8003c0c <_dtoa_r+0xc4>
 80046c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f aa7d 	bne.w	8003bc8 <_dtoa_r+0x80>
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <_dtoa_r+0xba4>)
 80046d0:	f7ff ba9c 	b.w	8003c0c <_dtoa_r+0xc4>
 80046d4:	9b04      	ldr	r3, [sp, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f73f af4f 	bgt.w	800457a <_dtoa_r+0xa32>
 80046dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046de:	2b02      	cmp	r3, #2
 80046e0:	f77f af4b 	ble.w	800457a <_dtoa_r+0xa32>
 80046e4:	e714      	b.n	8004510 <_dtoa_r+0x9c8>
 80046e6:	bf00      	nop
 80046e8:	0800663d 	.word	0x0800663d
 80046ec:	0800665f 	.word	0x0800665f

080046f0 <_localeconv_r>:
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <_localeconv_r+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a18      	ldr	r0, [r3, #32]
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <_localeconv_r+0x18>)
 80046f8:	2800      	cmp	r0, #0
 80046fa:	bf08      	it	eq
 80046fc:	4618      	moveq	r0, r3
 80046fe:	30f0      	adds	r0, #240	; 0xf0
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000018 	.word	0x20000018
 8004708:	2000051c 	.word	0x2000051c

0800470c <malloc>:
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <malloc+0xc>)
 800470e:	4601      	mov	r1, r0
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f000 b803 	b.w	800471c <_malloc_r>
 8004716:	bf00      	nop
 8004718:	20000018 	.word	0x20000018

0800471c <_malloc_r>:
 800471c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004720:	f101 040b 	add.w	r4, r1, #11
 8004724:	2c16      	cmp	r4, #22
 8004726:	4681      	mov	r9, r0
 8004728:	d907      	bls.n	800473a <_malloc_r+0x1e>
 800472a:	f034 0407 	bics.w	r4, r4, #7
 800472e:	d505      	bpl.n	800473c <_malloc_r+0x20>
 8004730:	230c      	movs	r3, #12
 8004732:	f8c9 3000 	str.w	r3, [r9]
 8004736:	2600      	movs	r6, #0
 8004738:	e131      	b.n	800499e <_malloc_r+0x282>
 800473a:	2410      	movs	r4, #16
 800473c:	428c      	cmp	r4, r1
 800473e:	d3f7      	bcc.n	8004730 <_malloc_r+0x14>
 8004740:	4648      	mov	r0, r9
 8004742:	f000 fa11 	bl	8004b68 <__malloc_lock>
 8004746:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800474a:	4d9b      	ldr	r5, [pc, #620]	; (80049b8 <_malloc_r+0x29c>)
 800474c:	d236      	bcs.n	80047bc <_malloc_r+0xa0>
 800474e:	f104 0208 	add.w	r2, r4, #8
 8004752:	442a      	add	r2, r5
 8004754:	6856      	ldr	r6, [r2, #4]
 8004756:	f1a2 0108 	sub.w	r1, r2, #8
 800475a:	428e      	cmp	r6, r1
 800475c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004760:	d102      	bne.n	8004768 <_malloc_r+0x4c>
 8004762:	68d6      	ldr	r6, [r2, #12]
 8004764:	42b2      	cmp	r2, r6
 8004766:	d010      	beq.n	800478a <_malloc_r+0x6e>
 8004768:	6873      	ldr	r3, [r6, #4]
 800476a:	68f2      	ldr	r2, [r6, #12]
 800476c:	68b1      	ldr	r1, [r6, #8]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	60ca      	str	r2, [r1, #12]
 8004774:	4433      	add	r3, r6
 8004776:	6091      	str	r1, [r2, #8]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	4648      	mov	r0, r9
 8004782:	f000 f9f7 	bl	8004b74 <__malloc_unlock>
 8004786:	3608      	adds	r6, #8
 8004788:	e109      	b.n	800499e <_malloc_r+0x282>
 800478a:	3302      	adds	r3, #2
 800478c:	4a8b      	ldr	r2, [pc, #556]	; (80049bc <_malloc_r+0x2a0>)
 800478e:	692e      	ldr	r6, [r5, #16]
 8004790:	4611      	mov	r1, r2
 8004792:	4296      	cmp	r6, r2
 8004794:	d06d      	beq.n	8004872 <_malloc_r+0x156>
 8004796:	6870      	ldr	r0, [r6, #4]
 8004798:	f020 0003 	bic.w	r0, r0, #3
 800479c:	1b07      	subs	r7, r0, r4
 800479e:	2f0f      	cmp	r7, #15
 80047a0:	dd47      	ble.n	8004832 <_malloc_r+0x116>
 80047a2:	1933      	adds	r3, r6, r4
 80047a4:	f044 0401 	orr.w	r4, r4, #1
 80047a8:	6074      	str	r4, [r6, #4]
 80047aa:	616b      	str	r3, [r5, #20]
 80047ac:	612b      	str	r3, [r5, #16]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	609a      	str	r2, [r3, #8]
 80047b2:	f047 0201 	orr.w	r2, r7, #1
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	5037      	str	r7, [r6, r0]
 80047ba:	e7e1      	b.n	8004780 <_malloc_r+0x64>
 80047bc:	0a63      	lsrs	r3, r4, #9
 80047be:	d02a      	beq.n	8004816 <_malloc_r+0xfa>
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d812      	bhi.n	80047ea <_malloc_r+0xce>
 80047c4:	09a3      	lsrs	r3, r4, #6
 80047c6:	3338      	adds	r3, #56	; 0x38
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80047ce:	6856      	ldr	r6, [r2, #4]
 80047d0:	f1a2 0008 	sub.w	r0, r2, #8
 80047d4:	4286      	cmp	r6, r0
 80047d6:	d006      	beq.n	80047e6 <_malloc_r+0xca>
 80047d8:	6872      	ldr	r2, [r6, #4]
 80047da:	f022 0203 	bic.w	r2, r2, #3
 80047de:	1b11      	subs	r1, r2, r4
 80047e0:	290f      	cmp	r1, #15
 80047e2:	dd1c      	ble.n	800481e <_malloc_r+0x102>
 80047e4:	3b01      	subs	r3, #1
 80047e6:	3301      	adds	r3, #1
 80047e8:	e7d0      	b.n	800478c <_malloc_r+0x70>
 80047ea:	2b14      	cmp	r3, #20
 80047ec:	d801      	bhi.n	80047f2 <_malloc_r+0xd6>
 80047ee:	335b      	adds	r3, #91	; 0x5b
 80047f0:	e7ea      	b.n	80047c8 <_malloc_r+0xac>
 80047f2:	2b54      	cmp	r3, #84	; 0x54
 80047f4:	d802      	bhi.n	80047fc <_malloc_r+0xe0>
 80047f6:	0b23      	lsrs	r3, r4, #12
 80047f8:	336e      	adds	r3, #110	; 0x6e
 80047fa:	e7e5      	b.n	80047c8 <_malloc_r+0xac>
 80047fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004800:	d802      	bhi.n	8004808 <_malloc_r+0xec>
 8004802:	0be3      	lsrs	r3, r4, #15
 8004804:	3377      	adds	r3, #119	; 0x77
 8004806:	e7df      	b.n	80047c8 <_malloc_r+0xac>
 8004808:	f240 5254 	movw	r2, #1364	; 0x554
 800480c:	4293      	cmp	r3, r2
 800480e:	d804      	bhi.n	800481a <_malloc_r+0xfe>
 8004810:	0ca3      	lsrs	r3, r4, #18
 8004812:	337c      	adds	r3, #124	; 0x7c
 8004814:	e7d8      	b.n	80047c8 <_malloc_r+0xac>
 8004816:	233f      	movs	r3, #63	; 0x3f
 8004818:	e7d6      	b.n	80047c8 <_malloc_r+0xac>
 800481a:	237e      	movs	r3, #126	; 0x7e
 800481c:	e7d4      	b.n	80047c8 <_malloc_r+0xac>
 800481e:	2900      	cmp	r1, #0
 8004820:	68f1      	ldr	r1, [r6, #12]
 8004822:	db04      	blt.n	800482e <_malloc_r+0x112>
 8004824:	68b3      	ldr	r3, [r6, #8]
 8004826:	60d9      	str	r1, [r3, #12]
 8004828:	608b      	str	r3, [r1, #8]
 800482a:	18b3      	adds	r3, r6, r2
 800482c:	e7a4      	b.n	8004778 <_malloc_r+0x5c>
 800482e:	460e      	mov	r6, r1
 8004830:	e7d0      	b.n	80047d4 <_malloc_r+0xb8>
 8004832:	2f00      	cmp	r7, #0
 8004834:	616a      	str	r2, [r5, #20]
 8004836:	612a      	str	r2, [r5, #16]
 8004838:	db05      	blt.n	8004846 <_malloc_r+0x12a>
 800483a:	4430      	add	r0, r6
 800483c:	6843      	ldr	r3, [r0, #4]
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6043      	str	r3, [r0, #4]
 8004844:	e79c      	b.n	8004780 <_malloc_r+0x64>
 8004846:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800484a:	d244      	bcs.n	80048d6 <_malloc_r+0x1ba>
 800484c:	2201      	movs	r2, #1
 800484e:	08c0      	lsrs	r0, r0, #3
 8004850:	1087      	asrs	r7, r0, #2
 8004852:	fa02 f707 	lsl.w	r7, r2, r7
 8004856:	686a      	ldr	r2, [r5, #4]
 8004858:	3001      	adds	r0, #1
 800485a:	433a      	orrs	r2, r7
 800485c:	606a      	str	r2, [r5, #4]
 800485e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8004862:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004866:	3a08      	subs	r2, #8
 8004868:	60f2      	str	r2, [r6, #12]
 800486a:	60b7      	str	r7, [r6, #8]
 800486c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004870:	60fe      	str	r6, [r7, #12]
 8004872:	2001      	movs	r0, #1
 8004874:	109a      	asrs	r2, r3, #2
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	6868      	ldr	r0, [r5, #4]
 800487c:	4282      	cmp	r2, r0
 800487e:	f200 809f 	bhi.w	80049c0 <_malloc_r+0x2a4>
 8004882:	4202      	tst	r2, r0
 8004884:	d106      	bne.n	8004894 <_malloc_r+0x178>
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	0052      	lsls	r2, r2, #1
 800488c:	4202      	tst	r2, r0
 800488e:	f103 0304 	add.w	r3, r3, #4
 8004892:	d0fa      	beq.n	800488a <_malloc_r+0x16e>
 8004894:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004898:	46e0      	mov	r8, ip
 800489a:	469e      	mov	lr, r3
 800489c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80048a0:	4546      	cmp	r6, r8
 80048a2:	d153      	bne.n	800494c <_malloc_r+0x230>
 80048a4:	f10e 0e01 	add.w	lr, lr, #1
 80048a8:	f01e 0f03 	tst.w	lr, #3
 80048ac:	f108 0808 	add.w	r8, r8, #8
 80048b0:	d1f4      	bne.n	800489c <_malloc_r+0x180>
 80048b2:	0798      	lsls	r0, r3, #30
 80048b4:	d179      	bne.n	80049aa <_malloc_r+0x28e>
 80048b6:	686b      	ldr	r3, [r5, #4]
 80048b8:	ea23 0302 	bic.w	r3, r3, r2
 80048bc:	606b      	str	r3, [r5, #4]
 80048be:	6868      	ldr	r0, [r5, #4]
 80048c0:	0052      	lsls	r2, r2, #1
 80048c2:	4282      	cmp	r2, r0
 80048c4:	d87c      	bhi.n	80049c0 <_malloc_r+0x2a4>
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	d07a      	beq.n	80049c0 <_malloc_r+0x2a4>
 80048ca:	4673      	mov	r3, lr
 80048cc:	4202      	tst	r2, r0
 80048ce:	d1e1      	bne.n	8004894 <_malloc_r+0x178>
 80048d0:	3304      	adds	r3, #4
 80048d2:	0052      	lsls	r2, r2, #1
 80048d4:	e7fa      	b.n	80048cc <_malloc_r+0x1b0>
 80048d6:	0a42      	lsrs	r2, r0, #9
 80048d8:	2a04      	cmp	r2, #4
 80048da:	d815      	bhi.n	8004908 <_malloc_r+0x1ec>
 80048dc:	0982      	lsrs	r2, r0, #6
 80048de:	3238      	adds	r2, #56	; 0x38
 80048e0:	1c57      	adds	r7, r2, #1
 80048e2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80048e6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80048ea:	45be      	cmp	lr, r7
 80048ec:	d126      	bne.n	800493c <_malloc_r+0x220>
 80048ee:	2001      	movs	r0, #1
 80048f0:	1092      	asrs	r2, r2, #2
 80048f2:	fa00 f202 	lsl.w	r2, r0, r2
 80048f6:	6868      	ldr	r0, [r5, #4]
 80048f8:	4310      	orrs	r0, r2
 80048fa:	6068      	str	r0, [r5, #4]
 80048fc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004900:	60b7      	str	r7, [r6, #8]
 8004902:	f8ce 6008 	str.w	r6, [lr, #8]
 8004906:	e7b3      	b.n	8004870 <_malloc_r+0x154>
 8004908:	2a14      	cmp	r2, #20
 800490a:	d801      	bhi.n	8004910 <_malloc_r+0x1f4>
 800490c:	325b      	adds	r2, #91	; 0x5b
 800490e:	e7e7      	b.n	80048e0 <_malloc_r+0x1c4>
 8004910:	2a54      	cmp	r2, #84	; 0x54
 8004912:	d802      	bhi.n	800491a <_malloc_r+0x1fe>
 8004914:	0b02      	lsrs	r2, r0, #12
 8004916:	326e      	adds	r2, #110	; 0x6e
 8004918:	e7e2      	b.n	80048e0 <_malloc_r+0x1c4>
 800491a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800491e:	d802      	bhi.n	8004926 <_malloc_r+0x20a>
 8004920:	0bc2      	lsrs	r2, r0, #15
 8004922:	3277      	adds	r2, #119	; 0x77
 8004924:	e7dc      	b.n	80048e0 <_malloc_r+0x1c4>
 8004926:	f240 5754 	movw	r7, #1364	; 0x554
 800492a:	42ba      	cmp	r2, r7
 800492c:	bf9a      	itte	ls
 800492e:	0c82      	lsrls	r2, r0, #18
 8004930:	327c      	addls	r2, #124	; 0x7c
 8004932:	227e      	movhi	r2, #126	; 0x7e
 8004934:	e7d4      	b.n	80048e0 <_malloc_r+0x1c4>
 8004936:	68bf      	ldr	r7, [r7, #8]
 8004938:	45be      	cmp	lr, r7
 800493a:	d004      	beq.n	8004946 <_malloc_r+0x22a>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	f022 0203 	bic.w	r2, r2, #3
 8004942:	4290      	cmp	r0, r2
 8004944:	d3f7      	bcc.n	8004936 <_malloc_r+0x21a>
 8004946:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800494a:	e7d7      	b.n	80048fc <_malloc_r+0x1e0>
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	68f7      	ldr	r7, [r6, #12]
 8004950:	f020 0003 	bic.w	r0, r0, #3
 8004954:	eba0 0a04 	sub.w	sl, r0, r4
 8004958:	f1ba 0f0f 	cmp.w	sl, #15
 800495c:	dd10      	ble.n	8004980 <_malloc_r+0x264>
 800495e:	68b2      	ldr	r2, [r6, #8]
 8004960:	1933      	adds	r3, r6, r4
 8004962:	f044 0401 	orr.w	r4, r4, #1
 8004966:	6074      	str	r4, [r6, #4]
 8004968:	60d7      	str	r7, [r2, #12]
 800496a:	60ba      	str	r2, [r7, #8]
 800496c:	f04a 0201 	orr.w	r2, sl, #1
 8004970:	616b      	str	r3, [r5, #20]
 8004972:	612b      	str	r3, [r5, #16]
 8004974:	60d9      	str	r1, [r3, #12]
 8004976:	6099      	str	r1, [r3, #8]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	f846 a000 	str.w	sl, [r6, r0]
 800497e:	e6ff      	b.n	8004780 <_malloc_r+0x64>
 8004980:	f1ba 0f00 	cmp.w	sl, #0
 8004984:	db0f      	blt.n	80049a6 <_malloc_r+0x28a>
 8004986:	4430      	add	r0, r6
 8004988:	6843      	ldr	r3, [r0, #4]
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6043      	str	r3, [r0, #4]
 8004990:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004994:	4648      	mov	r0, r9
 8004996:	60df      	str	r7, [r3, #12]
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	f000 f8eb 	bl	8004b74 <__malloc_unlock>
 800499e:	4630      	mov	r0, r6
 80049a0:	b003      	add	sp, #12
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	463e      	mov	r6, r7
 80049a8:	e77a      	b.n	80048a0 <_malloc_r+0x184>
 80049aa:	f85c 0908 	ldr.w	r0, [ip], #-8
 80049ae:	3b01      	subs	r3, #1
 80049b0:	4584      	cmp	ip, r0
 80049b2:	f43f af7e 	beq.w	80048b2 <_malloc_r+0x196>
 80049b6:	e782      	b.n	80048be <_malloc_r+0x1a2>
 80049b8:	2000010c 	.word	0x2000010c
 80049bc:	20000114 	.word	0x20000114
 80049c0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80049c4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80049c8:	f026 0603 	bic.w	r6, r6, #3
 80049cc:	42b4      	cmp	r4, r6
 80049ce:	d803      	bhi.n	80049d8 <_malloc_r+0x2bc>
 80049d0:	1b33      	subs	r3, r6, r4
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	f300 8095 	bgt.w	8004b02 <_malloc_r+0x3e6>
 80049d8:	4a4f      	ldr	r2, [pc, #316]	; (8004b18 <_malloc_r+0x3fc>)
 80049da:	eb0b 0306 	add.w	r3, fp, r6
 80049de:	6817      	ldr	r7, [r2, #0]
 80049e0:	4a4e      	ldr	r2, [pc, #312]	; (8004b1c <_malloc_r+0x400>)
 80049e2:	3710      	adds	r7, #16
 80049e4:	6811      	ldr	r1, [r2, #0]
 80049e6:	4427      	add	r7, r4
 80049e8:	3101      	adds	r1, #1
 80049ea:	d005      	beq.n	80049f8 <_malloc_r+0x2dc>
 80049ec:	494c      	ldr	r1, [pc, #304]	; (8004b20 <_malloc_r+0x404>)
 80049ee:	3901      	subs	r1, #1
 80049f0:	440f      	add	r7, r1
 80049f2:	3101      	adds	r1, #1
 80049f4:	4249      	negs	r1, r1
 80049f6:	400f      	ands	r7, r1
 80049f8:	4639      	mov	r1, r7
 80049fa:	4648      	mov	r0, r9
 80049fc:	9201      	str	r2, [sp, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f000 fb90 	bl	8005124 <_sbrk_r>
 8004a04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a08:	4680      	mov	r8, r0
 8004a0a:	d055      	beq.n	8004ab8 <_malloc_r+0x39c>
 8004a0c:	9b00      	ldr	r3, [sp, #0]
 8004a0e:	9a01      	ldr	r2, [sp, #4]
 8004a10:	4283      	cmp	r3, r0
 8004a12:	d901      	bls.n	8004a18 <_malloc_r+0x2fc>
 8004a14:	45ab      	cmp	fp, r5
 8004a16:	d14f      	bne.n	8004ab8 <_malloc_r+0x39c>
 8004a18:	4842      	ldr	r0, [pc, #264]	; (8004b24 <_malloc_r+0x408>)
 8004a1a:	4543      	cmp	r3, r8
 8004a1c:	6801      	ldr	r1, [r0, #0]
 8004a1e:	4682      	mov	sl, r0
 8004a20:	eb07 0e01 	add.w	lr, r7, r1
 8004a24:	f8c0 e000 	str.w	lr, [r0]
 8004a28:	493f      	ldr	r1, [pc, #252]	; (8004b28 <_malloc_r+0x40c>)
 8004a2a:	d113      	bne.n	8004a54 <_malloc_r+0x338>
 8004a2c:	420b      	tst	r3, r1
 8004a2e:	d111      	bne.n	8004a54 <_malloc_r+0x338>
 8004a30:	68ab      	ldr	r3, [r5, #8]
 8004a32:	443e      	add	r6, r7
 8004a34:	f046 0601 	orr.w	r6, r6, #1
 8004a38:	605e      	str	r6, [r3, #4]
 8004a3a:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <_malloc_r+0x410>)
 8004a3c:	f8da 3000 	ldr.w	r3, [sl]
 8004a40:	6811      	ldr	r1, [r2, #0]
 8004a42:	428b      	cmp	r3, r1
 8004a44:	bf88      	it	hi
 8004a46:	6013      	strhi	r3, [r2, #0]
 8004a48:	4a39      	ldr	r2, [pc, #228]	; (8004b30 <_malloc_r+0x414>)
 8004a4a:	6811      	ldr	r1, [r2, #0]
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	bf88      	it	hi
 8004a50:	6013      	strhi	r3, [r2, #0]
 8004a52:	e031      	b.n	8004ab8 <_malloc_r+0x39c>
 8004a54:	6810      	ldr	r0, [r2, #0]
 8004a56:	3001      	adds	r0, #1
 8004a58:	bf1b      	ittet	ne
 8004a5a:	eba8 0303 	subne.w	r3, r8, r3
 8004a5e:	4473      	addne	r3, lr
 8004a60:	f8c2 8000 	streq.w	r8, [r2]
 8004a64:	f8ca 3000 	strne.w	r3, [sl]
 8004a68:	f018 0007 	ands.w	r0, r8, #7
 8004a6c:	bf1c      	itt	ne
 8004a6e:	f1c0 0008 	rsbne	r0, r0, #8
 8004a72:	4480      	addne	r8, r0
 8004a74:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <_malloc_r+0x404>)
 8004a76:	4447      	add	r7, r8
 8004a78:	4418      	add	r0, r3
 8004a7a:	400f      	ands	r7, r1
 8004a7c:	1bc7      	subs	r7, r0, r7
 8004a7e:	4639      	mov	r1, r7
 8004a80:	4648      	mov	r0, r9
 8004a82:	f000 fb4f 	bl	8005124 <_sbrk_r>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	bf04      	itt	eq
 8004a8a:	4640      	moveq	r0, r8
 8004a8c:	2700      	moveq	r7, #0
 8004a8e:	f8da 3000 	ldr.w	r3, [sl]
 8004a92:	eba0 0008 	sub.w	r0, r0, r8
 8004a96:	443b      	add	r3, r7
 8004a98:	4407      	add	r7, r0
 8004a9a:	f047 0701 	orr.w	r7, r7, #1
 8004a9e:	45ab      	cmp	fp, r5
 8004aa0:	f8c5 8008 	str.w	r8, [r5, #8]
 8004aa4:	f8ca 3000 	str.w	r3, [sl]
 8004aa8:	f8c8 7004 	str.w	r7, [r8, #4]
 8004aac:	d0c5      	beq.n	8004a3a <_malloc_r+0x31e>
 8004aae:	2e0f      	cmp	r6, #15
 8004ab0:	d810      	bhi.n	8004ad4 <_malloc_r+0x3b8>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ab8:	68ab      	ldr	r3, [r5, #8]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	f022 0203 	bic.w	r2, r2, #3
 8004ac0:	4294      	cmp	r4, r2
 8004ac2:	eba2 0304 	sub.w	r3, r2, r4
 8004ac6:	d801      	bhi.n	8004acc <_malloc_r+0x3b0>
 8004ac8:	2b0f      	cmp	r3, #15
 8004aca:	dc1a      	bgt.n	8004b02 <_malloc_r+0x3e6>
 8004acc:	4648      	mov	r0, r9
 8004ace:	f000 f851 	bl	8004b74 <__malloc_unlock>
 8004ad2:	e630      	b.n	8004736 <_malloc_r+0x1a>
 8004ad4:	2205      	movs	r2, #5
 8004ad6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004ada:	3e0c      	subs	r6, #12
 8004adc:	f026 0607 	bic.w	r6, r6, #7
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	4333      	orrs	r3, r6
 8004ae6:	f8cb 3004 	str.w	r3, [fp, #4]
 8004aea:	2e0f      	cmp	r6, #15
 8004aec:	eb0b 0306 	add.w	r3, fp, r6
 8004af0:	605a      	str	r2, [r3, #4]
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	d9a1      	bls.n	8004a3a <_malloc_r+0x31e>
 8004af6:	f10b 0108 	add.w	r1, fp, #8
 8004afa:	4648      	mov	r0, r9
 8004afc:	f000 fc20 	bl	8005340 <_free_r>
 8004b00:	e79b      	b.n	8004a3a <_malloc_r+0x31e>
 8004b02:	68ae      	ldr	r6, [r5, #8]
 8004b04:	f044 0201 	orr.w	r2, r4, #1
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	4434      	add	r4, r6
 8004b0e:	6072      	str	r2, [r6, #4]
 8004b10:	60ac      	str	r4, [r5, #8]
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	e634      	b.n	8004780 <_malloc_r+0x64>
 8004b16:	bf00      	nop
 8004b18:	20000adc 	.word	0x20000adc
 8004b1c:	20000514 	.word	0x20000514
 8004b20:	00000080 	.word	0x00000080
 8004b24:	20000aac 	.word	0x20000aac
 8004b28:	0000007f 	.word	0x0000007f
 8004b2c:	20000ad4 	.word	0x20000ad4
 8004b30:	20000ad8 	.word	0x20000ad8

08004b34 <memchr>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	b2c9      	uxtb	r1, r1
 8004b38:	4402      	add	r2, r0
 8004b3a:	4290      	cmp	r0, r2
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	d101      	bne.n	8004b44 <memchr+0x10>
 8004b40:	2000      	movs	r0, #0
 8004b42:	bd10      	pop	{r4, pc}
 8004b44:	781c      	ldrb	r4, [r3, #0]
 8004b46:	3001      	adds	r0, #1
 8004b48:	428c      	cmp	r4, r1
 8004b4a:	d1f6      	bne.n	8004b3a <memchr+0x6>
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd10      	pop	{r4, pc}

08004b50 <memcpy>:
 8004b50:	b510      	push	{r4, lr}
 8004b52:	1e43      	subs	r3, r0, #1
 8004b54:	440a      	add	r2, r1
 8004b56:	4291      	cmp	r1, r2
 8004b58:	d100      	bne.n	8004b5c <memcpy+0xc>
 8004b5a:	bd10      	pop	{r4, pc}
 8004b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b64:	e7f7      	b.n	8004b56 <memcpy+0x6>
	...

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f000 bca5 	b.w	80054b8 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20000b72 	.word	0x20000b72

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f000 bca0 	b.w	80054ba <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	20000b72 	.word	0x20000b72

08004b80 <_Balloc>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b84:	4604      	mov	r4, r0
 8004b86:	460e      	mov	r6, r1
 8004b88:	b93d      	cbnz	r5, 8004b9a <_Balloc+0x1a>
 8004b8a:	2010      	movs	r0, #16
 8004b8c:	f7ff fdbe 	bl	800470c <malloc>
 8004b90:	6260      	str	r0, [r4, #36]	; 0x24
 8004b92:	6045      	str	r5, [r0, #4]
 8004b94:	6085      	str	r5, [r0, #8]
 8004b96:	6005      	str	r5, [r0, #0]
 8004b98:	60c5      	str	r5, [r0, #12]
 8004b9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004b9c:	68eb      	ldr	r3, [r5, #12]
 8004b9e:	b183      	cbz	r3, 8004bc2 <_Balloc+0x42>
 8004ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004ba8:	b9b8      	cbnz	r0, 8004bda <_Balloc+0x5a>
 8004baa:	2101      	movs	r1, #1
 8004bac:	fa01 f506 	lsl.w	r5, r1, r6
 8004bb0:	1d6a      	adds	r2, r5, #5
 8004bb2:	0092      	lsls	r2, r2, #2
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 fb3f 	bl	8005238 <_calloc_r>
 8004bba:	b160      	cbz	r0, 8004bd6 <_Balloc+0x56>
 8004bbc:	6046      	str	r6, [r0, #4]
 8004bbe:	6085      	str	r5, [r0, #8]
 8004bc0:	e00e      	b.n	8004be0 <_Balloc+0x60>
 8004bc2:	2221      	movs	r2, #33	; 0x21
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	f000 fb36 	bl	8005238 <_calloc_r>
 8004bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bce:	60e8      	str	r0, [r5, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e4      	bne.n	8004ba0 <_Balloc+0x20>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	6802      	ldr	r2, [r0, #0]
 8004bdc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004be0:	2300      	movs	r3, #0
 8004be2:	6103      	str	r3, [r0, #16]
 8004be4:	60c3      	str	r3, [r0, #12]
 8004be6:	bd70      	pop	{r4, r5, r6, pc}

08004be8 <_Bfree>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004bec:	4606      	mov	r6, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	b93c      	cbnz	r4, 8004c02 <_Bfree+0x1a>
 8004bf2:	2010      	movs	r0, #16
 8004bf4:	f7ff fd8a 	bl	800470c <malloc>
 8004bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8004bfa:	6044      	str	r4, [r0, #4]
 8004bfc:	6084      	str	r4, [r0, #8]
 8004bfe:	6004      	str	r4, [r0, #0]
 8004c00:	60c4      	str	r4, [r0, #12]
 8004c02:	b13d      	cbz	r5, 8004c14 <_Bfree+0x2c>
 8004c04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004c06:	686a      	ldr	r2, [r5, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c0e:	6029      	str	r1, [r5, #0]
 8004c10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004c14:	bd70      	pop	{r4, r5, r6, pc}

08004c16 <__multadd>:
 8004c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	2300      	movs	r3, #0
 8004c22:	690d      	ldr	r5, [r1, #16]
 8004c24:	f101 0e14 	add.w	lr, r1, #20
 8004c28:	f8de 0000 	ldr.w	r0, [lr]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	b281      	uxth	r1, r0
 8004c30:	fb02 7101 	mla	r1, r2, r1, r7
 8004c34:	0c00      	lsrs	r0, r0, #16
 8004c36:	0c0f      	lsrs	r7, r1, #16
 8004c38:	fb02 7000 	mla	r0, r2, r0, r7
 8004c3c:	b289      	uxth	r1, r1
 8004c3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004c42:	429d      	cmp	r5, r3
 8004c44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004c48:	f84e 1b04 	str.w	r1, [lr], #4
 8004c4c:	dcec      	bgt.n	8004c28 <__multadd+0x12>
 8004c4e:	b1d7      	cbz	r7, 8004c86 <__multadd+0x70>
 8004c50:	68a3      	ldr	r3, [r4, #8]
 8004c52:	429d      	cmp	r5, r3
 8004c54:	db12      	blt.n	8004c7c <__multadd+0x66>
 8004c56:	6861      	ldr	r1, [r4, #4]
 8004c58:	4630      	mov	r0, r6
 8004c5a:	3101      	adds	r1, #1
 8004c5c:	f7ff ff90 	bl	8004b80 <_Balloc>
 8004c60:	4680      	mov	r8, r0
 8004c62:	6922      	ldr	r2, [r4, #16]
 8004c64:	f104 010c 	add.w	r1, r4, #12
 8004c68:	3202      	adds	r2, #2
 8004c6a:	0092      	lsls	r2, r2, #2
 8004c6c:	300c      	adds	r0, #12
 8004c6e:	f7ff ff6f 	bl	8004b50 <memcpy>
 8004c72:	4621      	mov	r1, r4
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff ffb7 	bl	8004be8 <_Bfree>
 8004c7a:	4644      	mov	r4, r8
 8004c7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c80:	3501      	adds	r5, #1
 8004c82:	615f      	str	r7, [r3, #20]
 8004c84:	6125      	str	r5, [r4, #16]
 8004c86:	4620      	mov	r0, r4
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c8c <__hi0bits>:
 8004c8c:	0c02      	lsrs	r2, r0, #16
 8004c8e:	0412      	lsls	r2, r2, #16
 8004c90:	4603      	mov	r3, r0
 8004c92:	b9b2      	cbnz	r2, 8004cc2 <__hi0bits+0x36>
 8004c94:	0403      	lsls	r3, r0, #16
 8004c96:	2010      	movs	r0, #16
 8004c98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c9c:	bf04      	itt	eq
 8004c9e:	021b      	lsleq	r3, r3, #8
 8004ca0:	3008      	addeq	r0, #8
 8004ca2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004ca6:	bf04      	itt	eq
 8004ca8:	011b      	lsleq	r3, r3, #4
 8004caa:	3004      	addeq	r0, #4
 8004cac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004cb0:	bf04      	itt	eq
 8004cb2:	009b      	lsleq	r3, r3, #2
 8004cb4:	3002      	addeq	r0, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	db06      	blt.n	8004cc8 <__hi0bits+0x3c>
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	d503      	bpl.n	8004cc6 <__hi0bits+0x3a>
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	4770      	bx	lr
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e7e8      	b.n	8004c98 <__hi0bits+0xc>
 8004cc6:	2020      	movs	r0, #32
 8004cc8:	4770      	bx	lr

08004cca <__lo0bits>:
 8004cca:	6803      	ldr	r3, [r0, #0]
 8004ccc:	4601      	mov	r1, r0
 8004cce:	f013 0207 	ands.w	r2, r3, #7
 8004cd2:	d00b      	beq.n	8004cec <__lo0bits+0x22>
 8004cd4:	07da      	lsls	r2, r3, #31
 8004cd6:	d423      	bmi.n	8004d20 <__lo0bits+0x56>
 8004cd8:	0798      	lsls	r0, r3, #30
 8004cda:	bf49      	itett	mi
 8004cdc:	085b      	lsrmi	r3, r3, #1
 8004cde:	089b      	lsrpl	r3, r3, #2
 8004ce0:	2001      	movmi	r0, #1
 8004ce2:	600b      	strmi	r3, [r1, #0]
 8004ce4:	bf5c      	itt	pl
 8004ce6:	600b      	strpl	r3, [r1, #0]
 8004ce8:	2002      	movpl	r0, #2
 8004cea:	4770      	bx	lr
 8004cec:	b298      	uxth	r0, r3
 8004cee:	b9a8      	cbnz	r0, 8004d1c <__lo0bits+0x52>
 8004cf0:	2010      	movs	r0, #16
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004cf8:	bf04      	itt	eq
 8004cfa:	0a1b      	lsreq	r3, r3, #8
 8004cfc:	3008      	addeq	r0, #8
 8004cfe:	071a      	lsls	r2, r3, #28
 8004d00:	bf04      	itt	eq
 8004d02:	091b      	lsreq	r3, r3, #4
 8004d04:	3004      	addeq	r0, #4
 8004d06:	079a      	lsls	r2, r3, #30
 8004d08:	bf04      	itt	eq
 8004d0a:	089b      	lsreq	r3, r3, #2
 8004d0c:	3002      	addeq	r0, #2
 8004d0e:	07da      	lsls	r2, r3, #31
 8004d10:	d402      	bmi.n	8004d18 <__lo0bits+0x4e>
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	d006      	beq.n	8004d24 <__lo0bits+0x5a>
 8004d16:	3001      	adds	r0, #1
 8004d18:	600b      	str	r3, [r1, #0]
 8004d1a:	4770      	bx	lr
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	e7e9      	b.n	8004cf4 <__lo0bits+0x2a>
 8004d20:	2000      	movs	r0, #0
 8004d22:	4770      	bx	lr
 8004d24:	2020      	movs	r0, #32
 8004d26:	4770      	bx	lr

08004d28 <__i2b>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	f7ff ff27 	bl	8004b80 <_Balloc>
 8004d32:	2201      	movs	r2, #1
 8004d34:	6144      	str	r4, [r0, #20]
 8004d36:	6102      	str	r2, [r0, #16]
 8004d38:	bd10      	pop	{r4, pc}

08004d3a <__multiply>:
 8004d3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3e:	4614      	mov	r4, r2
 8004d40:	690a      	ldr	r2, [r1, #16]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	4689      	mov	r9, r1
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bfbe      	ittt	lt
 8004d4a:	460b      	movlt	r3, r1
 8004d4c:	46a1      	movlt	r9, r4
 8004d4e:	461c      	movlt	r4, r3
 8004d50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004d54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004d58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004d5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004d60:	eb07 060a 	add.w	r6, r7, sl
 8004d64:	429e      	cmp	r6, r3
 8004d66:	bfc8      	it	gt
 8004d68:	3101      	addgt	r1, #1
 8004d6a:	f7ff ff09 	bl	8004b80 <_Balloc>
 8004d6e:	f100 0514 	add.w	r5, r0, #20
 8004d72:	462b      	mov	r3, r5
 8004d74:	2200      	movs	r2, #0
 8004d76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d7a:	4543      	cmp	r3, r8
 8004d7c:	d316      	bcc.n	8004dac <__multiply+0x72>
 8004d7e:	f104 0214 	add.w	r2, r4, #20
 8004d82:	f109 0114 	add.w	r1, r9, #20
 8004d86:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004d8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	9c01      	ldr	r4, [sp, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	4294      	cmp	r4, r2
 8004d96:	d80c      	bhi.n	8004db2 <__multiply+0x78>
 8004d98:	2e00      	cmp	r6, #0
 8004d9a:	dd03      	ble.n	8004da4 <__multiply+0x6a>
 8004d9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d054      	beq.n	8004e4e <__multiply+0x114>
 8004da4:	6106      	str	r6, [r0, #16]
 8004da6:	b003      	add	sp, #12
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	f843 2b04 	str.w	r2, [r3], #4
 8004db0:	e7e3      	b.n	8004d7a <__multiply+0x40>
 8004db2:	f8b3 a000 	ldrh.w	sl, [r3]
 8004db6:	3204      	adds	r2, #4
 8004db8:	f1ba 0f00 	cmp.w	sl, #0
 8004dbc:	d020      	beq.n	8004e00 <__multiply+0xc6>
 8004dbe:	46ae      	mov	lr, r5
 8004dc0:	4689      	mov	r9, r1
 8004dc2:	f04f 0c00 	mov.w	ip, #0
 8004dc6:	f859 4b04 	ldr.w	r4, [r9], #4
 8004dca:	f8be b000 	ldrh.w	fp, [lr]
 8004dce:	b2a3      	uxth	r3, r4
 8004dd0:	fb0a b303 	mla	r3, sl, r3, fp
 8004dd4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004dd8:	f8de 4000 	ldr.w	r4, [lr]
 8004ddc:	4463      	add	r3, ip
 8004dde:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004de2:	fb0a c40b 	mla	r4, sl, fp, ip
 8004de6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004df0:	454f      	cmp	r7, r9
 8004df2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004df6:	f84e 3b04 	str.w	r3, [lr], #4
 8004dfa:	d8e4      	bhi.n	8004dc6 <__multiply+0x8c>
 8004dfc:	f8ce c000 	str.w	ip, [lr]
 8004e00:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004e04:	f1b9 0f00 	cmp.w	r9, #0
 8004e08:	d01f      	beq.n	8004e4a <__multiply+0x110>
 8004e0a:	46ae      	mov	lr, r5
 8004e0c:	468c      	mov	ip, r1
 8004e0e:	f04f 0a00 	mov.w	sl, #0
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	f8bc 4000 	ldrh.w	r4, [ip]
 8004e18:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	fb09 b404 	mla	r4, r9, r4, fp
 8004e22:	44a2      	add	sl, r4
 8004e24:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004e28:	f84e 3b04 	str.w	r3, [lr], #4
 8004e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e30:	f8be 4000 	ldrh.w	r4, [lr]
 8004e34:	0c1b      	lsrs	r3, r3, #16
 8004e36:	fb09 4303 	mla	r3, r9, r3, r4
 8004e3a:	4567      	cmp	r7, ip
 8004e3c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e44:	d8e6      	bhi.n	8004e14 <__multiply+0xda>
 8004e46:	f8ce 3000 	str.w	r3, [lr]
 8004e4a:	3504      	adds	r5, #4
 8004e4c:	e7a0      	b.n	8004d90 <__multiply+0x56>
 8004e4e:	3e01      	subs	r6, #1
 8004e50:	e7a2      	b.n	8004d98 <__multiply+0x5e>
	...

08004e54 <__pow5mult>:
 8004e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e58:	4615      	mov	r5, r2
 8004e5a:	f012 0203 	ands.w	r2, r2, #3
 8004e5e:	4606      	mov	r6, r0
 8004e60:	460f      	mov	r7, r1
 8004e62:	d007      	beq.n	8004e74 <__pow5mult+0x20>
 8004e64:	4c21      	ldr	r4, [pc, #132]	; (8004eec <__pow5mult+0x98>)
 8004e66:	3a01      	subs	r2, #1
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e6e:	f7ff fed2 	bl	8004c16 <__multadd>
 8004e72:	4607      	mov	r7, r0
 8004e74:	10ad      	asrs	r5, r5, #2
 8004e76:	d035      	beq.n	8004ee4 <__pow5mult+0x90>
 8004e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004e7a:	b93c      	cbnz	r4, 8004e8c <__pow5mult+0x38>
 8004e7c:	2010      	movs	r0, #16
 8004e7e:	f7ff fc45 	bl	800470c <malloc>
 8004e82:	6270      	str	r0, [r6, #36]	; 0x24
 8004e84:	6044      	str	r4, [r0, #4]
 8004e86:	6084      	str	r4, [r0, #8]
 8004e88:	6004      	str	r4, [r0, #0]
 8004e8a:	60c4      	str	r4, [r0, #12]
 8004e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e94:	b94c      	cbnz	r4, 8004eaa <__pow5mult+0x56>
 8004e96:	f240 2171 	movw	r1, #625	; 0x271
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ff44 	bl	8004d28 <__i2b>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	07eb      	lsls	r3, r5, #31
 8004eb0:	d50a      	bpl.n	8004ec8 <__pow5mult+0x74>
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f7ff ff3f 	bl	8004d3a <__multiply>
 8004ebc:	4681      	mov	r9, r0
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7ff fe91 	bl	8004be8 <_Bfree>
 8004ec6:	464f      	mov	r7, r9
 8004ec8:	106d      	asrs	r5, r5, #1
 8004eca:	d00b      	beq.n	8004ee4 <__pow5mult+0x90>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	b938      	cbnz	r0, 8004ee0 <__pow5mult+0x8c>
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f7ff ff30 	bl	8004d3a <__multiply>
 8004eda:	6020      	str	r0, [r4, #0]
 8004edc:	f8c0 8000 	str.w	r8, [r0]
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e7e4      	b.n	8004eae <__pow5mult+0x5a>
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eea:	bf00      	nop
 8004eec:	08006760 	.word	0x08006760

08004ef0 <__lshift>:
 8004ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	4607      	mov	r7, r0
 8004ef8:	4616      	mov	r6, r2
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f00:	eb0a 0903 	add.w	r9, sl, r3
 8004f04:	6849      	ldr	r1, [r1, #4]
 8004f06:	68a3      	ldr	r3, [r4, #8]
 8004f08:	f109 0501 	add.w	r5, r9, #1
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	db31      	blt.n	8004f74 <__lshift+0x84>
 8004f10:	4638      	mov	r0, r7
 8004f12:	f7ff fe35 	bl	8004b80 <_Balloc>
 8004f16:	2200      	movs	r2, #0
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	f100 0314 	add.w	r3, r0, #20
 8004f20:	4552      	cmp	r2, sl
 8004f22:	db2a      	blt.n	8004f7a <__lshift+0x8a>
 8004f24:	6920      	ldr	r0, [r4, #16]
 8004f26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f2a:	f104 0114 	add.w	r1, r4, #20
 8004f2e:	f016 021f 	ands.w	r2, r6, #31
 8004f32:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004f36:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004f3a:	d022      	beq.n	8004f82 <__lshift+0x92>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f1c2 0c20 	rsb	ip, r2, #32
 8004f42:	680e      	ldr	r6, [r1, #0]
 8004f44:	4096      	lsls	r6, r2
 8004f46:	4330      	orrs	r0, r6
 8004f48:	f843 0b04 	str.w	r0, [r3], #4
 8004f4c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f50:	458e      	cmp	lr, r1
 8004f52:	fa20 f00c 	lsr.w	r0, r0, ip
 8004f56:	d8f4      	bhi.n	8004f42 <__lshift+0x52>
 8004f58:	6018      	str	r0, [r3, #0]
 8004f5a:	b108      	cbz	r0, 8004f60 <__lshift+0x70>
 8004f5c:	f109 0502 	add.w	r5, r9, #2
 8004f60:	3d01      	subs	r5, #1
 8004f62:	4638      	mov	r0, r7
 8004f64:	f8c8 5010 	str.w	r5, [r8, #16]
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f7ff fe3d 	bl	8004be8 <_Bfree>
 8004f6e:	4640      	mov	r0, r8
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	3101      	adds	r1, #1
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	e7c8      	b.n	8004f0c <__lshift+0x1c>
 8004f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f7e:	3201      	adds	r2, #1
 8004f80:	e7ce      	b.n	8004f20 <__lshift+0x30>
 8004f82:	3b04      	subs	r3, #4
 8004f84:	f851 2b04 	ldr.w	r2, [r1], #4
 8004f88:	458e      	cmp	lr, r1
 8004f8a:	f843 2f04 	str.w	r2, [r3, #4]!
 8004f8e:	d8f9      	bhi.n	8004f84 <__lshift+0x94>
 8004f90:	e7e6      	b.n	8004f60 <__lshift+0x70>

08004f92 <__mcmp>:
 8004f92:	6903      	ldr	r3, [r0, #16]
 8004f94:	690a      	ldr	r2, [r1, #16]
 8004f96:	b530      	push	{r4, r5, lr}
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	d10c      	bne.n	8004fb6 <__mcmp+0x24>
 8004f9c:	0092      	lsls	r2, r2, #2
 8004f9e:	3014      	adds	r0, #20
 8004fa0:	3114      	adds	r1, #20
 8004fa2:	1884      	adds	r4, r0, r2
 8004fa4:	4411      	add	r1, r2
 8004fa6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004faa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fae:	4295      	cmp	r5, r2
 8004fb0:	d003      	beq.n	8004fba <__mcmp+0x28>
 8004fb2:	d305      	bcc.n	8004fc0 <__mcmp+0x2e>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	42a0      	cmp	r0, r4
 8004fbc:	d3f3      	bcc.n	8004fa6 <__mcmp+0x14>
 8004fbe:	e7fa      	b.n	8004fb6 <__mcmp+0x24>
 8004fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc4:	e7f7      	b.n	8004fb6 <__mcmp+0x24>

08004fc6 <__mdiff>:
 8004fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fca:	460d      	mov	r5, r1
 8004fcc:	4607      	mov	r7, r0
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	f7ff ffdd 	bl	8004f92 <__mcmp>
 8004fd8:	1e06      	subs	r6, r0, #0
 8004fda:	d108      	bne.n	8004fee <__mdiff+0x28>
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff fdce 	bl	8004b80 <_Balloc>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	6146      	str	r6, [r0, #20]
 8004fe8:	6103      	str	r3, [r0, #16]
 8004fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fee:	bfa4      	itt	ge
 8004ff0:	4623      	movge	r3, r4
 8004ff2:	462c      	movge	r4, r5
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	6861      	ldr	r1, [r4, #4]
 8004ff8:	bfa6      	itte	ge
 8004ffa:	461d      	movge	r5, r3
 8004ffc:	2600      	movge	r6, #0
 8004ffe:	2601      	movlt	r6, #1
 8005000:	f7ff fdbe 	bl	8004b80 <_Balloc>
 8005004:	f04f 0c00 	mov.w	ip, #0
 8005008:	60c6      	str	r6, [r0, #12]
 800500a:	692b      	ldr	r3, [r5, #16]
 800500c:	6926      	ldr	r6, [r4, #16]
 800500e:	f104 0214 	add.w	r2, r4, #20
 8005012:	f105 0914 	add.w	r9, r5, #20
 8005016:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800501a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800501e:	f100 0114 	add.w	r1, r0, #20
 8005022:	f852 ab04 	ldr.w	sl, [r2], #4
 8005026:	f859 5b04 	ldr.w	r5, [r9], #4
 800502a:	fa1f f38a 	uxth.w	r3, sl
 800502e:	4463      	add	r3, ip
 8005030:	b2ac      	uxth	r4, r5
 8005032:	1b1b      	subs	r3, r3, r4
 8005034:	0c2c      	lsrs	r4, r5, #16
 8005036:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800503a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005044:	45c8      	cmp	r8, r9
 8005046:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800504a:	4696      	mov	lr, r2
 800504c:	f841 4b04 	str.w	r4, [r1], #4
 8005050:	d8e7      	bhi.n	8005022 <__mdiff+0x5c>
 8005052:	45be      	cmp	lr, r7
 8005054:	d305      	bcc.n	8005062 <__mdiff+0x9c>
 8005056:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800505a:	b18b      	cbz	r3, 8005080 <__mdiff+0xba>
 800505c:	6106      	str	r6, [r0, #16]
 800505e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005062:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005066:	b2a2      	uxth	r2, r4
 8005068:	4462      	add	r2, ip
 800506a:	1413      	asrs	r3, r2, #16
 800506c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005070:	b292      	uxth	r2, r2
 8005072:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005076:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800507a:	f841 2b04 	str.w	r2, [r1], #4
 800507e:	e7e8      	b.n	8005052 <__mdiff+0x8c>
 8005080:	3e01      	subs	r6, #1
 8005082:	e7e8      	b.n	8005056 <__mdiff+0x90>

08005084 <__d2b>:
 8005084:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005088:	461c      	mov	r4, r3
 800508a:	2101      	movs	r1, #1
 800508c:	4690      	mov	r8, r2
 800508e:	9e08      	ldr	r6, [sp, #32]
 8005090:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005092:	f7ff fd75 	bl	8004b80 <_Balloc>
 8005096:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800509a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800509e:	4607      	mov	r7, r0
 80050a0:	bb34      	cbnz	r4, 80050f0 <__d2b+0x6c>
 80050a2:	9201      	str	r2, [sp, #4]
 80050a4:	f1b8 0f00 	cmp.w	r8, #0
 80050a8:	d027      	beq.n	80050fa <__d2b+0x76>
 80050aa:	a802      	add	r0, sp, #8
 80050ac:	f840 8d08 	str.w	r8, [r0, #-8]!
 80050b0:	f7ff fe0b 	bl	8004cca <__lo0bits>
 80050b4:	9900      	ldr	r1, [sp, #0]
 80050b6:	b1f0      	cbz	r0, 80050f6 <__d2b+0x72>
 80050b8:	9a01      	ldr	r2, [sp, #4]
 80050ba:	f1c0 0320 	rsb	r3, r0, #32
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	430b      	orrs	r3, r1
 80050c4:	40c2      	lsrs	r2, r0
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	9201      	str	r2, [sp, #4]
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2102      	movne	r1, #2
 80050d2:	2101      	moveq	r1, #1
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	6139      	str	r1, [r7, #16]
 80050d8:	b1c4      	cbz	r4, 800510c <__d2b+0x88>
 80050da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80050de:	4404      	add	r4, r0
 80050e0:	6034      	str	r4, [r6, #0]
 80050e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80050e6:	6028      	str	r0, [r5, #0]
 80050e8:	4638      	mov	r0, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80050f4:	e7d5      	b.n	80050a2 <__d2b+0x1e>
 80050f6:	6179      	str	r1, [r7, #20]
 80050f8:	e7e7      	b.n	80050ca <__d2b+0x46>
 80050fa:	a801      	add	r0, sp, #4
 80050fc:	f7ff fde5 	bl	8004cca <__lo0bits>
 8005100:	2101      	movs	r1, #1
 8005102:	9b01      	ldr	r3, [sp, #4]
 8005104:	6139      	str	r1, [r7, #16]
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	3020      	adds	r0, #32
 800510a:	e7e5      	b.n	80050d8 <__d2b+0x54>
 800510c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005110:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005114:	6030      	str	r0, [r6, #0]
 8005116:	6918      	ldr	r0, [r3, #16]
 8005118:	f7ff fdb8 	bl	8004c8c <__hi0bits>
 800511c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005120:	e7e1      	b.n	80050e6 <__d2b+0x62>
	...

08005124 <_sbrk_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	2300      	movs	r3, #0
 8005128:	4c05      	ldr	r4, [pc, #20]	; (8005140 <_sbrk_r+0x1c>)
 800512a:	4605      	mov	r5, r0
 800512c:	4608      	mov	r0, r1
 800512e:	6023      	str	r3, [r4, #0]
 8005130:	f000 fb80 	bl	8005834 <_sbrk>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_sbrk_r+0x1a>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	b103      	cbz	r3, 800513e <_sbrk_r+0x1a>
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	20000b78 	.word	0x20000b78

08005144 <__ssprint_r>:
 8005144:	6893      	ldr	r3, [r2, #8]
 8005146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	4681      	mov	r9, r0
 800514c:	460c      	mov	r4, r1
 800514e:	4617      	mov	r7, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d060      	beq.n	8005216 <__ssprint_r+0xd2>
 8005154:	f04f 0b00 	mov.w	fp, #0
 8005158:	465e      	mov	r6, fp
 800515a:	f8d2 a000 	ldr.w	sl, [r2]
 800515e:	b356      	cbz	r6, 80051b6 <__ssprint_r+0x72>
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	429e      	cmp	r6, r3
 8005164:	d344      	bcc.n	80051f0 <__ssprint_r+0xac>
 8005166:	89a2      	ldrh	r2, [r4, #12]
 8005168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800516c:	d03e      	beq.n	80051ec <__ssprint_r+0xa8>
 800516e:	2302      	movs	r3, #2
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	6921      	ldr	r1, [r4, #16]
 8005174:	eba5 0801 	sub.w	r8, r5, r1
 8005178:	6965      	ldr	r5, [r4, #20]
 800517a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800517e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005182:	f108 0301 	add.w	r3, r8, #1
 8005186:	4433      	add	r3, r6
 8005188:	429d      	cmp	r5, r3
 800518a:	bf38      	it	cc
 800518c:	461d      	movcc	r5, r3
 800518e:	0553      	lsls	r3, r2, #21
 8005190:	d546      	bpl.n	8005220 <__ssprint_r+0xdc>
 8005192:	4629      	mov	r1, r5
 8005194:	4648      	mov	r0, r9
 8005196:	f7ff fac1 	bl	800471c <_malloc_r>
 800519a:	b998      	cbnz	r0, 80051c4 <__ssprint_r+0x80>
 800519c:	230c      	movs	r3, #12
 800519e:	f8c9 3000 	str.w	r3, [r9]
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	e031      	b.n	800521a <__ssprint_r+0xd6>
 80051b6:	f8da b000 	ldr.w	fp, [sl]
 80051ba:	f8da 6004 	ldr.w	r6, [sl, #4]
 80051be:	f10a 0a08 	add.w	sl, sl, #8
 80051c2:	e7cc      	b.n	800515e <__ssprint_r+0x1a>
 80051c4:	4642      	mov	r2, r8
 80051c6:	6921      	ldr	r1, [r4, #16]
 80051c8:	9001      	str	r0, [sp, #4]
 80051ca:	f7ff fcc1 	bl	8004b50 <memcpy>
 80051ce:	89a2      	ldrh	r2, [r4, #12]
 80051d0:	9b01      	ldr	r3, [sp, #4]
 80051d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80051d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051da:	81a2      	strh	r2, [r4, #12]
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	4443      	add	r3, r8
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	4633      	mov	r3, r6
 80051e4:	6165      	str	r5, [r4, #20]
 80051e6:	eba5 0508 	sub.w	r5, r5, r8
 80051ea:	60a5      	str	r5, [r4, #8]
 80051ec:	429e      	cmp	r6, r3
 80051ee:	d200      	bcs.n	80051f2 <__ssprint_r+0xae>
 80051f0:	4633      	mov	r3, r6
 80051f2:	461a      	mov	r2, r3
 80051f4:	4659      	mov	r1, fp
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f000 f971 	bl	80054e0 <memmove>
 80051fe:	68a2      	ldr	r2, [r4, #8]
 8005200:	9b01      	ldr	r3, [sp, #4]
 8005202:	1ad2      	subs	r2, r2, r3
 8005204:	60a2      	str	r2, [r4, #8]
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	4413      	add	r3, r2
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	1b9e      	subs	r6, r3, r6
 8005210:	60be      	str	r6, [r7, #8]
 8005212:	2e00      	cmp	r6, #0
 8005214:	d1cf      	bne.n	80051b6 <__ssprint_r+0x72>
 8005216:	2000      	movs	r0, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	b003      	add	sp, #12
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	462a      	mov	r2, r5
 8005222:	4648      	mov	r0, r9
 8005224:	f000 f976 	bl	8005514 <_realloc_r>
 8005228:	4603      	mov	r3, r0
 800522a:	2800      	cmp	r0, #0
 800522c:	d1d6      	bne.n	80051dc <__ssprint_r+0x98>
 800522e:	6921      	ldr	r1, [r4, #16]
 8005230:	4648      	mov	r0, r9
 8005232:	f000 f885 	bl	8005340 <_free_r>
 8005236:	e7b1      	b.n	800519c <__ssprint_r+0x58>

08005238 <_calloc_r>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4351      	muls	r1, r2
 800523c:	f7ff fa6e 	bl	800471c <_malloc_r>
 8005240:	4604      	mov	r4, r0
 8005242:	b198      	cbz	r0, 800526c <_calloc_r+0x34>
 8005244:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005248:	f022 0203 	bic.w	r2, r2, #3
 800524c:	3a04      	subs	r2, #4
 800524e:	2a24      	cmp	r2, #36	; 0x24
 8005250:	d81b      	bhi.n	800528a <_calloc_r+0x52>
 8005252:	2a13      	cmp	r2, #19
 8005254:	d917      	bls.n	8005286 <_calloc_r+0x4e>
 8005256:	2100      	movs	r1, #0
 8005258:	2a1b      	cmp	r2, #27
 800525a:	6001      	str	r1, [r0, #0]
 800525c:	6041      	str	r1, [r0, #4]
 800525e:	d807      	bhi.n	8005270 <_calloc_r+0x38>
 8005260:	f100 0308 	add.w	r3, r0, #8
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	4620      	mov	r0, r4
 800526e:	bd10      	pop	{r4, pc}
 8005270:	2a24      	cmp	r2, #36	; 0x24
 8005272:	6081      	str	r1, [r0, #8]
 8005274:	60c1      	str	r1, [r0, #12]
 8005276:	bf11      	iteee	ne
 8005278:	f100 0310 	addne.w	r3, r0, #16
 800527c:	6101      	streq	r1, [r0, #16]
 800527e:	f100 0318 	addeq.w	r3, r0, #24
 8005282:	6141      	streq	r1, [r0, #20]
 8005284:	e7ee      	b.n	8005264 <_calloc_r+0x2c>
 8005286:	4603      	mov	r3, r0
 8005288:	e7ec      	b.n	8005264 <_calloc_r+0x2c>
 800528a:	2100      	movs	r1, #0
 800528c:	f7fd fbd4 	bl	8002a38 <memset>
 8005290:	e7ec      	b.n	800526c <_calloc_r+0x34>
	...

08005294 <_malloc_trim_r>:
 8005294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005298:	4689      	mov	r9, r1
 800529a:	4f25      	ldr	r7, [pc, #148]	; (8005330 <_malloc_trim_r+0x9c>)
 800529c:	4606      	mov	r6, r0
 800529e:	f7ff fc63 	bl	8004b68 <__malloc_lock>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800533c <_malloc_trim_r+0xa8>
 80052a8:	685d      	ldr	r5, [r3, #4]
 80052aa:	f1a8 0411 	sub.w	r4, r8, #17
 80052ae:	f025 0503 	bic.w	r5, r5, #3
 80052b2:	eba4 0409 	sub.w	r4, r4, r9
 80052b6:	442c      	add	r4, r5
 80052b8:	fbb4 f4f8 	udiv	r4, r4, r8
 80052bc:	3c01      	subs	r4, #1
 80052be:	fb08 f404 	mul.w	r4, r8, r4
 80052c2:	4544      	cmp	r4, r8
 80052c4:	da05      	bge.n	80052d2 <_malloc_trim_r+0x3e>
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff fc54 	bl	8004b74 <__malloc_unlock>
 80052cc:	2000      	movs	r0, #0
 80052ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052d2:	2100      	movs	r1, #0
 80052d4:	4630      	mov	r0, r6
 80052d6:	f7ff ff25 	bl	8005124 <_sbrk_r>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	442b      	add	r3, r5
 80052de:	4298      	cmp	r0, r3
 80052e0:	d1f1      	bne.n	80052c6 <_malloc_trim_r+0x32>
 80052e2:	4261      	negs	r1, r4
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff ff1d 	bl	8005124 <_sbrk_r>
 80052ea:	3001      	adds	r0, #1
 80052ec:	d110      	bne.n	8005310 <_malloc_trim_r+0x7c>
 80052ee:	2100      	movs	r1, #0
 80052f0:	4630      	mov	r0, r6
 80052f2:	f7ff ff17 	bl	8005124 <_sbrk_r>
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	1a83      	subs	r3, r0, r2
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	dde3      	ble.n	80052c6 <_malloc_trim_r+0x32>
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <_malloc_trim_r+0xa0>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6809      	ldr	r1, [r1, #0]
 8005306:	6053      	str	r3, [r2, #4]
 8005308:	1a40      	subs	r0, r0, r1
 800530a:	490b      	ldr	r1, [pc, #44]	; (8005338 <_malloc_trim_r+0xa4>)
 800530c:	6008      	str	r0, [r1, #0]
 800530e:	e7da      	b.n	80052c6 <_malloc_trim_r+0x32>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <_malloc_trim_r+0xa4>)
 8005314:	1b2d      	subs	r5, r5, r4
 8005316:	f045 0501 	orr.w	r5, r5, #1
 800531a:	605d      	str	r5, [r3, #4]
 800531c:	6813      	ldr	r3, [r2, #0]
 800531e:	4630      	mov	r0, r6
 8005320:	1b1c      	subs	r4, r3, r4
 8005322:	6014      	str	r4, [r2, #0]
 8005324:	f7ff fc26 	bl	8004b74 <__malloc_unlock>
 8005328:	2001      	movs	r0, #1
 800532a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532e:	bf00      	nop
 8005330:	2000010c 	.word	0x2000010c
 8005334:	20000514 	.word	0x20000514
 8005338:	20000aac 	.word	0x20000aac
 800533c:	00000080 	.word	0x00000080

08005340 <_free_r>:
 8005340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005344:	4604      	mov	r4, r0
 8005346:	4688      	mov	r8, r1
 8005348:	2900      	cmp	r1, #0
 800534a:	f000 80ab 	beq.w	80054a4 <_free_r+0x164>
 800534e:	f7ff fc0b 	bl	8004b68 <__malloc_lock>
 8005352:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005356:	4d54      	ldr	r5, [pc, #336]	; (80054a8 <_free_r+0x168>)
 8005358:	f022 0001 	bic.w	r0, r2, #1
 800535c:	f1a8 0308 	sub.w	r3, r8, #8
 8005360:	181f      	adds	r7, r3, r0
 8005362:	68a9      	ldr	r1, [r5, #8]
 8005364:	687e      	ldr	r6, [r7, #4]
 8005366:	428f      	cmp	r7, r1
 8005368:	f026 0603 	bic.w	r6, r6, #3
 800536c:	f002 0201 	and.w	r2, r2, #1
 8005370:	d11b      	bne.n	80053aa <_free_r+0x6a>
 8005372:	4430      	add	r0, r6
 8005374:	b93a      	cbnz	r2, 8005386 <_free_r+0x46>
 8005376:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	6899      	ldr	r1, [r3, #8]
 800537e:	4410      	add	r0, r2
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	60ca      	str	r2, [r1, #12]
 8005384:	6091      	str	r1, [r2, #8]
 8005386:	f040 0201 	orr.w	r2, r0, #1
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	60ab      	str	r3, [r5, #8]
 800538e:	4b47      	ldr	r3, [pc, #284]	; (80054ac <_free_r+0x16c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4298      	cmp	r0, r3
 8005394:	d304      	bcc.n	80053a0 <_free_r+0x60>
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <_free_r+0x170>)
 8005398:	4620      	mov	r0, r4
 800539a:	6819      	ldr	r1, [r3, #0]
 800539c:	f7ff ff7a 	bl	8005294 <_malloc_trim_r>
 80053a0:	4620      	mov	r0, r4
 80053a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	f7ff bbe5 	b.w	8004b74 <__malloc_unlock>
 80053aa:	607e      	str	r6, [r7, #4]
 80053ac:	2a00      	cmp	r2, #0
 80053ae:	d139      	bne.n	8005424 <_free_r+0xe4>
 80053b0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80053b4:	f105 0e08 	add.w	lr, r5, #8
 80053b8:	1a5b      	subs	r3, r3, r1
 80053ba:	4408      	add	r0, r1
 80053bc:	6899      	ldr	r1, [r3, #8]
 80053be:	4571      	cmp	r1, lr
 80053c0:	d032      	beq.n	8005428 <_free_r+0xe8>
 80053c2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80053c6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80053ca:	f8ce 1008 	str.w	r1, [lr, #8]
 80053ce:	19b9      	adds	r1, r7, r6
 80053d0:	6849      	ldr	r1, [r1, #4]
 80053d2:	07c9      	lsls	r1, r1, #31
 80053d4:	d40a      	bmi.n	80053ec <_free_r+0xac>
 80053d6:	4430      	add	r0, r6
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	bb3a      	cbnz	r2, 800542c <_free_r+0xec>
 80053dc:	4e35      	ldr	r6, [pc, #212]	; (80054b4 <_free_r+0x174>)
 80053de:	42b1      	cmp	r1, r6
 80053e0:	d124      	bne.n	800542c <_free_r+0xec>
 80053e2:	2201      	movs	r2, #1
 80053e4:	616b      	str	r3, [r5, #20]
 80053e6:	612b      	str	r3, [r5, #16]
 80053e8:	60d9      	str	r1, [r3, #12]
 80053ea:	6099      	str	r1, [r3, #8]
 80053ec:	f040 0101 	orr.w	r1, r0, #1
 80053f0:	6059      	str	r1, [r3, #4]
 80053f2:	5018      	str	r0, [r3, r0]
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	d1d3      	bne.n	80053a0 <_free_r+0x60>
 80053f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80053fc:	d21a      	bcs.n	8005434 <_free_r+0xf4>
 80053fe:	2201      	movs	r2, #1
 8005400:	08c0      	lsrs	r0, r0, #3
 8005402:	1081      	asrs	r1, r0, #2
 8005404:	408a      	lsls	r2, r1
 8005406:	6869      	ldr	r1, [r5, #4]
 8005408:	3001      	adds	r0, #1
 800540a:	430a      	orrs	r2, r1
 800540c:	606a      	str	r2, [r5, #4]
 800540e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005412:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005416:	3a08      	subs	r2, #8
 8005418:	60da      	str	r2, [r3, #12]
 800541a:	6099      	str	r1, [r3, #8]
 800541c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005420:	60cb      	str	r3, [r1, #12]
 8005422:	e7bd      	b.n	80053a0 <_free_r+0x60>
 8005424:	2200      	movs	r2, #0
 8005426:	e7d2      	b.n	80053ce <_free_r+0x8e>
 8005428:	2201      	movs	r2, #1
 800542a:	e7d0      	b.n	80053ce <_free_r+0x8e>
 800542c:	68fe      	ldr	r6, [r7, #12]
 800542e:	60ce      	str	r6, [r1, #12]
 8005430:	60b1      	str	r1, [r6, #8]
 8005432:	e7db      	b.n	80053ec <_free_r+0xac>
 8005434:	0a42      	lsrs	r2, r0, #9
 8005436:	2a04      	cmp	r2, #4
 8005438:	d813      	bhi.n	8005462 <_free_r+0x122>
 800543a:	0982      	lsrs	r2, r0, #6
 800543c:	3238      	adds	r2, #56	; 0x38
 800543e:	1c51      	adds	r1, r2, #1
 8005440:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005444:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005448:	428e      	cmp	r6, r1
 800544a:	d124      	bne.n	8005496 <_free_r+0x156>
 800544c:	2001      	movs	r0, #1
 800544e:	1092      	asrs	r2, r2, #2
 8005450:	fa00 f202 	lsl.w	r2, r0, r2
 8005454:	6868      	ldr	r0, [r5, #4]
 8005456:	4302      	orrs	r2, r0
 8005458:	606a      	str	r2, [r5, #4]
 800545a:	60de      	str	r6, [r3, #12]
 800545c:	6099      	str	r1, [r3, #8]
 800545e:	60b3      	str	r3, [r6, #8]
 8005460:	e7de      	b.n	8005420 <_free_r+0xe0>
 8005462:	2a14      	cmp	r2, #20
 8005464:	d801      	bhi.n	800546a <_free_r+0x12a>
 8005466:	325b      	adds	r2, #91	; 0x5b
 8005468:	e7e9      	b.n	800543e <_free_r+0xfe>
 800546a:	2a54      	cmp	r2, #84	; 0x54
 800546c:	d802      	bhi.n	8005474 <_free_r+0x134>
 800546e:	0b02      	lsrs	r2, r0, #12
 8005470:	326e      	adds	r2, #110	; 0x6e
 8005472:	e7e4      	b.n	800543e <_free_r+0xfe>
 8005474:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005478:	d802      	bhi.n	8005480 <_free_r+0x140>
 800547a:	0bc2      	lsrs	r2, r0, #15
 800547c:	3277      	adds	r2, #119	; 0x77
 800547e:	e7de      	b.n	800543e <_free_r+0xfe>
 8005480:	f240 5154 	movw	r1, #1364	; 0x554
 8005484:	428a      	cmp	r2, r1
 8005486:	bf9a      	itte	ls
 8005488:	0c82      	lsrls	r2, r0, #18
 800548a:	327c      	addls	r2, #124	; 0x7c
 800548c:	227e      	movhi	r2, #126	; 0x7e
 800548e:	e7d6      	b.n	800543e <_free_r+0xfe>
 8005490:	6889      	ldr	r1, [r1, #8]
 8005492:	428e      	cmp	r6, r1
 8005494:	d004      	beq.n	80054a0 <_free_r+0x160>
 8005496:	684a      	ldr	r2, [r1, #4]
 8005498:	f022 0203 	bic.w	r2, r2, #3
 800549c:	4290      	cmp	r0, r2
 800549e:	d3f7      	bcc.n	8005490 <_free_r+0x150>
 80054a0:	68ce      	ldr	r6, [r1, #12]
 80054a2:	e7da      	b.n	800545a <_free_r+0x11a>
 80054a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a8:	2000010c 	.word	0x2000010c
 80054ac:	20000518 	.word	0x20000518
 80054b0:	20000adc 	.word	0x20000adc
 80054b4:	20000114 	.word	0x20000114

080054b8 <__retarget_lock_acquire_recursive>:
 80054b8:	4770      	bx	lr

080054ba <__retarget_lock_release_recursive>:
 80054ba:	4770      	bx	lr

080054bc <__ascii_mbtowc>:
 80054bc:	b082      	sub	sp, #8
 80054be:	b901      	cbnz	r1, 80054c2 <__ascii_mbtowc+0x6>
 80054c0:	a901      	add	r1, sp, #4
 80054c2:	b142      	cbz	r2, 80054d6 <__ascii_mbtowc+0x1a>
 80054c4:	b14b      	cbz	r3, 80054da <__ascii_mbtowc+0x1e>
 80054c6:	7813      	ldrb	r3, [r2, #0]
 80054c8:	600b      	str	r3, [r1, #0]
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	1c10      	adds	r0, r2, #0
 80054ce:	bf18      	it	ne
 80054d0:	2001      	movne	r0, #1
 80054d2:	b002      	add	sp, #8
 80054d4:	4770      	bx	lr
 80054d6:	4610      	mov	r0, r2
 80054d8:	e7fb      	b.n	80054d2 <__ascii_mbtowc+0x16>
 80054da:	f06f 0001 	mvn.w	r0, #1
 80054de:	e7f8      	b.n	80054d2 <__ascii_mbtowc+0x16>

080054e0 <memmove>:
 80054e0:	4288      	cmp	r0, r1
 80054e2:	b510      	push	{r4, lr}
 80054e4:	eb01 0302 	add.w	r3, r1, r2
 80054e8:	d803      	bhi.n	80054f2 <memmove+0x12>
 80054ea:	1e42      	subs	r2, r0, #1
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d10c      	bne.n	800550a <memmove+0x2a>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	4298      	cmp	r0, r3
 80054f4:	d2f9      	bcs.n	80054ea <memmove+0xa>
 80054f6:	1881      	adds	r1, r0, r2
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	42d3      	cmn	r3, r2
 80054fc:	d100      	bne.n	8005500 <memmove+0x20>
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005504:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005508:	e7f7      	b.n	80054fa <memmove+0x1a>
 800550a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800550e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005512:	e7eb      	b.n	80054ec <memmove+0xc>

08005514 <_realloc_r>:
 8005514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	4682      	mov	sl, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b929      	cbnz	r1, 800552a <_realloc_r+0x16>
 800551e:	4611      	mov	r1, r2
 8005520:	b003      	add	sp, #12
 8005522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005526:	f7ff b8f9 	b.w	800471c <_malloc_r>
 800552a:	9201      	str	r2, [sp, #4]
 800552c:	f7ff fb1c 	bl	8004b68 <__malloc_lock>
 8005530:	9a01      	ldr	r2, [sp, #4]
 8005532:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005536:	f102 080b 	add.w	r8, r2, #11
 800553a:	f1b8 0f16 	cmp.w	r8, #22
 800553e:	f1a4 0908 	sub.w	r9, r4, #8
 8005542:	f025 0603 	bic.w	r6, r5, #3
 8005546:	d90a      	bls.n	800555e <_realloc_r+0x4a>
 8005548:	f038 0807 	bics.w	r8, r8, #7
 800554c:	d509      	bpl.n	8005562 <_realloc_r+0x4e>
 800554e:	230c      	movs	r3, #12
 8005550:	2700      	movs	r7, #0
 8005552:	f8ca 3000 	str.w	r3, [sl]
 8005556:	4638      	mov	r0, r7
 8005558:	b003      	add	sp, #12
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	f04f 0810 	mov.w	r8, #16
 8005562:	4590      	cmp	r8, r2
 8005564:	d3f3      	bcc.n	800554e <_realloc_r+0x3a>
 8005566:	45b0      	cmp	r8, r6
 8005568:	f340 8148 	ble.w	80057fc <_realloc_r+0x2e8>
 800556c:	4ba9      	ldr	r3, [pc, #676]	; (8005814 <_realloc_r+0x300>)
 800556e:	eb09 0106 	add.w	r1, r9, r6
 8005572:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005576:	469b      	mov	fp, r3
 8005578:	4571      	cmp	r1, lr
 800557a:	684b      	ldr	r3, [r1, #4]
 800557c:	d005      	beq.n	800558a <_realloc_r+0x76>
 800557e:	f023 0001 	bic.w	r0, r3, #1
 8005582:	4408      	add	r0, r1
 8005584:	6840      	ldr	r0, [r0, #4]
 8005586:	07c7      	lsls	r7, r0, #31
 8005588:	d447      	bmi.n	800561a <_realloc_r+0x106>
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	4571      	cmp	r1, lr
 8005590:	eb06 0703 	add.w	r7, r6, r3
 8005594:	d119      	bne.n	80055ca <_realloc_r+0xb6>
 8005596:	f108 0010 	add.w	r0, r8, #16
 800559a:	4287      	cmp	r7, r0
 800559c:	db3f      	blt.n	800561e <_realloc_r+0x10a>
 800559e:	eba7 0708 	sub.w	r7, r7, r8
 80055a2:	eb09 0308 	add.w	r3, r9, r8
 80055a6:	f047 0701 	orr.w	r7, r7, #1
 80055aa:	f8cb 3008 	str.w	r3, [fp, #8]
 80055ae:	605f      	str	r7, [r3, #4]
 80055b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80055b4:	4650      	mov	r0, sl
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	ea43 0308 	orr.w	r3, r3, r8
 80055be:	f844 3c04 	str.w	r3, [r4, #-4]
 80055c2:	f7ff fad7 	bl	8004b74 <__malloc_unlock>
 80055c6:	4627      	mov	r7, r4
 80055c8:	e7c5      	b.n	8005556 <_realloc_r+0x42>
 80055ca:	45b8      	cmp	r8, r7
 80055cc:	dc27      	bgt.n	800561e <_realloc_r+0x10a>
 80055ce:	68cb      	ldr	r3, [r1, #12]
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	60d3      	str	r3, [r2, #12]
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	eba7 0008 	sub.w	r0, r7, r8
 80055da:	280f      	cmp	r0, #15
 80055dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80055e0:	eb09 0207 	add.w	r2, r9, r7
 80055e4:	f240 810c 	bls.w	8005800 <_realloc_r+0x2ec>
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	eb09 0108 	add.w	r1, r9, r8
 80055f0:	ea43 0308 	orr.w	r3, r3, r8
 80055f4:	f040 0001 	orr.w	r0, r0, #1
 80055f8:	f8c9 3004 	str.w	r3, [r9, #4]
 80055fc:	6048      	str	r0, [r1, #4]
 80055fe:	6853      	ldr	r3, [r2, #4]
 8005600:	3108      	adds	r1, #8
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6053      	str	r3, [r2, #4]
 8005608:	4650      	mov	r0, sl
 800560a:	f7ff fe99 	bl	8005340 <_free_r>
 800560e:	4650      	mov	r0, sl
 8005610:	f7ff fab0 	bl	8004b74 <__malloc_unlock>
 8005614:	f109 0708 	add.w	r7, r9, #8
 8005618:	e79d      	b.n	8005556 <_realloc_r+0x42>
 800561a:	2300      	movs	r3, #0
 800561c:	4619      	mov	r1, r3
 800561e:	07e8      	lsls	r0, r5, #31
 8005620:	f100 8085 	bmi.w	800572e <_realloc_r+0x21a>
 8005624:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005628:	eba9 0505 	sub.w	r5, r9, r5
 800562c:	6868      	ldr	r0, [r5, #4]
 800562e:	f020 0003 	bic.w	r0, r0, #3
 8005632:	4430      	add	r0, r6
 8005634:	2900      	cmp	r1, #0
 8005636:	d077      	beq.n	8005728 <_realloc_r+0x214>
 8005638:	4571      	cmp	r1, lr
 800563a:	d151      	bne.n	80056e0 <_realloc_r+0x1cc>
 800563c:	4403      	add	r3, r0
 800563e:	f108 0110 	add.w	r1, r8, #16
 8005642:	428b      	cmp	r3, r1
 8005644:	db70      	blt.n	8005728 <_realloc_r+0x214>
 8005646:	462f      	mov	r7, r5
 8005648:	68ea      	ldr	r2, [r5, #12]
 800564a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800564e:	60ca      	str	r2, [r1, #12]
 8005650:	6091      	str	r1, [r2, #8]
 8005652:	1f32      	subs	r2, r6, #4
 8005654:	2a24      	cmp	r2, #36	; 0x24
 8005656:	d83c      	bhi.n	80056d2 <_realloc_r+0x1be>
 8005658:	2a13      	cmp	r2, #19
 800565a:	d937      	bls.n	80056cc <_realloc_r+0x1b8>
 800565c:	6821      	ldr	r1, [r4, #0]
 800565e:	2a1b      	cmp	r2, #27
 8005660:	60a9      	str	r1, [r5, #8]
 8005662:	6861      	ldr	r1, [r4, #4]
 8005664:	60e9      	str	r1, [r5, #12]
 8005666:	d81c      	bhi.n	80056a2 <_realloc_r+0x18e>
 8005668:	f105 0210 	add.w	r2, r5, #16
 800566c:	f104 0108 	add.w	r1, r4, #8
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	6010      	str	r0, [r2, #0]
 8005674:	6848      	ldr	r0, [r1, #4]
 8005676:	6050      	str	r0, [r2, #4]
 8005678:	6889      	ldr	r1, [r1, #8]
 800567a:	6091      	str	r1, [r2, #8]
 800567c:	eba3 0308 	sub.w	r3, r3, r8
 8005680:	eb05 0208 	add.w	r2, r5, r8
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	f8cb 2008 	str.w	r2, [fp, #8]
 800568c:	6053      	str	r3, [r2, #4]
 800568e:	686b      	ldr	r3, [r5, #4]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	ea43 0308 	orr.w	r3, r3, r8
 8005698:	606b      	str	r3, [r5, #4]
 800569a:	4650      	mov	r0, sl
 800569c:	f7ff fa6a 	bl	8004b74 <__malloc_unlock>
 80056a0:	e759      	b.n	8005556 <_realloc_r+0x42>
 80056a2:	68a1      	ldr	r1, [r4, #8]
 80056a4:	2a24      	cmp	r2, #36	; 0x24
 80056a6:	6129      	str	r1, [r5, #16]
 80056a8:	68e1      	ldr	r1, [r4, #12]
 80056aa:	bf18      	it	ne
 80056ac:	f105 0218 	addne.w	r2, r5, #24
 80056b0:	6169      	str	r1, [r5, #20]
 80056b2:	bf09      	itett	eq
 80056b4:	6922      	ldreq	r2, [r4, #16]
 80056b6:	f104 0110 	addne.w	r1, r4, #16
 80056ba:	61aa      	streq	r2, [r5, #24]
 80056bc:	6960      	ldreq	r0, [r4, #20]
 80056be:	bf02      	ittt	eq
 80056c0:	f105 0220 	addeq.w	r2, r5, #32
 80056c4:	f104 0118 	addeq.w	r1, r4, #24
 80056c8:	61e8      	streq	r0, [r5, #28]
 80056ca:	e7d1      	b.n	8005670 <_realloc_r+0x15c>
 80056cc:	463a      	mov	r2, r7
 80056ce:	4621      	mov	r1, r4
 80056d0:	e7ce      	b.n	8005670 <_realloc_r+0x15c>
 80056d2:	4621      	mov	r1, r4
 80056d4:	4638      	mov	r0, r7
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	f7ff ff02 	bl	80054e0 <memmove>
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	e7cd      	b.n	800567c <_realloc_r+0x168>
 80056e0:	18c7      	adds	r7, r0, r3
 80056e2:	45b8      	cmp	r8, r7
 80056e4:	dc20      	bgt.n	8005728 <_realloc_r+0x214>
 80056e6:	68cb      	ldr	r3, [r1, #12]
 80056e8:	688a      	ldr	r2, [r1, #8]
 80056ea:	60d3      	str	r3, [r2, #12]
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	4628      	mov	r0, r5
 80056f0:	68eb      	ldr	r3, [r5, #12]
 80056f2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80056f6:	60d3      	str	r3, [r2, #12]
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	1f32      	subs	r2, r6, #4
 80056fc:	2a24      	cmp	r2, #36	; 0x24
 80056fe:	d843      	bhi.n	8005788 <_realloc_r+0x274>
 8005700:	2a13      	cmp	r2, #19
 8005702:	d93f      	bls.n	8005784 <_realloc_r+0x270>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	2a1b      	cmp	r2, #27
 8005708:	60ab      	str	r3, [r5, #8]
 800570a:	6863      	ldr	r3, [r4, #4]
 800570c:	60eb      	str	r3, [r5, #12]
 800570e:	d824      	bhi.n	800575a <_realloc_r+0x246>
 8005710:	f105 0010 	add.w	r0, r5, #16
 8005714:	f104 0308 	add.w	r3, r4, #8
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	6002      	str	r2, [r0, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	6042      	str	r2, [r0, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	6083      	str	r3, [r0, #8]
 8005724:	46a9      	mov	r9, r5
 8005726:	e756      	b.n	80055d6 <_realloc_r+0xc2>
 8005728:	4580      	cmp	r8, r0
 800572a:	4607      	mov	r7, r0
 800572c:	dddf      	ble.n	80056ee <_realloc_r+0x1da>
 800572e:	4611      	mov	r1, r2
 8005730:	4650      	mov	r0, sl
 8005732:	f7fe fff3 	bl	800471c <_malloc_r>
 8005736:	4607      	mov	r7, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d0ae      	beq.n	800569a <_realloc_r+0x186>
 800573c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005740:	f1a0 0208 	sub.w	r2, r0, #8
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	444b      	add	r3, r9
 800574a:	429a      	cmp	r2, r3
 800574c:	d120      	bne.n	8005790 <_realloc_r+0x27c>
 800574e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005752:	f027 0703 	bic.w	r7, r7, #3
 8005756:	4437      	add	r7, r6
 8005758:	e73d      	b.n	80055d6 <_realloc_r+0xc2>
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	2a24      	cmp	r2, #36	; 0x24
 800575e:	612b      	str	r3, [r5, #16]
 8005760:	68e3      	ldr	r3, [r4, #12]
 8005762:	bf18      	it	ne
 8005764:	f105 0018 	addne.w	r0, r5, #24
 8005768:	616b      	str	r3, [r5, #20]
 800576a:	bf09      	itett	eq
 800576c:	6923      	ldreq	r3, [r4, #16]
 800576e:	f104 0310 	addne.w	r3, r4, #16
 8005772:	61ab      	streq	r3, [r5, #24]
 8005774:	6962      	ldreq	r2, [r4, #20]
 8005776:	bf02      	ittt	eq
 8005778:	f105 0020 	addeq.w	r0, r5, #32
 800577c:	f104 0318 	addeq.w	r3, r4, #24
 8005780:	61ea      	streq	r2, [r5, #28]
 8005782:	e7c9      	b.n	8005718 <_realloc_r+0x204>
 8005784:	4623      	mov	r3, r4
 8005786:	e7c7      	b.n	8005718 <_realloc_r+0x204>
 8005788:	4621      	mov	r1, r4
 800578a:	f7ff fea9 	bl	80054e0 <memmove>
 800578e:	e7c9      	b.n	8005724 <_realloc_r+0x210>
 8005790:	1f32      	subs	r2, r6, #4
 8005792:	2a24      	cmp	r2, #36	; 0x24
 8005794:	d82e      	bhi.n	80057f4 <_realloc_r+0x2e0>
 8005796:	2a13      	cmp	r2, #19
 8005798:	d929      	bls.n	80057ee <_realloc_r+0x2da>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	2a1b      	cmp	r2, #27
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	6043      	str	r3, [r0, #4]
 80057a4:	d80e      	bhi.n	80057c4 <_realloc_r+0x2b0>
 80057a6:	f100 0308 	add.w	r3, r0, #8
 80057aa:	f104 0208 	add.w	r2, r4, #8
 80057ae:	6811      	ldr	r1, [r2, #0]
 80057b0:	6019      	str	r1, [r3, #0]
 80057b2:	6851      	ldr	r1, [r2, #4]
 80057b4:	6059      	str	r1, [r3, #4]
 80057b6:	6892      	ldr	r2, [r2, #8]
 80057b8:	609a      	str	r2, [r3, #8]
 80057ba:	4621      	mov	r1, r4
 80057bc:	4650      	mov	r0, sl
 80057be:	f7ff fdbf 	bl	8005340 <_free_r>
 80057c2:	e76a      	b.n	800569a <_realloc_r+0x186>
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	2a24      	cmp	r2, #36	; 0x24
 80057c8:	6083      	str	r3, [r0, #8]
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	bf18      	it	ne
 80057ce:	f104 0210 	addne.w	r2, r4, #16
 80057d2:	60c3      	str	r3, [r0, #12]
 80057d4:	bf09      	itett	eq
 80057d6:	6923      	ldreq	r3, [r4, #16]
 80057d8:	f100 0310 	addne.w	r3, r0, #16
 80057dc:	6103      	streq	r3, [r0, #16]
 80057de:	6961      	ldreq	r1, [r4, #20]
 80057e0:	bf02      	ittt	eq
 80057e2:	f100 0318 	addeq.w	r3, r0, #24
 80057e6:	f104 0218 	addeq.w	r2, r4, #24
 80057ea:	6141      	streq	r1, [r0, #20]
 80057ec:	e7df      	b.n	80057ae <_realloc_r+0x29a>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4622      	mov	r2, r4
 80057f2:	e7dc      	b.n	80057ae <_realloc_r+0x29a>
 80057f4:	4621      	mov	r1, r4
 80057f6:	f7ff fe73 	bl	80054e0 <memmove>
 80057fa:	e7de      	b.n	80057ba <_realloc_r+0x2a6>
 80057fc:	4637      	mov	r7, r6
 80057fe:	e6ea      	b.n	80055d6 <_realloc_r+0xc2>
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	431f      	orrs	r7, r3
 8005806:	f8c9 7004 	str.w	r7, [r9, #4]
 800580a:	6853      	ldr	r3, [r2, #4]
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6053      	str	r3, [r2, #4]
 8005812:	e6fc      	b.n	800560e <_realloc_r+0xfa>
 8005814:	2000010c 	.word	0x2000010c

08005818 <__ascii_wctomb>:
 8005818:	b149      	cbz	r1, 800582e <__ascii_wctomb+0x16>
 800581a:	2aff      	cmp	r2, #255	; 0xff
 800581c:	bf8b      	itete	hi
 800581e:	238a      	movhi	r3, #138	; 0x8a
 8005820:	700a      	strbls	r2, [r1, #0]
 8005822:	6003      	strhi	r3, [r0, #0]
 8005824:	2001      	movls	r0, #1
 8005826:	bf88      	it	hi
 8005828:	f04f 30ff 	movhi.w	r0, #4294967295
 800582c:	4770      	bx	lr
 800582e:	4608      	mov	r0, r1
 8005830:	4770      	bx	lr
	...

08005834 <_sbrk>:
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <_sbrk+0x14>)
 8005836:	4602      	mov	r2, r0
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	b909      	cbnz	r1, 8005840 <_sbrk+0xc>
 800583c:	4903      	ldr	r1, [pc, #12]	; (800584c <_sbrk+0x18>)
 800583e:	6019      	str	r1, [r3, #0]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	4402      	add	r2, r0
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	4770      	bx	lr
 8005848:	20000ae0 	.word	0x20000ae0
 800584c:	20000b7c 	.word	0x20000b7c

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
